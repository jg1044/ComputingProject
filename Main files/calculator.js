window.onload = function() {

        //------------------------------------------------------------------------------
        //Global variables------------------------------------------

        //----weapon/armor/condition globals 

        //select function from https://gist.github.com/prof3ssorSt3v3/98e8466a2f2be4f6c538958309f77381

        let attackDamageWeapon = 0;

        let weaponSkill = 1; // variable to determine what skill weapon belongs to, used when calculating chance to hit target

        let weaponInput = "iron-longsword"; //initial value set to iron longsword

        let conditionModifier = 0.00;

        let conditionInput = "max";

        let selectedWeapon = 0;


        let selectedArmor = 0;

        let armorInput = "iron-armor";
        //----------

        //---chance to hit global var---------------------

        let chanceToHit = 0;


        //--spell skill plus chance to cast global var -----------------

        let spellSkillSelected = 0; //0 = none, 1 = restoration, 2 = alteration, 3 = mysticism, 4 = illusion, 5 = conjuration, 6 = destruction
        let chanceToCast = 0;


        //----ARRAY for class minor/major skill selection-------

        const classSkillsArray = []; //array for class skills used in determining level up 

        const classValuesArray = []; //array for class values inputted into charVals and .value 

        const oldLocalArr = []; //array to store repo of oldValues for resetting when new values are selcted 

        let splicedArr = []; //splice repo of old local array name values to iterate through in order to insert oldLocalArr values through 


        //classInputFinals global (for use with observers to determine which final values are used in level calculation)

        let classInputFinals = 0;

        //class select global (for selection + saving of class)

        let classSelect = 0; //global variable determining the class selected  

        let classValueEndurance = 0; //sets classValueEndurance for use in health 


        //checkLoad is load variable used to check load is currently happening for specific function calls not to take place i.e updating values after GetClass() 

        let checkLoad = 0;


        //-----------Set charVals object for storing character skill values ----------------------------------------------------------------
        //-----------------------------------------------------------------------------
        //--associative array for charcter values     

        //define character values as 0
        const charVals = {};

        //main
        charVals.health = 0;
        charVals.magicka = 0;
        charVals.fatigue = 0;

        //sub-main
        charVals.encumbrance = 0;

        //attributes 
        charVals.strength = 0;
        charVals.intelligence = 0;
        charVals.willpower = 0;
        charVals.agility = 0;
        charVals.speed = 0;
        charVals.endurance = 0;
        charVals.personality = 0;
        charVals.luck = 0;
        charVals.magickaMultiplierBonus = 0.0;

        //skills
        //endurance 
        charVals.heavyArmor = 0;
        charVals.mediumArmor = 0;
        charVals.spear = 0;
        //strength 
        charVals.acrobatics = 0;
        charVals.armorer = 0;
        charVals.axe = 0;
        charVals.bluntWeapon = 0;
        charVals.longBlade = 0;
        //agility 
        charVals.block = 0;
        charVals.lightArmor = 0;
        charVals.marksman = 0;
        charVals.sneak = 0;
        //speed 
        charVals.athletics = 0;
        charVals.handToHand = 0;
        charVals.shortBlade = 0;
        charVals.unarmored = 0;
        //personality
        charVals.illusion = 0;
        charVals.mercantile = 0;
        charVals.speechcraft = 0;
        //intelligence
        charVals.alchemy = 0;
        charVals.conjuration = 0;
        charVals.enchant = 0;
        charVals.xsecurity = 0;
        //willpower
        charVals.alteration = 0;
        charVals.destruction = 0;
        charVals.mysticism = 0;
        charVals.restoration = 0;

        //https://en.uesp.net/wiki/Morrowind:Races <-- return to if needed for information on resists  

        //variables for birthsign related calculations

        //-----BIRTHSIGNS---------------------------------------------------------------


        let fortifyAttack = 0;
        let ladysGrace = 0; //fortify personality
        let ladysFavour = 0; //fortify endurance
        let charioteer = 0; //fortify speed
        let elfbornMagicka = 0; //fortify maximum magicka 
        let elfbornWeakness = 0; //weakness to magicka 50%   
        let wombburn = 0; //fortify max magicka 
        let mooncalf = 0; //fortify agility
        let fay = 0; //fortify maximum magicka 
        let warwyrd = 0; //fortify attack



        //gender boolean storage (0 = male, 1 = female)
        charVals.gender = 0;
        charVals.race = 99;

        //race value storage (1=argonian, 2=)

        //-----BIRTHSIGN CURRENTLY UNIMPLEMENTED BUT NEEDED FOR DB
        charVals.birthsign = 99;
        charVals.xclass = 0;

        //----RESISTS NOT CURRENTLY IMPLEMENTED BUT NEEDED FOR DB [MAY NOT EVEN NEED TO BE IMPLEMENTED AT ALL COULD POSSIBLY BE CALCULATED THROUGH SELECTIONS OF USER? ]

        charVals.resistMagicka = 0;
        charVals.resistFire = 0;
        charVals.resistFrost = 0;
        charVals.resistShock = 0;
        charVals.resistPoison = 0;
        charVals.resistCommonDisease = 0;

        charVals.level = 0;

        //------character base values initialisation 

        let characterName = "";


        //--Base values variables---

        let baseStrength = 0;
        let baseIntelligence = 0;
        let baseWillpower = 0;
        let baseAgility = 0;
        let baseSpeed = 0;
        let baseEndurance = 0;
        let basePersonality = 0;
        let baseLuck = 0;

        let baseMagickaMultiplierBonus = 0.0;

        let baseHeavyArmor = 0;
        let baseMediumArmor = 0;
        let baseSpear = 0;
        let baseAcrobatics = 0;
        let baseArmorer = 0;
        let baseAxe = 0;
        let baseBluntWeapon = 0;
        let baseLongBlade = 0;
        let baseBlock = 0;
        let baseLightArmor = 0;
        let baseMarksman = 0;
        let baseSneak = 0;
        let baseAthletics = 0;
        let baseHandToHand = 0;
        let baseShortBlade = 0;
        let baseUnarmored = 0;
        let baseIllusion = 0;
        let baseMercantile = 0;
        let baseSpeechcraft = 0;
        let baseAlchemy = 0;
        let baseConjuration = 0;
        let baseEnchant = 0;
        let baseSecurity = 0; //was baseXsecurity
        let baseAlteration = 0;
        let baseDestruction = 0;
        let baseMysticism = 0;
        let baseRestoration = 0;


        //base gender and race variables

        //        let gender = 0;                 //(set to male(0) on initialise
        //        let race = 1;                   //set to argonian(1) on initialise

        //----------------------------------------------old base attribute variables GLOBAL----

        let oldBaseStrength = 0;
        let oldBaseIntelligence = 0;
        let oldBaseWillpower = 0;
        let oldBaseAgility = 0;
        let oldBaseSpeed = 0;
        let oldBaseEndurance = 0;
        let oldBasePersonality = 0;
        let oldBaseLuck = 0;

        let oldBaseHeavyArmor = 0;
        let oldBaseMediumArmor = 0;
        let oldBaseSpear = 0;
        let oldBaseAcrobatics = 0;
        let oldBaseArmorer = 0;
        let oldBaseAxe = 0;
        let oldBaseBluntWeapon = 0;
        let oldBaseLongBlade = 0;
        let oldBaseBlock = 0;
        let oldBaseLightArmor = 0;
        let oldBaseMarksman = 0;
        let oldBaseSneak = 0;
        let oldBaseAthletics = 0;
        let oldBaseHandToHand = 0;
        let oldBaseShortBlade = 0;
        let oldBaseUnarmored = 0;
        let oldBaseIllusion = 0;
        let oldBaseMercantile = 0;
        let oldBaseSpeechcraft = 0;
        let oldBaseAlchemy = 0;
        let oldBaseConjuration = 0;
        let oldBaseEnchant = 0;
        let oldBaseSecurity = 0; //was oldBaseXsecurity
        let oldBaseAlteration = 0;
        let oldBaseDestruction = 0;
        let oldBaseMysticism = 0;
        let oldBaseRestoration = 0;
        //------------------------------------------------------------------------------

        //-----------WEAPON AND ARMOR VALUES--------------------------------------------

        //function to determine random attack damage between preset weapon damage points 
        //https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript

        function randomIntFromInterval(min, max) { // min and max included 
            return Math.floor(Math.random() * (max - min + 1) + min);
        }


        //---------------------Creational functions to build pages-------------------------
        
        function HomePage(){
            
            ClearPage();    //------- clears page from 'content-anchor' tag
            
            const contentAnchor = document.querySelector("#content-anchor");
            
        
            
            
                var anchor = document.createElement("div");
                    anchor.setAttribute("class", "anchor");
                    
            contentAnchor.appendChild(anchor);
                
                    var welcomeText = document.createElement("div");
                        welcomeText.setAttribute("id", "welcome-txt");
                    
                anchor.appendChild(welcomeText);
                    
                        var welcomeTxtHeader = document.createElement("header");
                            welcomeTxtHeader.setAttribute("id", "welcome-txt-header");
                            welcomeTxtHeader.textContent = "Morrowind Calculator";
                        
                    welcomeText.appendChild(welcomeTxtHeader);
                        
                            var welcomeTxtInstructions = document.createElement("p");
                                welcomeTxtInstructions.setAttribute("id", "welcome-txt-instructions");
                                welcomeTxtInstructions.textContent = "Morrowind Calculator is a calculation tool to assist in the planning and creation of characters for the 2002 PC game, 'The Elder Scrolls III, Morrowind'.To use the calculator select 'Create Character' and follow the instructions given. Alternatively you may create an account which will enable the storage of up to 8 character saves. If you already have an account simply login to access your saved characters.This website was created using the resources found at the Unofficial Elder Scrolls Pages Morrowind Wikipedia and the OpenMorrowind project.";
                                
                        welcomeText.appendChild(welcomeTxtInstructions);
            
                    var parentGrid = document.createElement("div");
                    parentGrid.setAttribute("class", "parent-grid");
                    
                    
                anchor.appendChild(parentGrid);
            
                        var guestSelectBox = document.createElement("div");
                            guestSelectBox.setAttribute("id", "guest-select-box");
                        
                        parentGrid.appendChild(guestSelectBox);
                    
                            var guestCreate = document.createElement("div");
                                guestCreate.setAttribute("id", "guest-create");
                            
                            guestSelectBox.appendChild(guestCreate);
                        
                                var guestCreateTxt = document.createElement("div");
                                    guestCreateTxt.setAttribute("id", "guest-create-txt");
                                    guestCreateTxt.setAttribute("class", "user-select-grid");
                                
                                guestCreate.appendChild(guestCreateTxt);
                        
                                    var createCenterContainer = document.createElement("div");
                                        createCenterContainer.setAttribute("class", "create-center-container");
                                    
                                    guestCreateTxt.appendChild(createCenterContainer);
                                
                                        var guestCreateTxtActual = document.createElement("p");
                                            guestCreateTxtActual.setAttribute("id", "guest-create-txt-actual");
                                            guestCreateTxtActual.setAttribute("class", "guest-create-txt-positioning");
                                            guestCreateTxtActual.textContent = "CREATE CHARACTER";
                                        
                                        createCenterContainer.appendChild(guestCreateTxtActual); 
                                    
                            var signInFormContainer = document.createElement("div");
                                signInFormContainer.setAttribute("id", "sign-in-form-container");
                                signInFormContainer.setAttribute("method", "POST");
                                signInFormContainer.setAttribute("action", "account-api.php");
                            
                            guestSelectBox.appendChild(signInFormContainer);
                            
                                var signInForm = document.createElement("form");
                                    signInForm.setAttribute("id", "sign-in-form");
                                
                                signInFormContainer.appendChild(signInForm);
                                
                                    var signInUl = document.createElement("ul");
                                        signInUl.setAttribute("class", "sign-in-ul");
                                
                                    signInForm.appendChild(signInUl);
                                
                                        var guestSignInListTxt = document.createElement("li");
                                            guestSignInListTxt.setAttribute("class", "sign-in-li-txt");
                                            
                                        signInUl.appendChild(guestSignInListTxt);
                                        
                                            var guestSignInTxtActual = document.createElement("p");
                                                guestSignInTxtActual.setAttribute("id", "guest-sign-in-txt-actual");
                                                guestSignInTxtActual.textContent = "Or sign in...";
                                                
                                            guestSignInListTxt.appendChild(guestSignInTxtActual);
                                            
                                        var signInLi1 = document.createElement("li");
                                            signInLi1.setAttribute("class", "sign-in-li");
                                            
                                        signInUl.appendChild(signInLi1);
                                        
                                            var guestSignInUsername = document.createElement("input");
                                                guestSignInUsername.setAttribute("type", "text");
                                                guestSignInUsername.setAttribute("id", "guest-sign-in-username");
                                                guestSignInUsername.setAttribute("class", "guest-form-size");
                                                guestSignInUsername.setAttribute("name", "guest-sign-in-username");
                                                guestSignInUsername.setAttribute("placeholder", "Username");
                                                
                                            signInLi1.appendChild(guestSignInUsername);
                                            
                                        var signInLi2 = document.createElement("li");
                                            signInLi2.setAttribute("class", "sign-in-li");
                                            
                                        signInUl.appendChild(signInLi2);
                                        
                                            var guestSignInPassword = document.createElement("input");
                                                guestSignInPassword.setAttribute("type", "text");
                                                guestSignInPassword.setAttribute("id", "guest-sign-in-password");
                                                guestSignInPassword.setAttribute("class", "guest-form-size");
                                                guestSignInPassword.setAttribute("name", "guest-sign-in-password");
                                                guestSignInPassword.setAttribute("placeholder", "Password");
                                                
                                            signInLi2.appendChild(guestSignInPassword);
                                            
                                        var signInLi3 = document.createElement("li");
                                            signInLi3.setAttribute("class", "sign-in-li");
                                            
                                        signInUl.appendChild(signInLi3);    
                                            
                                            var guestSignInSubmit = document.createElement("input");
                                                guestSignInSubmit.setAttribute("type", "submit");
                                                guestSignInSubmit.setAttribute("id", "guest-submit");
                                                guestSignInSubmit.setAttribute("value", "login");
                                                guestSignInSubmit.setAttribute("name", "guest-submit");
                                                
                                            signInLi3.appendChild(guestSignInSubmit);
                       
                               var signInDetail = document.createElement("div");
                                   signInDetail.setAttribute("id", "sign-in-detail");
                                   
                                guestSelectBox.appendChild(signInDetail);
                                    
                                    var signInDetailTxt = document.createElement("p");
                                    signInDetailTxt.setAttribute("id", "sign-in-detail-txt");
                                    
                                    signInDetail.appendChild(signInDetailTxt);
                                            
                var createAccContainer = document.createElement("div");
                    createAccContainer.setAttribute("id", "create-acc-container");
                    
            contentAnchor.appendChild(createAccContainer);
                
                    var createAccLink = document.createElement("p");
                        createAccLink.setAttribute("id", "create-acc-link");
                        createAccLink.textContent = "To create an account please click";
                        
                    createAccContainer.appendChild(createAccLink);
                        
                    var createAccBtn = document.createElement("button");
                        createAccBtn.setAttribute("id", "create-acc-btn");
                        createAccBtn.textContent = "here";
        
                            
                    createAccContainer.appendChild(createAccBtn);
                                            
                                            
        //-------------event listeners added------------------------                                    
                                            
                const guestSubmit = document.querySelector("#guest-submit");                            
                guestSubmit.addEventListener("click", LoginAccount);    
                                            
                                            
                const guestCalcOpen = document.querySelector("#guest-create-txt");
                guestCalcOpen.addEventListener("click", GuestCalcPage);
                                            
                const createAccount = document.querySelector("#create-acc-btn");
                createAccount.addEventListener("click", CreateAccountPage);
                                            
                                        
        }
        
        function CreateAccountPage(){
            
            var guestSelectBoxRemove = document.querySelector("#guest-select-box");
            var createAccLink = document.querySelector("#create-acc-link");
            var createAccBtn = document.querySelector("#create-acc-btn");
            var createAccContainer = document.querySelector("#create-acc-container");
            RemoveChildren(guestSelectBoxRemove);
            RemoveChildren(createAccLink);
            RemoveChildren(createAccBtn);
        
            
            const parentGridAnchor = document.querySelector(".parent-grid");
            
                var guestSelectBoxCreate = document.createElement("div");
                    guestSelectBoxCreate.setAttribute("id", "guest-select-box");
                    
                parentGridAnchor.appendChild(guestSelectBoxCreate);
                    
                    var createAccountFormContainer = document.createElement("div");
                        createAccountFormContainer.setAttribute("id", "create-account-form-container");
                        
                    guestSelectBoxCreate.appendChild(createAccountFormContainer);
                    
                        var createAccountTitle = document.createElement("div");
                            createAccountTitle.setAttribute("id", "create-account-title");
                            
                        createAccountFormContainer.appendChild(createAccountTitle);
                        
                            var createAccountTitleText = document.createElement("p");
                                createAccountTitleText.setAttribute("id", "create-account-title-text");
                                createAccountTitleText.textContent = "Create Account:";
                                
                            createAccountTitle.appendChild(createAccountTitleText);
                    
                        var accountCreate = document.createElement("form");
                            accountCreate.setAttribute("action", "account-api.php");
                            accountCreate.setAttribute("method", "POST");
                            accountCreate.setAttribute("id", "account-create");
                            
                        createAccountFormContainer.appendChild(accountCreate);
                        
                            var userCreateLabel = document.createElement("label");
                                userCreateLabel.setAttribute("for", "username");
                                userCreateLabel.setAttribute("id", "user-create-label");
                                userCreateLabel.setAttribute("class", "create-label");
                                userCreateLabel.textContent = "Username:";
                                
                            accountCreate.appendChild(userCreateLabel);
                            
                            var username = document.createElement("input");
                                username.setAttribute("id", "username");
                                username.setAttribute("class", "create-field");
                                username.setAttribute("type", "text");
                                
                            accountCreate.appendChild(username);
                            
                            var passCreateLabel = document.createElement("label");
                                passCreateLabel.setAttribute("for", "password");
                                passCreateLabel.setAttribute("id", "pass-create-label");
                                passCreateLabel.setAttribute("class", "create-label");
                                passCreateLabel.textContent = "Password:";
                                
                            accountCreate.appendChild(passCreateLabel);
                            
                            var password = document.createElement("input");
                                password.setAttribute("id", "password");
                                password.setAttribute("class", "create-field");
                                password.setAttribute("type", "text");
                                
                            accountCreate.appendChild(password);
                            
                            var emailCreateLabel = document.createElement("label");
                                emailCreateLabel.setAttribute("for", "email");
                                emailCreateLabel.setAttribute("id", "email-create-label");
                                emailCreateLabel.setAttribute("class", "create-label");
                                emailCreateLabel.textContent = "Email:";
                                
                            accountCreate.appendChild(emailCreateLabel);
                            
                            var email = document.createElement("input");
                                email.setAttribute("id", "email");
                                email.setAttribute("class", "create-field");
                                email.setAttribute("type", "text");
                                
                            accountCreate.appendChild(email);
                            
                            var submit = document.createElement("input");
                                submit.setAttribute("id", "submit");
                                submit.setAttribute("class", "create-submit");
                                submit.setAttribute("type", "submit");
                                submit.setAttribute("name", "create");
                                submit.setAttribute("value", "Submit");
                                
                            accountCreate.appendChild(submit);
                            
                        var homePageLink = document.createElement("p");
                            homePageLink.setAttribute("id", "home-page-link");
                            homePageLink.textContent = "To return please click ";
                            
                        createAccContainer.appendChild(homePageLink);
                        
                        var homePageBtn = document.createElement("button");
                            homePageBtn.setAttribute("id", "home-page-btn");
                            homePageBtn.textContent = "here";
                            
                        createAccContainer.appendChild(homePageBtn);
                        
                    
                        homePageBtn.addEventListener("click", HomePage);
                            
                        
                        submit.addEventListener("click", CreateAccount);                
            
            
            
            
        }  
            
        function UserLoginPage(){
            
            
            ClearPage();
            
            
            const contentAnchor = document.querySelector("#content-anchor");
        
            
                var welcomeLoginDisplay = document.createElement("div");
                    welcomeLoginDisplay.setAttribute("id", "welcome-login-display");
            
            contentAnchor.appendChild(welcomeLoginDisplay);
            
                    var loginUser = document.createElement("p");
                        loginUser.setAttribute("id", "login-user");
                        loginUser.textContent = "Welcome " + username;              //set username in appropriate place
                    
                welcomeLoginDisplay.appendChild(loginUser);
                
                    var loginUserTxtOuterDiv = document.createElement("div");
                        loginUserTxtOuterDiv.setAttribute("id", "login-user-txt-outer-div");
                        
                welcomeLoginDisplay.appendChild(loginUserTxtOuterDiv);
                
                        var loginUserTxt = document.createElement("p");
                            loginUserTxt.setAttribute("id", "login-user-txt");
                            loginUserTxt.textContent = "Follow the instructions to begin using 'Morrowind Calculator'. To view and account details / delete account please click the link below";
                            
                    loginUserTxtOuterDiv.appendChild(loginUserTxt);
            
                    var accDetailsUserContainer = document.createElement("div");
                        accDetailsUserContainer.setAttribute("id", "acc-details-user-container");
                        
                welcomeLoginDisplay.appendChild(accDetailsUserContainer);
                
                        var accDetailsUserLink = document.createElement("p");
                            accDetailsUserLink.setAttribute("id", "acc-details-user-link");
                            accDetailsUserLink.textContent = "To view account details please click";
                            
                    accDetailsUserContainer.appendChild(accDetailsUserLink);
                    
                        var accDetailsUserBtn = document.createElement("button");
                            accDetailsUserBtn.setAttribute("id", "acc-details-user-btn");
                            accDetailsUserBtn.textContent = "here";
                            
                    accDetailsUserContainer.appendChild(accDetailsUserBtn);
                    
                var loggedInTxt = document.createElement("div");
                    loggedInTxt.setAttribute("id", "logged-in-txt");
                    
            contentAnchor.appendChild(loggedInTxt);
            
                    var loggedInTxtInnerDiv = document.createElement("div");
                        loggedInTxtInnerDiv.setAttribute("id", "logged-in-txt-inner-div");
                        
                loggedInTxt.appendChild(loggedInTxtInnerDiv);
                
                        var loginTxtHeader = document.createElement("header");
                            loginTxtHeader.setAttribute("id", "login-txt-header");
                            loginTxtHeader.textContent = "How to use:";
                            
                    loggedInTxtInnerDiv.appendChild(loginTxtHeader);
                    
                        var loginTxtInstructions = document.createElement("p");
                            loginTxtInstructions.setAttribute("id", "login-txt-instructions");
                            loginTxtInstructions.textContent = "To access morrowind calculator click 'Select Character'. Upon selecting this you may choose any one of the eight character slots available. If a slot already contains a characters save you will load that character. If a slot is empty then you will create a new character to fill this slot. Clicking 'Delete Character' will allow you to choose a character to delete. Please be aware that once a character has been deleted it can not be retrieved.";
                            
                    loggedInTxtInnerDiv.appendChild(loginTxtInstructions);
                    
                var parentGrid = document.createElement("div");
                    parentGrid.setAttribute("class", "parent-grid");
                    
            contentAnchor.appendChild(parentGrid);
            
                    var userCharacterSelect = document.createElement("div");
                        userCharacterSelect.setAttribute("id", "user-character-select");
                        
                parentGrid.appendChild(userCharacterSelect);
                
                        var userSelectSelect = document.createElement("div");
                            userSelectSelect.setAttribute("id", "user-select-select");
                            
                    userCharacterSelect.appendChild(userSelectSelect); 
                        
                            var userSelectTxt = document.createElement("div");
                                userSelectTxt.setAttribute("id", "user-select-txt");
                                userSelectTxt.setAttribute("class", "user-select-grid");
                                
                        userSelectSelect.appendChild(userSelectTxt);
                        
                                var createCenterContainer = document.createElement("div");
                                    createCenterContainer.setAttribute("class", "create-center-container");
                                    
                            userSelectTxt.appendChild(createCenterContainer);
                            
                                    var userSelectTxtActual = document.createElement("p");
                                        userSelectTxtActual.setAttribute("id", "user-select-txt-actual");
                                        userSelectTxtActual.setAttribute("class", "user-txt-positioning");
                                        userSelectTxtActual.textContent = "SELECT CHARACTER";
                                        
                                createCenterContainer.appendChild(userSelectTxtActual);
            
                            var userDeleteSelect = document.createElement("div");
                                userDeleteSelect.setAttribute("id", "user-delete-select");
                                
                    userCharacterSelect.appendChild(userDeleteSelect);
                    
                                var userDeleteTxt = document.createElement("div");
                                    userDeleteTxt.setAttribute("id", "user-delete-txt");
                                    userDeleteTxt.setAttribute("class", "user-select-grid");
                                    
                            userDeleteSelect.appendChild(userDeleteTxt);
                            
                                    var createCenterContainerDel = document.createElement("div");
                                        createCenterContainerDel.setAttribute("class", "create-center-container");
                                        
                                userDeleteTxt.appendChild(createCenterContainerDel);
                                
                                        var userDeleteTxtActual = document.createElement("p");
                                            userDeleteTxtActual.setAttribute("id", "user-delete-txt-actual");
                                            userDeleteTxtActual.setAttribute("class", "user-txt-positioning");
                                            userDeleteTxtActual.textContent = "DELETE CHARACTER";
                                            
                                    createCenterContainerDel.appendChild(userDeleteTxtActual);
                                
                            var userCharacterNameSelect = document.createElement("div");
                                userCharacterNameSelect.setAttribute("id", "user-character-name-select");
                                
                    userCharacterSelect.appendChild(userCharacterNameSelect);
                        
                                var char1Div = document.createElement("div");
                                    char1Div.setAttribute("id", "char1");
                                    char1Div.setAttribute("class", "char-n-grid");
                                    
                            userCharacterNameSelect.appendChild(char1Div);
                            
                                    var innerCharGrid1 = document.createElement("div");
                                        innerCharGrid1.setAttribute("class", "inner-char-grid");
                                        
                                char1Div.appendChild(innerCharGrid1);
                                    
                                        var charSelectNumberLeft1 = document.createElement("div");
                                            charSelectNumberLeft1.setAttribute("class", "char-select-number-left");
                                        
                                    innerCharGrid1.appendChild(charSelectNumberLeft1);
                                    
                                            var userNumberImg1 = document.createElement("img");
                                                userNumberImg1.setAttribute("id", "user-number-img1");
                                                userNumberImg1.setAttribute("class", "user-number-img");
                                                userNumberImg1.setAttribute("src", "");                                                          //img src will go here
                                                
                                        charSelectNumberLeft1.appendChild(userNumberImg1);
                                        
                                        var charSelectNameLeft1 = document.createElement("div");
                                            charSelectNameLeft1.setAttribute("class", "char-select-name-left");
                                            
                                    innerCharGrid1.appendChild(charSelectNameLeft1);
                                    
                                            var char1Txt = document.createElement("p");
                                                char1Txt.setAttribute("id", "char1-txt");
                                                char1Txt.textContent = char1;
                                                
                                        charSelectNameLeft1.appendChild(char1Txt);
                                        
                                var char2Div = document.createElement("div");
                                    char2Div.setAttribute("id", "char2");
                                    char2Div.setAttribute("class", "char-n-grid");
                                    
                            userCharacterNameSelect.appendChild(char2Div);
                            
                                    var innerCharGrid2 = document.createElement("div");
                                        innerCharGrid2.setAttribute("class", "inner-char-grid");                    
                            
                                char2Div.appendChild(innerCharGrid2);
                                
                                        var charSelectNumberRight1 = document.createElement("div");
                                            charSelectNumberRight1.setAttribute("class", "char-select-number-right");
                                            
                                    innerCharGrid2.appendChild(charSelectNumberRight1);
                                    
                                            var userNumberImg2 = document.createElement("img");
                                                userNumberImg2.setAttribute("id", "user-number-img2");
                                                userNumberImg2.setAttribute("class", "user-number-img");
                                                userNumberImg2.setAttribute("src", "");                                                          //img src will go here 
                                    
                                        charSelectNumberRight1.appendChild(userNumberImg2);
                                        
                                            var charSelectNameRight2 = document.createElement("div");
                                                charSelectNameRight2.setAttribute("class", "char-select-name-right");
                                            
                                    innerCharGrid2.appendChild(charSelectNameRight2);
                                    
                                                var char2Txt = document.createElement("p");
                                                    char2Txt.setAttribute("id", "char2-txt");
                                                    char2Txt.textContent = char2;
                                                    
                                            charSelectNameRight2.appendChild(char2Txt);
                                    
                                var char3Div = document.createElement("div");
                                    char3Div.setAttribute("id", "char3");
                                    char3Div.setAttribute("class", "char-n-grid");
                                    
                            userCharacterNameSelect.appendChild(char3Div);
                            
                                    var innerCharGrid3 = document.createElement("div");
                                        innerCharGrid3.setAttribute("class", "inner-char-grid");
                                        
                                char3Div.appendChild(innerCharGrid3);
                                    
                                        var charSelectNumberLeft3 = document.createElement("div");
                                            charSelectNumberLeft3.setAttribute("class", "char-select-number-left");
                                        
                                    innerCharGrid3.appendChild(charSelectNumberLeft3);
                                    
                                            var userNumberImg3 = document.createElement("img");
                                                userNumberImg3.setAttribute("id", "user-number-img3");
                                                userNumberImg3.setAttribute("class", "user-number-img");
                                                userNumberImg3.setAttribute("src", "");                                                          //img src will go here
                                                
                                        charSelectNumberLeft3.appendChild(userNumberImg3);
                                        
                                        var charSelectNameLeft3 = document.createElement("div");
                                            charSelectNameLeft3.setAttribute("class", "char-select-name-left");
                                            
                                    innerCharGrid3.appendChild(charSelectNameLeft3);
                                    
                                            var char3Txt = document.createElement("p");
                                                char3Txt.setAttribute("id", "char3-txt");
                                                char3Txt.textContent = char3;
                                                
                                        charSelectNameLeft3.appendChild(char3Txt);      
                                        
                                var char4Div = document.createElement("div");
                                    char4Div.setAttribute("id", "char4");
                                    char4Div.setAttribute("class", "char-n-grid");
                                    
                            userCharacterNameSelect.appendChild(char4Div);
                            
                                    var innerCharGrid4 = document.createElement("div");
                                        innerCharGrid4.setAttribute("class", "inner-char-grid");                    
                            
                                char4Div.appendChild(innerCharGrid4);
                                
                                        var charSelectNumberRight4 = document.createElement("div");
                                            charSelectNumberRight4.setAttribute("class", "char-select-number-right");
                                            
                                    innerCharGrid4.appendChild(charSelectNumberRight4);
                                    
                                            var userNumberImg4 = document.createElement("img");
                                                userNumberImg4.setAttribute("id", "user-number-img4");
                                                userNumberImg4.setAttribute("class", "user-number-img");
                                                userNumberImg4.setAttribute("src", "");                                                          //img src will go here 
                                    
                                        charSelectNumberRight4.appendChild(userNumberImg4);
                                        
                                            var charSelectNameRight4 = document.createElement("div");
                                                charSelectNameRight4.setAttribute("class", "char-select-name-right");
                                            
                                    innerCharGrid4.appendChild(charSelectNameRight4);
                                    
                                                var char4Txt = document.createElement("p");
                                                    char4Txt.setAttribute("id", "char4-txt");
                                                    char4Txt.textContent = char4;
                                                    
                                            charSelectNameRight4.appendChild(char4Txt);                                
            
                                var char5Div = document.createElement("div");
                                    char5Div.setAttribute("id", "char5");
                                    char5Div.setAttribute("class", "char-n-grid");
                                    
                            userCharacterNameSelect.appendChild(char5Div);
                            
                                    var innerCharGrid5 = document.createElement("div");
                                        innerCharGrid5.setAttribute("class", "inner-char-grid");
                                        
                                char5Div.appendChild(innerCharGrid5);
                                    
                                        var charSelectNumberLeft5 = document.createElement("div");
                                            charSelectNumberLeft5.setAttribute("class", "char-select-number-left");
                                        
                                    innerCharGrid5.appendChild(charSelectNumberLeft5);
                                    
                                            var userNumberImg5 = document.createElement("img");
                                                userNumberImg5.setAttribute("id", "user-number-img5");
                                                userNumberImg5.setAttribute("class", "user-number-img");
                                                userNumberImg5.setAttribute("src", "");                                                          //img src will go here
                                                
                                        charSelectNumberLeft5.appendChild(userNumberImg5);
                                        
                                        var charSelectNameLeft5 = document.createElement("div");
                                            charSelectNameLeft5.setAttribute("class", "char-select-name-left");
                                            
                                    innerCharGrid5.appendChild(charSelectNameLeft5);
                                    
                                            var char5Txt = document.createElement("p");
                                                char5Txt.setAttribute("id", "char5-txt");
                                                char5Txt.textContent = char5;
                                                
                                        charSelectNameLeft5.appendChild(char5Txt);    
        
                                var char6Div = document.createElement("div");
                                    char6Div.setAttribute("id", "char6");
                                    char6Div.setAttribute("class", "char-n-grid");
                                    
                            userCharacterNameSelect.appendChild(char6Div);
                            
                                    var innerCharGrid6 = document.createElement("div");
                                        innerCharGrid6.setAttribute("class", "inner-char-grid");                    
                            
                                char6Div.appendChild(innerCharGrid6);
                                
                                        var charSelectNumberRight6 = document.createElement("div");
                                            charSelectNumberRight6.setAttribute("class", "char-select-number-right");
                                            
                                    innerCharGrid6.appendChild(charSelectNumberRight6);
                                    
                                            var userNumberImg6 = document.createElement("img");
                                                userNumberImg6.setAttribute("id", "user-number-img6");
                                                userNumberImg6.setAttribute("class", "user-number-img");
                                                userNumberImg6.setAttribute("src", "");                                                           //img src will go here
                                    
                                        charSelectNumberRight6.appendChild(userNumberImg6);
                                        
                                            var charSelectNameRight6 = document.createElement("div");
                                                charSelectNameRight6.setAttribute("class", "char-select-name-right");
                                            
                                    innerCharGrid6.appendChild(charSelectNameRight6);
                                    
                                                var char6Txt = document.createElement("p");
                                                    char6Txt.setAttribute("id", "char6-txt");
                                                    char6Txt.textContent = char6;
                                                    
                                            charSelectNameRight6.appendChild(char6Txt);    
            
                                var char7Div = document.createElement("div");
                                    char7Div.setAttribute("id", "char7");
                                    char7Div.setAttribute("class", "char-n-grid");
                                    
                            userCharacterNameSelect.appendChild(char7Div);
                            
                                    var innerCharGrid7 = document.createElement("div");
                                        innerCharGrid7.setAttribute("class", "inner-char-grid");
                                        
                                char7Div.appendChild(innerCharGrid7);
                                    
                                        var charSelectNumberLeft7 = document.createElement("div");
                                            charSelectNumberLeft7.setAttribute("class", "char-select-number-left");
                                        
                                    innerCharGrid7.appendChild(charSelectNumberLeft7);
                                    
                                            var userNumberImg7 = document.createElement("img");
                                                userNumberImg7.setAttribute("id", "user-number-img7");
                                                userNumberImg7.setAttribute("class", "user-number-img");
                                                userNumberImg7.setAttribute("src", "");                                                          //img src will go here
                                                
                                        charSelectNumberLeft7.appendChild(userNumberImg7);
                                        
                                        var charSelectNameLeft7 = document.createElement("div");
                                            charSelectNameLeft7.setAttribute("class", "char-select-name-left");
                                            
                                    innerCharGrid7.appendChild(charSelectNameLeft7);
                                    
                                            var char7Txt = document.createElement("p");
                                                char7Txt.setAttribute("id", "char7-txt");
                                                char7Txt.textContent = char7;
                                                
                                        charSelectNameLeft7.appendChild(char7Txt);   
                                        
                                var char8Div = document.createElement("div");
                                    char8Div.setAttribute("id", "char8");
                                    char8Div.setAttribute("class", "char-n-grid");
                                    
                            userCharacterNameSelect.appendChild(char8Div);
                            
                                    var innerCharGrid8 = document.createElement("div");
                                        innerCharGrid8.setAttribute("class", "inner-char-grid");                    
                            
                                char8Div.appendChild(innerCharGrid8);
                                
                                        var charSelectNumberRight8 = document.createElement("div");
                                            charSelectNumberRight8.setAttribute("class", "char-select-number-right");
                                            
                                    innerCharGrid8.appendChild(charSelectNumberRight8);
                                    
                                            var userNumberImg8 = document.createElement("img");
                                                userNumberImg8.setAttribute("id", "user-number-img8");
                                                userNumberImg8.setAttribute("class", "user-number-img");
                                                userNumberImg8.setAttribute("src", "");                                                          //img src will go here 
                                    
                                        charSelectNumberRight8.appendChild(userNumberImg8);
                                        
                                            var charSelectNameRight8 = document.createElement("div");
                                                charSelectNameRight8.setAttribute("class", "char-select-name-right");
                                            
                                    innerCharGrid8.appendChild(charSelectNameRight8);
                                    
                                                var char8Txt = document.createElement("p");
                                                    char8Txt.setAttribute("id", "char8-txt");
                                                    char8Txt.textContent = char8;
                                                    
                                            charSelectNameRight8.appendChild(char8Txt);    
                                            
                                            
        //---------------------event lsiteners---------------------------------
        
        
                const selectSelector = document.querySelector("#user-select-txt");
                const deleteSelector = document.querySelector("#user-delete-txt");
        
                selectSelector.value = "OFF";
                deleteSelector.value = "OFF";
        
                selectSelector.addEventListener("click", activateSELECT);
                deleteSelector.addEventListener("click", activateDELETE);
        
        
                accDetailsUserBtn.addEventListener("click", AccountDetails);              
                                            
                                            
            
            
        }    
            
        function GuestCalcPage(){
            
                 ClearPage();
            
            
            const contentAnchor = document.querySelector("#content-anchor");
            
                var calculatorParent = document.createElement("div");
                    calculatorParent.setAttribute("id", "calculator-parent");
                    
            contentAnchor.appendChild(calculatorParent);
            
                    var calculatorInstructionsParent = document.createElement("div");
                        calculatorInstructionsParent.setAttribute("id", "calculator-instructions-parent");
                        
                calculatorParent.appendChild(calculatorInstructionsParent);
                
                        var calcIntroTxt = document.createElement("p");
                            calcIntroTxt.setAttribute("id", "calc-intro-txt");
                            calcIntroTxt.setAttribute("class", "instructions-calc-txt");
                            calcIntroTxt.textContent = "How to use:";
                            
                    calculatorInstructionsParent.appendChild(calcIntroTxt);
                    
                        var calcInstructions1 = document.createElement("p");
                            calcInstructions1.setAttribute("id", "calc-instructions-1");
                            calcInstructions1.setAttribute("class", "instructions-calc-txt");
                            calcInstructions1.textContent = "To use the Morrowind Calculator begin by setting a name, race, class and birthsign from the selection below. This will initialise the base values for your character. From there you can change any value within the calculator as desired.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions1);    
                    
                        var calcInstructions2 = document.createElement("p");
                            calcInstructions2.setAttribute("id", "calc-instructions-2");
                            calcInstructions2.setAttribute("class", "instructions-calc-txt");
                            calcInstructions2.textContent = "When using the 'chance to cast' system simply follow the instructions provided. Chance to cast is calculated through the skill level the character has in the selected school of magic the spell is associated with. Chance to cast is calculated based on the characters willpower, luck, skill in the relevant school of magic and cost of the spell itself.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions2); 
                    
                        var calcInstructions3 = document.createElement("p");
                            calcInstructions3.setAttribute("id", "calc-instructions-3");
                            calcInstructions3.setAttribute("class", "instructions-calc-txt");
                            calcInstructions3.textContent = "The melee attack values are determined through a selection of the three dropdown menus, 'weapons', 'armour' and 'condition'. The higher the condition of a weapon the stronger the weapon attack. Damage with a weapon as well as the protection value of a piece of armour is determined by the items base values as well as the characters proficiency with the skill governing that item. So, a higher long blade skill would lead to a stronger longsword attack damage. To calculate a character’s damage with a weapon the enemies armour values are taken into account which is reflected within this calculator through the characters own armour value. This means that if the user wishes to test their attack damage against a character with specific armour values, they must alter the armour skill values of their own character to achieve it.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions3); 
                    
                        var calcInstructions4 = document.createElement("p");
                            calcInstructions4.setAttribute("id", "calc-instructions-4");
                            calcInstructions4.setAttribute("class", "instructions-calc-txt");
                            calcInstructions4.textContent = "Character health is calculated based upon the characters current level. From level one to two the base health is established from the characters endurance and strength values. Following this the health will increase by 10% of the characters endurance attribute per level.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions4);      
            
                        var calcInstructions5 = document.createElement("p");
                            calcInstructions5.setAttribute("id", "calc-instructions-5");
                            calcInstructions5.setAttribute("class", "instructions-calc-txt");
                            calcInstructions5.textContent = "A character’s level is increased through increasing the skill points of one of the five major or five minor skills. A characters major and minor skills are determined via their class selection. Whenever the character has increased their skill points by ten throughout any of these selected skills a level will be gained. Levelling of any other skills will not count towards the characters level.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions5);
                    
                    var initialCharacterInformation = document.createElement("div");
                        initialCharacterInformation.setAttribute("id", "initial-character-information");
                        
                calculatorParent.appendChild(initialCharacterInformation);
                
                        var characterNameParent = document.createElement("div");
                            characterNameParent.setAttribute("id", "character-name-parent");
                            
                        initialCharacterInformation.appendChild(characterNameParent);
                        
                            var characterNameDisplay = document.createElement("div");
                                characterNameDisplay.setAttribute("id", "character-name-display");
                    
                            characterNameParent.appendChild(characterNameDisplay);
                            
                                var cName = document.createElement("p");
                                    cName.setAttribute("id", "cName");
                                    cName.textContent = "Character Name:";
                                    
                                characterNameDisplay.appendChild(cName);
                                
                            var characterNameInputDiv = document.createElement("div");
                                characterNameInputDiv.setAttribute("id", "character-name-input");
                                
                            characterNameParent.appendChild(characterNameInputDiv);
                            
                                var characterNameInput = document.createElement("input");
                                    characterNameInput.setAttribute("type", "text");
                                    characterNameInput.setAttribute("id", "characterNameInput");
                                    
                                characterNameInputDiv.appendChild(characterNameInput); 
                                    
                            var genderSelect = document.createElement("div");
                                genderSelect.setAttribute("id", "gender-select");
                                
                        initialCharacterInformation.appendChild(genderSelect);
                            
                                var genderInstruction = document.createElement("div");
                                    genderInstruction.setAttribute("id", "gender-instruction");
                                    
                            genderSelect.appendChild(genderInstruction);
                            
                                    var genderTxt = document.createElement("p");
                                        genderTxt.setAttribute("id", "gender-txt");
                                        genderTxt.textContent = "Select Gender:";
                                        
                                genderInstruction.appendChild(genderTxt); 
                                
                            var genderParent = document.createElement("div");
                                genderParent.setAttribute("id", "gender-parent");
                                
                        initialCharacterInformation.appendChild(genderParent);
                                
                                var genderMale = document.createElement("div");
                                    genderMale.setAttribute("id", "gender-male");
                                    
                                genderParent.appendChild(genderMale);
                                
                                    var selectMaleInput = document.createElement("input");
                                        selectMaleInput.setAttribute("id", "select-male");
                                        selectMaleInput.setAttribute("type", "submit");
                                        selectMaleInput.setAttribute("value", "male");
                                        selectMaleInput.setAttribute("class", "selection-btn");
                                        
                                    genderMale.appendChild(selectMaleInput);
                                    
                                var genderFemale = document.createElement("div");
                                    genderFemale.setAttribute("id", "gender-female");
                                    
                                genderParent.appendChild(genderFemale);
                                
                                    var selectFemaleInput = document.createElement("input");
                                        selectFemaleInput.setAttribute("id", "select-female");
                                        selectFemaleInput.setAttribute("type", "submit");
                                        selectFemaleInput.setAttribute("value", "female");
                                        selectFemaleInput.setAttribute("class", "selection-btn");
                                        
                                    genderFemale.appendChild(selectFemaleInput);
                                    
                            var raceSelect = document.createElement("div");
                                raceSelect.setAttribute("id", "race-select");
                                
                        initialCharacterInformation.appendChild(raceSelect);
                        
                                var raceInstruction = document.createElement("div");
                                    raceInstruction.setAttribute("id", "race-instruction");
                                    
                                raceSelect.appendChild(raceInstruction);
                                
                                    var raceTxt = document.createElement("p");
                                        raceTxt.setAttribute("id", "race-txt");
                                        raceTxt.textContent = "Select Race:";
                                        
                                    raceInstruction.appendChild(raceTxt);
                                    
                                var raceRow1 = document.createElement("div");
                                    raceRow1.setAttribute("id", "race-row-1");
                                    
                                raceSelect.appendChild(raceRow1);
                            
                                    var raceSelectArgonian = document.createElement("div");
                                        raceSelectArgonian.setAttribute("id", "race-select-argonian");
                                        
                                    raceRow1.appendChild(raceSelectArgonian);
                                    
                                        var argonianInput = document.createElement("input");
                                            argonianInput.setAttribute("type", "submit");
                                            argonianInput.setAttribute("id", "argonian");
                                            argonianInput.setAttribute("value", "argonian");
                                            argonianInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectArgonian.appendChild(argonianInput);
                                        
                                    var raceSelectBreton = document.createElement("div");
                                        raceSelectBreton.setAttribute("id", "race-select-breton");
                                        raceSelectBreton.setAttribute("class", "button-gap");
                                        
                                    raceRow1.appendChild(raceSelectBreton);
                                    
                                        var bretonInput = document.createElement("input");
                                            bretonInput.setAttribute("type", "submit");
                                            bretonInput.setAttribute("id", "breton");
                                            bretonInput.setAttribute("value", "breton");
                                            bretonInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectBreton.appendChild(bretonInput);
                                        
                                    var raceSelectDarkElf = document.createElement("div");
                                        raceSelectDarkElf.setAttribute("id", "race-select-dark-elf");
                                        raceSelectDarkElf.setAttribute("class", "button-gap");
                                        
                                    raceRow1.appendChild(raceSelectDarkElf);
                                    
                                        var darkElfInput = document.createElement("input");
                                            darkElfInput.setAttribute("type", "submit");
                                            darkElfInput.setAttribute("id", "dark-elf");
                                            darkElfInput.setAttribute("value", "dark-elf");
                                            darkElfInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectDarkElf.appendChild(darkElfInput);
                                        
                                var raceRow2 = document.createElement("div");
                                    raceRow2.setAttribute("id", "race-row-2");
                                    
                                raceSelect.appendChild(raceRow2);
                            
                                    var raceSelectHighElf = document.createElement("div");
                                        raceSelectHighElf.setAttribute("id", "race-select-high-elf");
                                        
                                    raceRow2.appendChild(raceSelectHighElf);
                                    
                                        var highElfInput = document.createElement("input");
                                            highElfInput.setAttribute("type", "submit");
                                            highElfInput.setAttribute("id", "high-elf");
                                            highElfInput.setAttribute("value", "high-elf");
                                            highElfInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectHighElf.appendChild(highElfInput);
                                        
                                    var raceSelectImperial = document.createElement("div");
                                        raceSelectImperial.setAttribute("id", "race-select-imperial");
                                        raceSelectImperial.setAttribute("class", "button-gap");
                                        
                                    raceRow2.appendChild(raceSelectImperial);
                                    
                                        var imperialInput = document.createElement("input");
                                            imperialInput.setAttribute("type", "submit");
                                            imperialInput.setAttribute("id", "imperial");
                                            imperialInput.setAttribute("value", "imperial");
                                            imperialInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectImperial.appendChild(imperialInput);
                                        
                                    var raceSelectKhajiit = document.createElement("div");
                                        raceSelectKhajiit.setAttribute("id", "race-select-khajiit");
                                        raceSelectKhajiit.setAttribute("class", "button-gap");
                                        
                                    raceRow2.appendChild(raceSelectKhajiit);
                                    
                                        var khajiitInput = document.createElement("input");
                                            khajiitInput.setAttribute("type", "submit");
                                            khajiitInput.setAttribute("id", "khajiit");
                                            khajiitInput.setAttribute("value", "khajiit");
                                            khajiitInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectKhajiit.appendChild(khajiitInput);
                                
                                var raceRow3 = document.createElement("div");
                                    raceRow3.setAttribute("id", "race-row-3");
                                    
                                raceSelect.appendChild(raceRow3);
                            
                                    var raceSelectNord = document.createElement("div");
                                        raceSelectNord.setAttribute("id", "race-select-nord");
                                        
                                    raceRow3.appendChild(raceSelectNord);
                                    
                                        var nordInput = document.createElement("input");
                                            nordInput.setAttribute("type", "submit");
                                            nordInput.setAttribute("id", "nord");
                                            nordInput.setAttribute("value", "nord");
                                            nordInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectNord.appendChild(nordInput);
                                        
                                    var raceSelectOrc = document.createElement("div");
                                        raceSelectOrc.setAttribute("id", "race-select-orc");
                                        raceSelectOrc.setAttribute("class", "button-gap");
                                        
                                    raceRow3.appendChild(raceSelectOrc);
                                    
                                        var orcInput = document.createElement("input");
                                            orcInput.setAttribute("type", "submit");
                                            orcInput.setAttribute("id", "orc");
                                            orcInput.setAttribute("value", "orc");
                                            orcInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectOrc.appendChild(orcInput);
                                        
                                    var raceSelectRedguard = document.createElement("div");
                                        raceSelectRedguard.setAttribute("id", "race-select-redguard");
                                        raceSelectRedguard.setAttribute("class", "button-gap");
                                        
                                    raceRow3.appendChild(raceSelectRedguard);
                                    
                                        var redguardInput = document.createElement("input");
                                            redguardInput.setAttribute("type", "submit");
                                            redguardInput.setAttribute("id", "redguard");
                                            redguardInput.setAttribute("value", "redguard");
                                            redguardInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectRedguard.appendChild(redguardInput);    
                                        
                                    var raceSelectWoodElf = document.createElement("div");
                                        raceSelectWoodElf.setAttribute("id", "race-select-wood-elf");
                                        raceSelectWoodElf.setAttribute("class", "button-gap");
                                        
                                    raceRow3.appendChild(raceSelectWoodElf);
                                    
                                        var woodElfInput = document.createElement("input");
                                            woodElfInput.setAttribute("type", "submit");
                                            woodElfInput.setAttribute("id", "wood-elf");
                                            woodElfInput.setAttribute("value", "wood-elf");
                                            woodElfInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectWoodElf.appendChild(woodElfInput); 
                                        
                    var secondaryCharacterInformation = document.createElement("div");
                        secondaryCharacterInformation.setAttribute("id", "secondary-character-information");
                    
                calculatorParent.appendChild(secondaryCharacterInformation);
                        
                        var classSelectDiv = document.createElement("div");    
                            classSelectDiv.setAttribute("id", "class-select");
                            
                        secondaryCharacterInformation.appendChild(classSelectDiv);
                        
                            var classInstruction = document.createElement("div");
                                classInstruction.setAttribute("id", "class-instruction");
                                
                            classSelectDiv.appendChild(classInstruction);
                            
                                var classTxt = document.createElement("p");
                                    classTxt.setAttribute("id", "class-txt");
                                    classTxt.textContent = "Select Class:";
                                    
                                classInstruction.appendChild(classTxt);
                                
                            var classRow1 = document.createElement("div");
                                classRow1.setAttribute("id", "class-row-1");
                                
                            classSelectDiv.appendChild(classRow1);
                            
                                var acrobaticClassSelect = document.createElement("div");
                                    acrobaticClassSelect.setAttribute("id", "acrobatic-class-select");
                                    
                                classRow1.appendChild(acrobaticClassSelect);
                                
                                    var acrobatClassInput = document.createElement("input");
                                        acrobatClassInput.setAttribute("type", "submit");
                                        acrobatClassInput.setAttribute("id", "acrobat-class");
                                        acrobatClassInput.setAttribute("value", "acrobat");
                                        acrobatClassInput.setAttribute("class", "selection-btn");
                                        
                                    acrobaticClassSelect.appendChild(acrobatClassInput);
                                
                                var agentClassSelect = document.createElement("div");
                                    agentClassSelect.setAttribute("id", "agent-class-select");
                                    agentClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow1.appendChild(agentClassSelect);
                                
                                    var agentClassInput = document.createElement("input");
                                        agentClassInput.setAttribute("type", "submit");
                                        agentClassInput.setAttribute("id", "agent-class");
                                        agentClassInput.setAttribute("value", "agent");
                                        agentClassInput.setAttribute("class", "selection-btn");
                                        
                                    agentClassSelect.appendChild(agentClassInput);  
                                    
                                var archerClassSelect = document.createElement("div");
                                    archerClassSelect.setAttribute("id", "archer-class-select");
                                    archerClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow1.appendChild(archerClassSelect);
                                
                                    var archerClassInput = document.createElement("input");
                                        archerClassInput.setAttribute("type", "submit");
                                        archerClassInput.setAttribute("id", "archer-class");
                                        archerClassInput.setAttribute("value", "archer");
                                        archerClassInput.setAttribute("class", "selection-btn");
                                        
                                    archerClassSelect.appendChild(archerClassInput);   
                                    
                                var assasinClassSelect = document.createElement("div");
                                    assasinClassSelect.setAttribute("id", "assasin-class-select");
                                    assasinClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow1.appendChild(assasinClassSelect);
                                
                                    var assasinClassInput = document.createElement("input");
                                        assasinClassInput.setAttribute("type", "submit");
                                        assasinClassInput.setAttribute("id", "assasin-class");
                                        assasinClassInput.setAttribute("value", "assasin");
                                        assasinClassInput.setAttribute("class", "selection-btn");
                                        
                                    assasinClassSelect.appendChild(assasinClassInput);   
                            
                            var classRow2 = document.createElement("div");
                                classRow2.setAttribute("id", "class-row-2");
                                
                            classSelectDiv.appendChild(classRow2);
                            
                                var barbarianClassSelect = document.createElement("div");
                                    barbarianClassSelect.setAttribute("id", "barbarian-class-select");
                                    
                                classRow2.appendChild(barbarianClassSelect);
                                
                                    var barbarianClassInput = document.createElement("input");
                                        barbarianClassInput.setAttribute("type", "submit");
                                        barbarianClassInput.setAttribute("id", "barbarian-class");
                                        barbarianClassInput.setAttribute("value", "barbarian");
                                        barbarianClassInput.setAttribute("class", "selection-btn");
                                        
                                    barbarianClassSelect.appendChild(barbarianClassInput);
                                
                                var bardClassSelect = document.createElement("div");
                                    bardClassSelect.setAttribute("id", "bard-class-select");
                                    bardClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow2.appendChild(bardClassSelect);
                                
                                    var bardClassInput = document.createElement("input");
                                        bardClassInput.setAttribute("type", "submit");
                                        bardClassInput.setAttribute("id", "bard-class");
                                        bardClassInput.setAttribute("value", "bard");
                                        bardClassInput.setAttribute("class", "selection-btn");
                                        
                                    bardClassSelect.appendChild(bardClassInput);  
                                    
                                var battlemageClassSelect = document.createElement("div");
                                    battlemageClassSelect.setAttribute("id", "battlemage-class-select");
                                    battlemageClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow2.appendChild(battlemageClassSelect);
                                
                                    var battlemageClassInput = document.createElement("input");
                                        battlemageClassInput.setAttribute("type", "submit");
                                        battlemageClassInput.setAttribute("id", "battlemage-class");
                                        battlemageClassInput.setAttribute("value", "battlemage");
                                        battlemageClassInput.setAttribute("class", "selection-btn");
                                        
                                    battlemageClassSelect.appendChild(battlemageClassInput);   
                                    
                                var crusaderClassSelect = document.createElement("div");
                                    crusaderClassSelect.setAttribute("id", "crusader-class-select");
                                    crusaderClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow2.appendChild(crusaderClassSelect);
                                
                                    var crusaderClassInput = document.createElement("input");
                                        crusaderClassInput.setAttribute("type", "submit");
                                        crusaderClassInput.setAttribute("id", "crusader-class");
                                        crusaderClassInput.setAttribute("value", "crusader");
                                        crusaderClassInput.setAttribute("class", "selection-btn");
                                        
                                    crusaderClassSelect.appendChild(crusaderClassInput);   
                    
                            var classRow3 = document.createElement("div");
                                classRow3.setAttribute("id", "class-row-3");
                                
                            classSelectDiv.appendChild(classRow3);
                            
                                var healerClassSelect = document.createElement("div");
                                    healerClassSelect.setAttribute("id", "healer-class-select");
                                    
                                classRow3.appendChild(healerClassSelect);
                                
                                    var healerClassInput = document.createElement("input");
                                        healerClassInput.setAttribute("type", "submit");
                                        healerClassInput.setAttribute("id", "healer-class");
                                        healerClassInput.setAttribute("value", "healer");
                                        healerClassInput.setAttribute("class", "selection-btn");
                                        
                                    healerClassSelect.appendChild(healerClassInput);
                                
                                var knightClassSelect = document.createElement("div");
                                    knightClassSelect.setAttribute("id", "knight-class-select");
                                    knightClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow3.appendChild(knightClassSelect);
                                
                                    var knightClassInput = document.createElement("input");
                                        knightClassInput.setAttribute("type", "submit");
                                        knightClassInput.setAttribute("id", "knight-class");
                                        knightClassInput.setAttribute("value", "knight");
                                        knightClassInput.setAttribute("class", "selection-btn");
                                        
                                    knightClassSelect.appendChild(knightClassInput);  
                                    
                                var mageClassSelect = document.createElement("div");
                                    mageClassSelect.setAttribute("id", "mage-class-select");
                                    mageClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow3.appendChild(mageClassSelect);
                                
                                    var mageClassInput = document.createElement("input");
                                        mageClassInput.setAttribute("type", "submit");
                                        mageClassInput.setAttribute("id", "mage-class");
                                        mageClassInput.setAttribute("value", "mage");
                                        mageClassInput.setAttribute("class", "selection-btn");
                                        
                                    mageClassSelect.appendChild(mageClassInput);   
                                    
                                var monkClassSelect = document.createElement("div");
                                    monkClassSelect.setAttribute("id", "monk-class-select");
                                    monkClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow3.appendChild(monkClassSelect);
                                
                                    var monkClassInput = document.createElement("input");
                                        monkClassInput.setAttribute("type", "submit");
                                        monkClassInput.setAttribute("id", "monk-class");
                                        monkClassInput.setAttribute("value", "monk");
                                        monkClassInput.setAttribute("class", "selection-btn");
                                        
                                    monkClassSelect.appendChild(monkClassInput);
                                    
                            var classRow4 = document.createElement("div");
                                classRow4.setAttribute("id", "class-row-4");
                                
                            classSelectDiv.appendChild(classRow4);
                            
                                var nightbladeClassSelect = document.createElement("div");
                                    nightbladeClassSelect.setAttribute("id", "nightblade-class-select");
                                    
                                classRow4.appendChild(nightbladeClassSelect);
                                
                                    var nightbladeClassInput = document.createElement("input");
                                        nightbladeClassInput.setAttribute("type", "submit");
                                        nightbladeClassInput.setAttribute("id", "nightblade-class");
                                        nightbladeClassInput.setAttribute("value", "nightblade");
                                        nightbladeClassInput.setAttribute("class", "selection-btn");
                                        
                                    nightbladeClassSelect.appendChild(nightbladeClassInput);
                                
                                var pilgrimClassSelect = document.createElement("div");
                                    pilgrimClassSelect.setAttribute("id", "pilgrim-class-select");
                                    pilgrimClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow4.appendChild(pilgrimClassSelect);
                                
                                    var pilgrimClassInput = document.createElement("input");
                                        pilgrimClassInput.setAttribute("type", "submit");
                                        pilgrimClassInput.setAttribute("id", "pilgrim-class");
                                        pilgrimClassInput.setAttribute("value", "pilgrim");
                                        pilgrimClassInput.setAttribute("class", "selection-btn");
                                        
                                    pilgrimClassSelect.appendChild(pilgrimClassInput);  
                                    
                                var rogueClassSelect = document.createElement("div");
                                    rogueClassSelect.setAttribute("id", "rogue-class-select");
                                    rogueClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow4.appendChild(rogueClassSelect);
                                
                                    var rogueClassInput = document.createElement("input");
                                        rogueClassInput.setAttribute("type", "submit");
                                        rogueClassInput.setAttribute("id", "rogue-class");
                                        rogueClassInput.setAttribute("value", "rogue");
                                        rogueClassInput.setAttribute("class", "selection-btn");
                                        
                                    rogueClassSelect.appendChild(rogueClassInput);   
                                    
                                var scoutClassSelect = document.createElement("div");
                                    scoutClassSelect.setAttribute("id", "scout-class-select");
                                    scoutClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow4.appendChild(scoutClassSelect);
                                
                                    var scoutClassInput = document.createElement("input");
                                        scoutClassInput.setAttribute("type", "submit");
                                        scoutClassInput.setAttribute("id", "scout-class");
                                        scoutClassInput.setAttribute("value", "scout");
                                        scoutClassInput.setAttribute("class", "selection-btn");
                                        
                                    scoutClassSelect.appendChild(scoutClassInput);
                    
                            var classRow5 = document.createElement("div");
                                classRow5.setAttribute("id", "class-row-5");
                                
                            classSelectDiv.appendChild(classRow5);
                            
                                var sorcererClassSelect = document.createElement("div");
                                    sorcererClassSelect.setAttribute("id", "sorcerer-class-select");
                                    
                                classRow5.appendChild(sorcererClassSelect);
                                
                                    var sorcererClassInput = document.createElement("input");
                                        sorcererClassInput.setAttribute("type", "submit");
                                        sorcererClassInput.setAttribute("id", "sorcerer-class");
                                        sorcererClassInput.setAttribute("value", "sorcerer");
                                        sorcererClassInput.setAttribute("class", "selection-btn");
                                        
                                    sorcererClassSelect.appendChild(sorcererClassInput);
                                
                                var spellswordClassSelect = document.createElement("div");
                                    spellswordClassSelect.setAttribute("id", "spellsword-class-select");
                                    spellswordClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow5.appendChild(spellswordClassSelect);
                                
                                    var spellswordClassInput = document.createElement("input");
                                        spellswordClassInput.setAttribute("type", "submit");
                                        spellswordClassInput.setAttribute("id", "spellsword-class");
                                        spellswordClassInput.setAttribute("value", "spellsword");
                                        spellswordClassInput.setAttribute("class", "selection-btn");
                                        
                                    spellswordClassSelect.appendChild(spellswordClassInput);  
                                    
                                var thiefClassSelect = document.createElement("div");
                                    thiefClassSelect.setAttribute("id", "thief-class-select");
                                    thiefClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow5.appendChild(thiefClassSelect);
                                
                                    var thiefClassInput = document.createElement("input");
                                        thiefClassInput.setAttribute("type", "submit");
                                        thiefClassInput.setAttribute("id", "thief-class");
                                        thiefClassInput.setAttribute("value", "thief");
                                        thiefClassInput.setAttribute("class", "selection-btn");
                                        
                                    thiefClassSelect.appendChild(thiefClassInput);   
                                    
                                var warriorClassSelect = document.createElement("div");
                                    warriorClassSelect.setAttribute("id", "warrior-class-select");
                                    warriorClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow5.appendChild(warriorClassSelect);
                                
                                    var warriorClassInput = document.createElement("input");
                                        warriorClassInput.setAttribute("type", "submit");
                                        warriorClassInput.setAttribute("id", "warrior-class");
                                        warriorClassInput.setAttribute("value", "warrior");
                                        warriorClassInput.setAttribute("class", "selection-btn");
                                        
                                    warriorClassSelect.appendChild(warriorClassInput);
                                    
                                var witchhunterClassSelect = document.createElement("div");
                                    witchhunterClassSelect.setAttribute("id", "witchhunter-class-select");
                                    witchhunterClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow5.appendChild(witchhunterClassSelect);
                                
                                    var witchhunterClassInput = document.createElement("input");
                                        witchhunterClassInput.setAttribute("type", "submit");
                                        witchhunterClassInput.setAttribute("id", "witchhunter-class");
                                        witchhunterClassInput.setAttribute("value", "witchhunter");
                                        witchhunterClassInput.setAttribute("class", "selection-btn");
                                        
                                    witchhunterClassSelect.appendChild(witchhunterClassInput);
                        
                        var birthsignSelect = document.createElement("div");
                            birthsignSelect.setAttribute("id", "birthsign-select");
                            
                        secondaryCharacterInformation.appendChild(birthsignSelect);
                        
                            var birthsignInstruction = document.createElement("div");
                                birthsignInstruction.setAttribute("id", "birthsign-instruction");
                                
                            birthsignSelect.appendChild(birthsignInstruction);
                            
                                var birthsignTxt = document.createElement("p");
                                    birthsignTxt.setAttribute("id", "birthsign-txt");
                                    birthsignTxt.textContent = "Select Birthsign:";
                                    
                                birthsignInstruction.appendChild(birthsignTxt);
                                
                            var birthsignRow1 = document.createElement("div");
                                birthsignRow1.setAttribute("id", "birthsign-row-1");
                                
                            birthsignSelect.appendChild(birthsignRow1);
                            
                                var warriorBirthsignSelect = document.createElement("div");
                                    warriorBirthsignSelect.setAttribute("id", "warrior-birthsign-select");
                              
                                    
                                birthsignRow1.appendChild(warriorBirthsignSelect);
                                
                                    var theWarriorBirthsignInput = document.createElement("input");
                                        theWarriorBirthsignInput.setAttribute("type", "submit");
                                        theWarriorBirthsignInput.setAttribute("id", "the-warrior-birthsign");
                                        theWarriorBirthsignInput.setAttribute("value", "the-warrior");
                                        theWarriorBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    warriorBirthsignSelect.appendChild(theWarriorBirthsignInput);
                                    
                                var mageBirthsignSelect = document.createElement("div");
                                    mageBirthsignSelect.setAttribute("id", "mage-birthsign-select");
                                    mageBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow1.appendChild(mageBirthsignSelect);
                                
                                    var theMageBirthsignInput = document.createElement("input");
                                        theMageBirthsignInput.setAttribute("type", "submit");
                                        theMageBirthsignInput.setAttribute("id", "the-mage-birthsign");
                                        theMageBirthsignInput.setAttribute("value", "the-mage");
                                        theMageBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    mageBirthsignSelect.appendChild(theMageBirthsignInput);
                                    
                                var thiefBirthsignSelect = document.createElement("div");
                                    thiefBirthsignSelect.setAttribute("id", "thief-birthsign-select");
                                    thiefBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow1.appendChild(thiefBirthsignSelect);
                                
                                    var theThiefBirthsignInput = document.createElement("input");
                                        theThiefBirthsignInput.setAttribute("type", "submit");
                                        theThiefBirthsignInput.setAttribute("id", "the-thief-birthsign");
                                        theThiefBirthsignInput.setAttribute("value", "the-thief");
                                        theThiefBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    thiefBirthsignSelect.appendChild(theThiefBirthsignInput);
                                    
                                var serpantBirthsignSelect = document.createElement("div");
                                    serpantBirthsignSelect.setAttribute("id", "serpant-birthsign-select");
                                    serpantBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow1.appendChild(serpantBirthsignSelect);
                                
                                    var theSerpantBirthsignInput = document.createElement("input");
                                        theSerpantBirthsignInput.setAttribute("type", "submit");
                                        theSerpantBirthsignInput.setAttribute("id", "the-serpant-birthsign");
                                        theSerpantBirthsignInput.setAttribute("value", "the-serpant");
                                        theSerpantBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    serpantBirthsignSelect.appendChild(theSerpantBirthsignInput);
                                    
                            var birthsignRow2 = document.createElement("div");
                                birthsignRow2.setAttribute("id", "birthsign-row-2");
                                
                            birthsignSelect.appendChild(birthsignRow2);
                            
                                var ladyBirthsignSelect = document.createElement("div");
                                    ladyBirthsignSelect.setAttribute("id", "lady-birthsign-select");
                            
                                    
                                birthsignRow2.appendChild(ladyBirthsignSelect);
                                
                                    var theLadyBirthsignInput = document.createElement("input");
                                        theLadyBirthsignInput.setAttribute("type", "submit");
                                        theLadyBirthsignInput.setAttribute("id", "the-lady-birthsign");
                                        theLadyBirthsignInput.setAttribute("value", "the-lady");
                                        theLadyBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    ladyBirthsignSelect.appendChild(theLadyBirthsignInput);
                                    
                                var steedBirthsignSelect = document.createElement("div");
                                    steedBirthsignSelect.setAttribute("id", "steed-birthsign-select");
                                    steedBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow2.appendChild(steedBirthsignSelect);
                                
                                    var theSteedBirthsignInput = document.createElement("input");
                                        theSteedBirthsignInput.setAttribute("type", "submit");
                                        theSteedBirthsignInput.setAttribute("id", "the-steed-birthsign");
                                        theSteedBirthsignInput.setAttribute("value", "the-steed");
                                        theSteedBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    steedBirthsignSelect.appendChild(theSteedBirthsignInput);
                                    
                                var lordBirthsignSelect = document.createElement("div");
                                    lordBirthsignSelect.setAttribute("id", "lord-birthsign-select");
                                    lordBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow2.appendChild(lordBirthsignSelect);
                                
                                    var theLordBirthsignInput = document.createElement("input");
                                        theLordBirthsignInput.setAttribute("type", "submit");
                                        theLordBirthsignInput.setAttribute("id", "the-lord-birthsign");
                                        theLordBirthsignInput.setAttribute("value", "the-lord");
                                        theLordBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    lordBirthsignSelect.appendChild(theLordBirthsignInput);
                                    
                                var apprenticeBirthsignSelect = document.createElement("div");
                                    apprenticeBirthsignSelect.setAttribute("id", "apprentice-birthsign-select");
                                    apprenticeBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow2.appendChild(apprenticeBirthsignSelect);
                                
                                    var theApprenticeBirthsignInput = document.createElement("input");
                                        theApprenticeBirthsignInput.setAttribute("type", "submit");
                                        theApprenticeBirthsignInput.setAttribute("id", "the-apprentice-birthsign");
                                        theApprenticeBirthsignInput.setAttribute("value", "the-apprentice");
                                        theApprenticeBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    apprenticeBirthsignSelect.appendChild(theApprenticeBirthsignInput);
                                    
                            var birthsignRow3 = document.createElement("div");
                                birthsignRow3.setAttribute("id", "birthsign-row-3");
                                
                            birthsignSelect.appendChild(birthsignRow3);
                            
                                var antronachBirthsignSelect = document.createElement("div");
                                    antronachBirthsignSelect.setAttribute("id", "antronach-birthsign-select");
                         
                                    
                                birthsignRow3.appendChild(antronachBirthsignSelect);
                                
                                    var theAntronachBirthsignInput = document.createElement("input");
                                        theAntronachBirthsignInput.setAttribute("type", "submit");
                                        theAntronachBirthsignInput.setAttribute("id", "the-antronach-birthsign");
                                        theAntronachBirthsignInput.setAttribute("value", "the-antronach");
                                        theAntronachBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    antronachBirthsignSelect.appendChild(theAntronachBirthsignInput);
                                    
                                var ritualBirthsignSelect = document.createElement("div");
                                    ritualBirthsignSelect.setAttribute("id", "ritual-birthsign-select");
                                    ritualBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow3.appendChild(ritualBirthsignSelect);
                                
                                    var theRitualBirthsignInput = document.createElement("input");
                                        theRitualBirthsignInput.setAttribute("type", "submit");
                                        theRitualBirthsignInput.setAttribute("id", "the-ritual-birthsign");
                                        theRitualBirthsignInput.setAttribute("value", "the-ritual");
                                        theRitualBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    ritualBirthsignSelect.appendChild(theRitualBirthsignInput);
                                    
                                var loverBirthsignSelect = document.createElement("div");
                                    loverBirthsignSelect.setAttribute("id", "lover-birthsign-select");
                                    loverBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow3.appendChild(loverBirthsignSelect);
                                
                                    var theLoverBirthsignInput = document.createElement("input");
                                        theLoverBirthsignInput.setAttribute("type", "submit");
                                        theLoverBirthsignInput.setAttribute("id", "the-lover-birthsign");
                                        theLoverBirthsignInput.setAttribute("value", "the-lover");
                                        theLoverBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    loverBirthsignSelect.appendChild(theLoverBirthsignInput);
                                    
                                var shadowBirthsignSelect = document.createElement("div");
                                    shadowBirthsignSelect.setAttribute("id", "shadow-birthsign-select");
                                    shadowBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow3.appendChild(shadowBirthsignSelect);
                                
                                    var theShadowBirthsignInput = document.createElement("input");
                                        theShadowBirthsignInput.setAttribute("type", "submit");
                                        theShadowBirthsignInput.setAttribute("id", "the-shadow-birthsign");
                                        theShadowBirthsignInput.setAttribute("value", "the-shadow");
                                        theShadowBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    shadowBirthsignSelect.appendChild(theShadowBirthsignInput);
                                    
                                var towerBirthsignSelect = document.createElement("div");
                                    towerBirthsignSelect.setAttribute("id", "tower-birthsign-select");
                                    towerBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow3.appendChild(towerBirthsignSelect);
                                
                                    var theTowerBirthsignInput = document.createElement("input");
                                        theTowerBirthsignInput.setAttribute("type", "submit");
                                        theTowerBirthsignInput.setAttribute("id", "the-tower-birthsign");
                                        theTowerBirthsignInput.setAttribute("value", "the-tower");
                                        theTowerBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    towerBirthsignSelect.appendChild(theTowerBirthsignInput);   
                                    
                    var infoStats = document.createElement("div");
                        infoStats.setAttribute("id", "info-stats");
                    
                calculatorParent.appendChild(infoStats);
                    
                         var characterChoiceInformation = document.createElement("div");
                            characterChoiceInformation.setAttribute("id", "character-choice-information");
                            
                        infoStats.appendChild(characterChoiceInformation);
                        
                            var choiceInfoRow1 = document.createElement("div");
                                choiceInfoRow1.setAttribute("id", "choice-info-row1");
                                
                            characterChoiceInformation.appendChild(choiceInfoRow1);
                        
                                var genderInfo = document.createElement("div");
                                    genderInfo.setAttribute("id", "gender-info");
        
                                choiceInfoRow1.appendChild(genderInfo);
                                
                                    var genderDisplay = document.createElement("p");
                                        genderDisplay.setAttribute("id", "gender-display");
                                        genderDisplay.textContent = "Gender";
                                        
                                    genderInfo.appendChild(genderDisplay);
                                
                                var raceInfo = document.createElement("div");
                                    raceInfo.setAttribute("id", "race-info");
                                    
                                choiceInfoRow1.appendChild(raceInfo);
                                
                                    var raceDisplay = document.createElement("p");
                                        raceDisplay.setAttribute("id", "race-display");
                                        raceDisplay.textContent = "Race";
                                        
                                    raceInfo.appendChild(raceDisplay);
                                
                            var choiceInfoRow2 = document.createElement("div");
                                    choiceInfoRow2.setAttribute("id", "choice-info-row2");
                                    
                                characterChoiceInformation.appendChild(choiceInfoRow2);
                                
                                var birthsignInfo = document.createElement("div");
                                    birthsignInfo.setAttribute("id", "birthsign-info");
                                    
                                choiceInfoRow2.appendChild(birthsignInfo);
                                
                                    var birthsignDisplay = document.createElement("p");
                                        birthsignDisplay.setAttribute("id", "birthsign-display");
                                        birthsignDisplay.textContent = "Birthsign";
                                        
                                    birthsignInfo.appendChild(birthsignDisplay);
                                
                                var classInfo = document.createElement("div");
                                    classInfo.setAttribute("id", "class-info");
          
                                    
                                choiceInfoRow2.appendChild(classInfo);
                                
                                    var classDisplay = document.createElement("p");
                                        classDisplay.setAttribute("id", "class-display");
                                        classDisplay.textContent = "Class";
                                        
                                    classInfo.appendChild(classDisplay);
        
                        var statsTitle = document.createElement("div");
                            statsTitle.setAttribute("id", "stats-title");
                            
                        infoStats.appendChild(statsTitle);
                        
                            var statsTxt = document.createElement("p");
                                statsTxt.setAttribute("id", "stats-txt");
                                statsTxt.textContent = "Character stats";
                                
                            statsTitle.appendChild(statsTxt);
                            
                        var levelStats = document.createElement("div");
                            levelStats.setAttribute("id", "level-stats");
                            
                        infoStats.appendChild(levelStats);
                        
                            var levelDisplay = document.createElement("p");
                                levelDisplay.setAttribute("id", "level-display");
                                
                            levelStats.appendChild(levelDisplay);
                            
                        var mainStats = document.createElement("div");
                            mainStats.setAttribute("id", "main-stats");
                            
                        infoStats.appendChild(mainStats);
                        
                            var healthStat = document.createElement("div");
                                healthStat.setAttribute("id", "health-stat");
                                
                            mainStats.appendChild(healthStat);
                            
                                var healthDisplay = document.createElement("p");
                                    healthDisplay.setAttribute("id", "health-display");
                                    healthDisplay.textContent = "Health:";
                                    
                                healthStat.appendChild(healthDisplay);
                                
                            var magickaStat = document.createElement("div");
                                magickaStat.setAttribute("id", "magicka-stat");
                                
                            mainStats.appendChild(magickaStat);
                                
                                var magickaDisplay = document.createElement("p");
                                    magickaDisplay.setAttribute("id", "magicka-display");
                                    magickaDisplay.textContent = "Magicka:";
                                    
                                magickaStat.appendChild(magickaDisplay);
                                
                            var fatigueStat = document.createElement("div");
                                fatigueStat.setAttribute("id", "fatigue-stat");
                                
                            mainStats.appendChild(fatigueStat);
                            
                                var fatigueDisplay = document.createElement("p");
                                    fatigueDisplay.setAttribute("id", "fatigue-display");
                                    fatigueDisplay.textContent = "Fatigue:";
                                    
                                fatigueStat.appendChild(fatigueDisplay);
                        
                        var secondaryStats = document.createElement("div");
                            secondaryStats.setAttribute("id", "secondary-stats");
                            
                        infoStats.appendChild(secondaryStats);
                        
                            var encumbranceStat = document.createElement("div");
                                encumbranceStat.setAttribute("id", "encumbrance-stat");
                                
                            secondaryStats.appendChild(encumbranceStat);
                            
                                var encumbranceDisplay = document.createElement("p");
                                    encumbranceDisplay.setAttribute("id", "encumbrance-display");
                                    
                                encumbranceStat.appendChild(encumbranceDisplay);
                                
                            var resistRow1 = document.createElement("div");
                                resistRow1.setAttribute("id", "resist-row-1");
                                
                            secondaryStats.appendChild(resistRow1);
                            
                                var resistMagickaStat = document.createElement("div");
                                    resistMagickaStat.setAttribute("id", "resist-magicka-stat");
                                    
                                resistRow1.appendChild(resistMagickaStat);
                                
                                    var resistMagickaDisplay = document.createElement("p");
                                        resistMagickaDisplay.setAttribute("id", "resist-magicka-display");
                                        resistMagickaDisplay.textContent = "Magicka damage resistance:";
                                        
                                    resistMagickaStat.appendChild(resistMagickaDisplay);
                                    
                                var resistFireStat = document.createElement("div");
                                    resistFireStat.setAttribute("id", "resist-fire-stat");
                                    
                                resistRow1.appendChild(resistFireStat);
                                
                                    var resistFireDisplay = document.createElement("p");
                                        resistFireDisplay.setAttribute("id", "resist-fire-display");
                                        resistFireDisplay.textContent = "Fire damage resistance:";
                                        
                                    resistFireStat.appendChild(resistFireDisplay);
                                    
                            var resistRow2 = document.createElement("div");
                                resistRow2.setAttribute("id", "resist-row-2");
                                
                            secondaryStats.appendChild(resistRow2);
                            
                                var resistFrostStat = document.createElement("div");
                                    resistFrostStat.setAttribute("id", "resist-frost-stat");
                                    
                                resistRow2.appendChild(resistFrostStat);
                                
                                    var resistFrostDisplay = document.createElement("p");
                                        resistFrostDisplay.setAttribute("id", "resist-frost-display");
                                        resistFrostDisplay.textContent = "Frost damage resistance:";
                                        
                                    resistFrostStat.appendChild(resistFrostDisplay);
                                    
                                var resistShockStat = document.createElement("div");
                                    resistShockStat.setAttribute("id", "resist-shock-stat");
                                    
                                resistRow2.appendChild(resistShockStat);
                                
                                    var resistShockDisplay = document.createElement("p");
                                        resistShockDisplay.setAttribute("id", "resist-shock-display");
                                        resistShockDisplay.textContent = "Shock damage resistance:";
                                        
                                    resistShockStat.appendChild(resistShockDisplay);
                                    
                            var resistRow3 = document.createElement("div");
                                resistRow3.setAttribute("id", "resist-row-3");
                                
                            secondaryStats.appendChild(resistRow3);
                            
                                var resistPoisonStat = document.createElement("div");
                                    resistPoisonStat.setAttribute("id", "resist-poison-stat");
                                    
                                resistRow3.appendChild(resistPoisonStat);
                                
                                    var resistPoisonDisplay = document.createElement("p");
                                        resistPoisonDisplay.setAttribute("id", "resist-poison-display");
                                        resistPoisonDisplay.textContent = "Poison damage resistance:";
                                        
                                    resistPoisonStat.appendChild(resistPoisonDisplay);
                                    
                                var resistCommonDiseaseStat = document.createElement("div");
                                    resistCommonDiseaseStat.setAttribute("id", "resist-common-disease-stat");
                                    
                                resistRow3.appendChild(resistCommonDiseaseStat);
                                
                                    var resistCommonDiseaseDisplay = document.createElement("p");
                                        resistCommonDiseaseDisplay.setAttribute("id", "resist-common-disease-display");
                                        resistCommonDiseaseDisplay.textContent = "Common disease resistance:";
                                        
                                    resistCommonDiseaseStat.appendChild(resistCommonDiseaseDisplay);
                                    
                    var spellStats = document.createElement("div");
                        spellStats.setAttribute("id", "spell-stats");
                        
                calculatorParent.appendChild(spellStats);
                
                        var spellStatInstructions = document.createElement("div");
                            spellStatInstructions.setAttribute("id", "spell-stat-instructions");
                            
                        spellStats.appendChild(spellStatInstructions);
                        
                            var spellStatInstructionsTxt = document.createElement("p");
                                spellStatInstructionsTxt.setAttribute("id", "spell-stat-instructions-txt");
                                spellStatInstructionsTxt.textContent = "To calculate a spells chance to hit, select the school of magic then input the cost of the spell.";
                                
                            spellStatInstructions.appendChild(spellStatInstructionsTxt);
                            
                        var spellStatSelections = document.createElement("div");
                            spellStatSelections.setAttribute("id", "spell-stat-selections");
                            
                        spellStats.appendChild(spellStatSelections);
                        
                            var spellStatRow = document.createElement("div");
                                spellStatRow.setAttribute("id", "spell-stat-row");
                                
                            spellStatSelections.appendChild(spellStatRow);
                            
                                var spellStatRestorationSelect = document.createElement("div");
                                    spellStatRestorationSelect.setAttribute("id", "spell-stat-restoration-select");
                                    spellStatRestorationSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatRestorationSelect);
                                
                                    var spellSkillRestorationInput = document.createElement("input");
                                        spellSkillRestorationInput.setAttribute("type", "submit");
                                        spellSkillRestorationInput.setAttribute("id", "spell-skill-restoration");
                                        spellSkillRestorationInput.setAttribute("name", "restoration");
                                        spellSkillRestorationInput.setAttribute("value", "restoration");
                                        spellSkillRestorationInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatRestorationSelect.appendChild(spellSkillRestorationInput);
                                    
                                var spellStatAlterationSelect = document.createElement("div");
                                    spellStatAlterationSelect.setAttribute("id", "spell-stat-alteration-select");
                                    spellStatAlterationSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatAlterationSelect);
                                
                                    var spellSkillAlterationInput = document.createElement("input");
                                        spellSkillAlterationInput.setAttribute("type", "submit");
                                        spellSkillAlterationInput.setAttribute("id", "spell-skill-alteration");
                                        spellSkillAlterationInput.setAttribute("name", "alteration");
                                        spellSkillAlterationInput.setAttribute("value", "alteration");
                                        spellSkillAlterationInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatAlterationSelect.appendChild(spellSkillAlterationInput);
                                    
                                var spellStatMysticismSelect = document.createElement("div");
                                    spellStatMysticismSelect.setAttribute("id", "spell-stat-mysticism-select");
                                    spellStatMysticismSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatMysticismSelect);
                                
                                    var spellSkillMysticismInput = document.createElement("input");
                                        spellSkillMysticismInput.setAttribute("type", "submit");
                                        spellSkillMysticismInput.setAttribute("id", "spell-skill-mysticism");
                                        spellSkillMysticismInput.setAttribute("name", "mysticism");
                                        spellSkillMysticismInput.setAttribute("value", "mysticism");
                                        spellSkillMysticismInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatMysticismSelect.appendChild(spellSkillMysticismInput);
                                    
                                var spellStatIllusionSelect = document.createElement("div");
                                    spellStatIllusionSelect.setAttribute("id", "spell-stat-illusion-select");
                                    spellStatIllusionSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatIllusionSelect);
                                
                                    var spellSkillIllusionInput = document.createElement("input");
                                        spellSkillIllusionInput.setAttribute("type", "submit");
                                        spellSkillIllusionInput.setAttribute("id", "spell-skill-illusion");
                                        spellSkillIllusionInput.setAttribute("name", "illusion");
                                        spellSkillIllusionInput.setAttribute("value", "illusion");
                                        spellSkillIllusionInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatIllusionSelect.appendChild(spellSkillIllusionInput); 
                                    
                                var spellStatConjurationSelect = document.createElement("div");
                                    spellStatConjurationSelect.setAttribute("id", "spell-stat-conjuration-select");
                                    spellStatConjurationSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatConjurationSelect);
                                
                                    var spellSkillConjurationInput = document.createElement("input");
                                        spellSkillConjurationInput.setAttribute("type", "submit");
                                        spellSkillConjurationInput.setAttribute("id", "spell-skill-conjuration");
                                        spellSkillConjurationInput.setAttribute("name", "conjuration");
                                        spellSkillConjurationInput.setAttribute("value", "conjuration");
                                        spellSkillConjurationInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatConjurationSelect.appendChild(spellSkillConjurationInput); 
                                    
                                var spellStatDestructionSelect = document.createElement("div");
                                    spellStatDestructionSelect.setAttribute("id", "spell-stat-destruction-select");
                                    spellStatDestructionSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatDestructionSelect);
                                
                                    var spellSkillDestructionInput = document.createElement("input");
                                        spellSkillDestructionInput.setAttribute("type", "submit");
                                        spellSkillDestructionInput.setAttribute("id", "spell-skill-destruction");
                                        spellSkillDestructionInput.setAttribute("name", "destruction");
                                        spellSkillDestructionInput.setAttribute("value", "destruction");
                                        spellSkillDestructionInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatDestructionSelect.appendChild(spellSkillDestructionInput); 
                                    
                        var spellCostSelection = document.createElement("div");
                            spellCostSelection.setAttribute("id", "spell-cost-selection");
                            
                        spellStats.appendChild(spellCostSelection);
                        
                            var spellCostParent = document.createElement("div");
                                spellCostParent.setAttribute("id", "spell-cost-parent");
                                
                            spellCostSelection.appendChild(spellCostParent);
                            
                                var spellCostTxt = document.createElement("p");
                                    spellCostTxt.setAttribute("id", "spell-cost-txt");
                                    spellCostTxt.textContent = "Spell cost:";
                                
                                spellCostParent.appendChild(spellCostTxt);
                                
                                var spellCostInput = document.createElement("input");
                                    spellCostInput.setAttribute("type", "number");
                                    spellCostInput.setAttribute("id", "spell-cost");
                                    spellCostInput.setAttribute("name", "spell-cost-input");
                                    
                                spellCostParent.appendChild(spellCostInput);
                                    
                        var spellStatDisplay = document.createElement("div");
                            spellStatDisplay.setAttribute("id", "spell-stat-display");
                            
                        spellStats.appendChild(spellStatDisplay);
                        
                            var chanceToCastStat = document.createElement("div");
                                chanceToCastStat.setAttribute("id", "chance-to-cast-stat");
                                
                            spellStatDisplay.appendChild(chanceToCastStat);
                            
                                var chanceToCastDisplay = document.createElement("p");
                                    chanceToCastDisplay.setAttribute("id", "chance-to-cast-display");
                                    chanceToCastDisplay.textContent = "Chance to cast: %";
                                    
                                chanceToCastStat.appendChild(chanceToCastDisplay);
                                
                    var weaponStats = document.createElement("div");
                        weaponStats.setAttribute("id", "weapon-stats");
                        
                calculatorParent.appendChild(weaponStats);
                
                        var weaponStatsInstructions = document.createElement("div");
                            weaponStatsInstructions.setAttribute("id", "weapon-stats-instructions");
                            
                        weaponStats.appendChild(weaponStatsInstructions);
                        
                            var weaponStatsInstructionsTxt = document.createElement("p");
                                weaponStatsInstructionsTxt.setAttribute("id", "weapon-stats-instructions-txt");
                                weaponStatsInstructionsTxt.textContent = "Select a set of armor, weapon and weapon condition. Weapon attack damage is simulated when clicking 'attack'. Be aware enemy armor value mimics that of the users";
                                
                            weaponStatsInstructions.appendChild(weaponStatsInstructionsTxt);
                            
                        var weaponStatSelectors = document.createElement("div");
                            weaponStatSelectors.setAttribute("id", "weapon-stat-selectors");
                            
                        weaponStats.appendChild(weaponStatSelectors);
                        
                            var selectWeapons = document.createElement("div");
                                selectWeapons.setAttribute("id", "select-weapons");
                                
                            weaponStatSelectors.appendChild(selectWeapons);
                            
                                var weaponsLabel = document.createElement("label");
                                    weaponsLabel.setAttribute("for", "weapons");
                                    weaponsLabel.setAttribute("class", "selector-label");
                                    weaponsLabel.textContent = "Choose a weapon:";
                                    
                                selectWeapons.appendChild(weaponsLabel);
                                
                                var weaponsSelect = document.createElement("select");
                                    weaponsSelect.setAttribute("name", "weapons");
                                    weaponsSelect.setAttribute("id", "weapons");
                                    weaponsSelect.setAttribute("class", "selector-box");
                                    
                                selectWeapons.appendChild(weaponsSelect);
                                
                                    var longBladeOptgroup = document.createElement("optgroup");
                                        longBladeOptgroup.setAttribute("label", "Long-blade");
                                    
                                    weaponsSelect.appendChild(longBladeOptgroup);
                                
                                        var optionIronLongsword = document.createElement("option");
                                            optionIronLongsword.setAttribute("value", "iron-longsword");
                                            optionIronLongsword.setAttribute("id", "iron-longsword");
                                            optionIronLongsword.textContent = "iron-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionIronLongsword);
                                        
                                        var optionSteelLongsword = document.createElement("option");
                                            optionSteelLongsword.setAttribute("value", "steel-longsword");
                                            optionSteelLongsword.setAttribute("id", "steel-longsword");
                                            optionSteelLongsword.textContent = "steel-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionSteelLongsword);
                                        
                                        var optionGlassLongsword = document.createElement("option");
                                            optionGlassLongsword.setAttribute("value", "glass-longsword");
                                            optionGlassLongsword.setAttribute("id", "glass-longsword");
                                            optionGlassLongsword.textContent = "glass-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionGlassLongsword);
                                        
                                        var optionEbonyLongsword = document.createElement("option");
                                            optionEbonyLongsword.setAttribute("value", "ebony-longsword");
                                            optionEbonyLongsword.setAttribute("id", "ebony-longsword");
                                            optionEbonyLongsword.textContent = "ebony-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionEbonyLongsword);
                                        
                                        var optionDaedricLongsword = document.createElement("option");
                                            optionDaedricLongsword.setAttribute("value", "daedric-longsword");
                                            optionDaedricLongsword.setAttribute("id", "daedric-longsword");
                                            optionDaedricLongsword.textContent = "daedric-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionDaedricLongsword);
                                        
                                    var bluntWeaponOptgroup = document.createElement("optgroup");
                                        bluntWeaponOptgroup.setAttribute("label", "Blunt-weapons");
                                        
                                    weaponsSelect.appendChild(bluntWeaponOptgroup);
                                    
                                        var optionIronMace = document.createElement("option");
                                            optionIronMace.setAttribute("value", "iron-mace");
                                            optionIronMace.setAttribute("id", "iron-mace");
                                            optionIronMace.textContent = "iron-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionIronMace);
                                        
                                        var optionSteelMace = document.createElement("option");
                                            optionSteelMace.setAttribute("value", "steel-mace");
                                            optionSteelMace.setAttribute("id", "steel-mace");
                                            optionSteelMace.textContent = "steel-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionSteelMace);
                                        
                                        var optionDwarvenMace = document.createElement("option");
                                            optionDwarvenMace.setAttribute("value", "dwarven-mace");
                                            optionDwarvenMace.setAttribute("id", "dwarven-mace");
                                            optionDwarvenMace.textContent = "dwarven-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionDwarvenMace);
                                        
                                        var optionEbonyMace = document.createElement("option");
                                            optionEbonyMace.setAttribute("value", "ebony-mace");
                                            optionEbonyMace.setAttribute("id", "ebony-mace");
                                            optionEbonyMace.textContent = "ebony-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionEbonyMace);
                                        
                                        var optionDaedricMace = document.createElement("option");
                                            optionDaedricMace.setAttribute("value", "daedric-mace");
                                            optionDaedricMace.setAttribute("id", "daedric-mace");
                                            optionDaedricMace.textContent = "daedric-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionDaedricMace);
                                        
                                    var spearOptgroup = document.createElement("optgroup");
                                        spearOptgroup.setAttribute("label", "Spears");
                                        
                                    weaponsSelect.appendChild(spearOptgroup);
                                    
                                        var optionIronSpear = document.createElement("option");
                                            optionIronSpear.setAttribute("value", "iron-spear");
                                            optionIronSpear.setAttribute("id", "iron-spear");
                                            optionIronSpear.textContent = "iron-spear";
                                        
                                        spearOptgroup.appendChild(optionIronSpear);
                                        
                                        var optionSteelSpear = document.createElement("option");
                                            optionSteelSpear.setAttribute("value", "steel-spear");
                                            optionSteelSpear.setAttribute("id", "steel-spear");
                                            optionSteelSpear.textContent = "steel-spear";
                                        
                                        spearOptgroup.appendChild(optionSteelSpear);
                                        
                                        var optionDwarvenSpear = document.createElement("option");
                                            optionDwarvenSpear.setAttribute("value", "dwarven-spear");
                                            optionDwarvenSpear.setAttribute("id", "dwarven-spear");
                                            optionDwarvenSpear.textContent = "dwarven-spear";
                                        
                                        spearOptgroup.appendChild(optionDwarvenSpear);
                                        
                                        var optionEbonySpear = document.createElement("option");
                                            optionEbonySpear.setAttribute("value", "ebony-spear");
                                            optionEbonySpear.setAttribute("id", "ebony-spear");
                                            optionEbonySpear.textContent = "ebony-spear";
                                        
                                        spearOptgroup.appendChild(optionEbonySpear);
                                        
                                        var optionDaedricSpear = document.createElement("option");
                                            optionDaedricSpear.setAttribute("value", "daedric-spear");
                                            optionDaedricSpear.setAttribute("id", "daedric-spear");
                                            optionDaedricSpear.textContent = "daedric-spear";
                                        
                                        spearOptgroup.appendChild(optionDaedricSpear);
                                        
                                    var axeOptgroup = document.createElement("optgroup");
                                        axeOptgroup.setAttribute("label", "Axe");
                                        
                                    weaponsSelect.appendChild(axeOptgroup);
                                    
                                        var optionIronWarAxe = document.createElement("option");
                                            optionIronWarAxe.setAttribute("value", "iron-war-axe");
                                            optionIronWarAxe.setAttribute("id", "iron-war-axe");
                                            optionIronWarAxe.textContent = "iron-war-axe";
        
                                        axeOptgroup.appendChild(optionIronWarAxe);
                                        
                                        var optionSteelWarAxe = document.createElement("option");
                                            optionSteelWarAxe.setAttribute("value", "steel-war-axe");
                                            optionSteelWarAxe.setAttribute("id", "steel-war-axe");
                                            optionSteelWarAxe.textContent = "steel-war-axe";
                                        
                                        axeOptgroup.appendChild(optionSteelWarAxe);
                                        
                                        var optionDwarvenWarAxe = document.createElement("option");
                                            optionDwarvenWarAxe.setAttribute("value", "dwarven-war-axe");
                                            optionDwarvenWarAxe.setAttribute("id", "dwarven-war-axe");
                                            optionDwarvenWarAxe.textContent = "dwarven-war-axe";
                                        
                                        axeOptgroup.appendChild(optionDwarvenWarAxe);
                                        
                                        var optionEbonyWarAxe = document.createElement("option");
                                            optionEbonyWarAxe.setAttribute("value", "ebony-war-axe");
                                            optionEbonyWarAxe.setAttribute("id", "ebony-war-axe");
                                            optionEbonyWarAxe.textContent = "ebony-war-axe";
                                        
                                        axeOptgroup.appendChild(optionEbonyWarAxe);
                                        
                                        var optionDaedricWarAxe = document.createElement("option");
                                            optionDaedricWarAxe.setAttribute("value", "daedric-war-axe");
                                            optionDaedricWarAxe.setAttribute("id", "daedric-war-axe");
                                            optionDaedricWarAxe.textContent = "daedric-war-axe";
                                        
                                        axeOptgroup.appendChild(optionDaedricWarAxe);    
                                        
                                    var shortBladeOptgroup = document.createElement("optgroup");
                                        shortBladeOptgroup.setAttribute("label", "Short-blade");
                                        
                                    weaponsSelect.appendChild(shortBladeOptgroup);
                                    
                                        var optionIronShortsword = document.createElement("option");
                                            optionIronShortsword.setAttribute("value", "iron-shortsword");
                                            optionIronShortsword.setAttribute("id", "iron-shortsword");
                                            optionIronShortsword.textContent = "iron-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionIronShortsword);
                                        
                                        var optionSteelShortsword = document.createElement("option");
                                            optionSteelShortsword.setAttribute("value", "steel-shortsword");
                                            optionSteelShortsword.setAttribute("id", "steel-shortsword");
                                            optionSteelShortsword.textContent = "steel-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionSteelShortsword);
                                        
                                        var optionDwarvenShortsword = document.createElement("option");
                                            optionDwarvenShortsword.setAttribute("value", "dwarven-shortsword");
                                            optionDwarvenShortsword.setAttribute("id", "dwarven-shortsword");
                                            optionDwarvenShortsword.textContent = "dwarven-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionDwarvenShortsword);
                                        
                                        var optionEbonyShortsword = document.createElement("option");
                                            optionEbonyShortsword.setAttribute("value", "ebony-shortsword");
                                            optionEbonyShortsword.setAttribute("id", "ebony-shortsword");
                                            optionEbonyShortsword.textContent = "ebony-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionEbonyShortsword);
                                        
                                        var optionDaedricShortsword = document.createElement("option");
                                            optionDaedricShortsword.setAttribute("value", "daedric-shortsword");
                                            optionDaedricShortsword.setAttribute("id", "daedric-shortsword");
                                            optionDaedricShortsword.textContent = "daedric-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionDaedricShortsword); 
                                        
                            var selectConditions = document.createElement("div");       
                                selectConditions.setAttribute("id", "select-condition");
                                
                            weaponStatSelectors.appendChild(selectConditions);
                                    
                                var conditionSelector = document.createElement("label");
                                    conditionSelector.setAttribute("for", "condition");
                                    conditionSelector.setAttribute("class", "selector-label");
                                    conditionSelector.textContent = "Choose weapon condition:";
                                    
                                selectConditions.appendChild(conditionSelector);
                                    
                                var selectCondition = document.createElement("select");
                                    selectCondition.setAttribute("name", "condition");  
                                    selectCondition.setAttribute("id", "condition");  
                                    selectCondition.setAttribute("class", "selector-box");
                                        
                                selectConditions.appendChild(selectCondition);
                                        
                                        var conditionsOptgroup = document.createElement("optgroup");
                                            conditionsOptgroup.setAttribute("label", "Condition");
                                            
                                        selectCondition.appendChild(conditionsOptgroup);
                                        
                                            var optionMax = document.createElement("option");
                                                optionMax.setAttribute("value", "max");
                                                optionMax.setAttribute("id", "max-condition-select");
                                                optionMax.textContent = "max-condition";
                                                
                                            conditionsOptgroup.appendChild(optionMax);
                                            
                                            var optionHigh = document.createElement("option");
                                                optionHigh.setAttribute("value", "high");
                                                optionHigh.setAttribute("id", "high-condition-select");
                                                optionHigh.textContent = "max-condition";
                                                
                                            conditionsOptgroup.appendChild(optionHigh);
                                            
                                            var optionMedium = document.createElement("option");
                                                optionMedium.setAttribute("value", "medium");
                                                optionMedium.setAttribute("id", "medium-condition-select");
                                                optionMedium.textContent = "medium-condition";
                                                
                                            conditionsOptgroup.appendChild(optionMedium);
                                            
                                            var optionLow = document.createElement("option");
                                                optionLow.setAttribute("value", "low");
                                                optionLow.setAttribute("id", "low-condition-select");
                                                optionLow.textContent = "low-condition";
                                                
                                            conditionsOptgroup.appendChild(optionLow);
                                        
                            var selectArmor = document.createElement("div");       
                                selectArmor.setAttribute("id", "select-armor");
                                    
                            weaponStatSelectors.appendChild(selectArmor);
                                        
                                var armorLabel = document.createElement("label");
                                    armorLabel.setAttribute("for", "armor");
                                    armorLabel.setAttribute("class", "selector-label");
                                    armorLabel.textContent = "Choose armor:";
                                    
                                selectArmor.appendChild(armorLabel);
                                    
                                var selectedArmor = document.createElement("select");
                                    selectedArmor.setAttribute("name", "armor");  
                                    selectedArmor.setAttribute("id", "armor");  
                                    selectedArmor.setAttribute("class", "selector-box");
                                        
                                selectArmor.appendChild(selectedArmor);
                                        
                                        var heavyArmorOptgroup = document.createElement("optgroup");
                                            heavyArmorOptgroup.setAttribute("label", "Heavy-armor");
                                            
                                        selectedArmor.appendChild(heavyArmorOptgroup);
                                        
                                            var optionIronArmor = document.createElement("option");
                                                optionIronArmor.setAttribute("value", "iron-armor");
                                                optionIronArmor.setAttribute("id", "iron-armor-select");
                                                optionIronArmor.textContent = "iron-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionIronArmor);
                                            
                                            var optionSteelArmor = document.createElement("option");
                                                optionSteelArmor.setAttribute("value", "steel-armor");
                                                optionSteelArmor.setAttribute("id", "steel-armor-select");
                                                optionSteelArmor.textContent = "steel-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionSteelArmor);
                                            
                                            var optionDwemerArmor = document.createElement("option");
                                                optionDwemerArmor.setAttribute("value", "dwemer-armor");
                                                optionDwemerArmor.setAttribute("id", "dwemer-armor-select");
                                                optionDwemerArmor.textContent = "dwemer-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionDwemerArmor);
                                            
                                            var optionEbonyArmor = document.createElement("option");
                                                optionEbonyArmor.setAttribute("value", "ebony-armor");
                                                optionEbonyArmor.setAttribute("id", "ebony-armor-select");
                                                optionEbonyArmor.textContent = "ebony-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionEbonyArmor);
                                            
                                            var optionDaedricArmor= document.createElement("option");
                                                optionDaedricArmor.setAttribute("value", "daedric-armor");
                                                optionDaedricArmor.setAttribute("id", "daedric-armor-select");
                                                optionDaedricArmor.textContent = "daedric-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionDaedricArmor);
                                            
                                        var mediumArmorOptgroup = document.createElement("optgroup");
                                            mediumArmorOptgroup.setAttribute("label", "Medium-armor");
                                            
                                        selectedArmor.appendChild(mediumArmorOptgroup);
                                        
                                            var optionBonemoldArmor = document.createElement("option");
                                                optionBonemoldArmor.setAttribute("value", "bonemold-armor");
                                                optionBonemoldArmor.setAttribute("id", "bonemold-armor-select");
                                                optionBonemoldArmor.textContent = "bonemold-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionBonemoldArmor);
                                            
                                            var optionOrcishArmor = document.createElement("option");
                                                optionOrcishArmor.setAttribute("value", "orcish-armor");
                                                optionOrcishArmor.setAttribute("id", "orcish-armor-select");
                                                optionOrcishArmor.textContent = "orcish-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionOrcishArmor);
                                            
                                            var optionAdamantiumArmor = document.createElement("option");
                                                optionAdamantiumArmor.setAttribute("value", "adamantium-armor");
                                                optionAdamantiumArmor.setAttribute("id", "adamantium-armor-select");
                                                optionAdamantiumArmor.textContent = "adamantium-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionAdamantiumArmor);
                                            
                                            var optionIceArmor = document.createElement("option");
                                                optionIceArmor.setAttribute("value", "ice-armor");
                                                optionIceArmor.setAttribute("id", "ice-armor-select");
                                                optionIceArmor.textContent = "ice-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionIceArmor);
                                            
                                            var optionRoyalGuardArmor= document.createElement("option");
                                                optionRoyalGuardArmor.setAttribute("value", "royal-guard-armor");
                                                optionRoyalGuardArmor.setAttribute("id", "royal-guard-armor-select");
                                                optionRoyalGuardArmor.textContent = "royal-guard-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionRoyalGuardArmor);  
                                            
                                        var lightArmorOptgroup = document.createElement("optgroup");
                                            lightArmorOptgroup.setAttribute("label", "Light-armor");
                                            
                                        selectedArmor.appendChild(lightArmorOptgroup);
                                        
                                            var optionNordicFurArmor = document.createElement("option");
                                                optionNordicFurArmor.setAttribute("value", "nordic-fur-armor");
                                                optionNordicFurArmor.setAttribute("id", "nordic-fur-armor-select");
                                                optionNordicFurArmor.textContent = "nordic-fur-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionNordicFurArmor);
                                            
                                            var optionNetchLeatherArmor = document.createElement("option");
                                                optionNetchLeatherArmor.setAttribute("value", "netch-leather-armor");
                                                optionNetchLeatherArmor.setAttribute("id", "netch-leather-armor-select");
                                                optionNetchLeatherArmor.textContent = "netch-leather-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionNetchLeatherArmor);
                                            
                                            var optionChitinArmor = document.createElement("option");
                                                optionChitinArmor.setAttribute("value", "chitin-armor");
                                                optionChitinArmor.setAttribute("id", "chitin-armor-select");
                                                optionChitinArmor.textContent = "chitin-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionChitinArmor);
                                            
                                            var optionDarkBrotherhoodArmor = document.createElement("option");
                                                optionDarkBrotherhoodArmor.setAttribute("value", "dark-brotherhood-armor");
                                                optionDarkBrotherhoodArmor.setAttribute("id", "dark-brotherhood-armor-select");
                                                optionDarkBrotherhoodArmor.textContent = "dark-brotherhood-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionDarkBrotherhoodArmor);
                                            
                                            var optionGlassArmor= document.createElement("option");
                                                optionGlassArmor.setAttribute("value", "glass-armor");
                                                optionGlassArmor.setAttribute("id", "glass-armor-select");
                                                optionGlassArmor.textContent = "glass-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionGlassArmor);
                        
                        var attackBtnDiv = document.createElement("div");
                            attackBtnDiv.setAttribute("id", "attack-btn-div");
                            
                        weaponStats.appendChild(attackBtnDiv);
                        
                            var attackButton = document.createElement("input");
                                attackButton.setAttribute("type", "submit");
                                attackButton.setAttribute("id", "attack-btn");
                                attackButton.setAttribute("name", "submit");
                                attackButton.setAttribute("value", "attack");
                                
                            attackBtnDiv.appendChild(attackButton);
                            
                        var weaponStatValues = document.createElement("div");  
                            weaponStatValues.setAttribute("id", "weapon-stat-values");
                            
                        weaponStats.appendChild(weaponStatValues);
                        
                            var weaponStatArmorProtection = document.createElement("div");
                                weaponStatArmorProtection.setAttribute("id", "weapon-stat-armor-protection");
                                
                            weaponStatValues.appendChild(weaponStatArmorProtection);
                            
                                var armorProtectionDisplay = document.createElement("p");
                                    armorProtectionDisplay.setAttribute("id", "armor-protection-display");
                                    armorProtectionDisplay.setAttribute("class", "weapon-stat-font");
                                    armorProtectionDisplay.textContent = "Armor protection:";
                                    
                                weaponStatArmorProtection.appendChild(armorProtectionDisplay);
                                
                            var weaponStatWeaponDmg = document.createElement("div");
                                weaponStatWeaponDmg.setAttribute("id", "weapon-stat-weapon-dmg");
                            
                            weaponStatValues.appendChild(weaponStatWeaponDmg);
                            
                                var attackDamageDisplay = document.createElement("p");
                                    attackDamageDisplay.setAttribute("id", "attack-damage-display");
                                    attackDamageDisplay.setAttribute("class", "weapon-stat-font");
                                    attackDamageDisplay.textContent = "Attack damage:";
                                    
                                weaponStatWeaponDmg.appendChild(attackDamageDisplay);
                                
                            var weaponStatChanceToHit = document.createElement("div");
                                weaponStatChanceToHit.setAttribute("id", "weapon-stat-chance-to-hit");
                                
                            weaponStatValues.appendChild(weaponStatChanceToHit);
                            
                                var chanceToHitDisplay = document.createElement("p");
                                    chanceToHitDisplay.setAttribute("id", "chance-to-hit-display");
                                    chanceToHitDisplay.setAttribute("class", "weapon-stat-font");
                                    chanceToHitDisplay.textContent = "Chance to hit:";
                                    
                                weaponStatChanceToHit.appendChild(chanceToHitDisplay);
                                    
                    var skillValues = document.createElement("div");
                        skillValues.setAttribute("id", "skill-values");
                        
                calculatorParent.appendChild(skillValues);
                    
                        var skillsrow1 = document.createElement("div");
                            skillsrow1.setAttribute("id", "skills-row-1");
                            
                        skillValues.appendChild(skillsrow1);
                        
                            var intelligenceSkills = document.createElement("div");
                                intelligenceSkills.setAttribute("id", "intelligence-skills");
                                intelligenceSkills.setAttribute("class", "skill-complete");
                                
                            skillsrow1.appendChild(intelligenceSkills);
                            
                                var intelligenceAttributeContainer = document.createElement("div");
                                    intelligenceAttributeContainer.setAttribute("id", "intelligence-attribute-container");
                                    intelligenceAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                intelligenceSkills.appendChild(intelligenceAttributeContainer);
                                
                                    var attributeTxt1 = document.createElement("p");
                                        attributeTxt1.setAttribute("class", "attribute-txt");
                                        attributeTxt1.textContent = "Attribute";
                                        
                                    intelligenceAttributeContainer.appendChild(attributeTxt1);
                                    
                                    var intelligenceAttribute = document.createElement("div");
                                        intelligenceAttribute.setAttribute("id", "intelligence-attribute");
                                        
                                    intelligenceAttributeContainer.appendChild(intelligenceAttribute);
                                    
                                        var intelligenceAttributeContainerTxt = document.createElement("div");
                                            intelligenceAttributeContainerTxt.setAttribute("id", "intelligence-container-txt");
                                            intelligenceAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        intelligenceAttribute.appendChild(intelligenceAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt1 = document.createElement("p");
                                                attributeActualTxt1.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt1.textContent = "Intelligence:";
                                                
                                            intelligenceAttributeContainerTxt.appendChild(attributeActualTxt1);
                                            
                                            var intelligenceContent = document.createElement("p");
                                                intelligenceContent.setAttribute("id", "intelligence-content");
                                                intelligenceContent.setAttribute("class", "attribute-actual-value");
                                                intelligenceContent.textContent = "Null:";
                                                
                                            intelligenceAttributeContainerTxt.appendChild(intelligenceContent);
                                            
                                        var intelligenceValueContainer = document.createElement("div");
                                            intelligenceValueContainer.setAttribute("id", "intelligence-value-container");
                                            
                                        intelligenceAttribute.appendChild(intelligenceValueContainer);
                                        
                                            var intelligenceAttributeInput = document.createElement("input");
                                                intelligenceAttributeInput.setAttribute("type", "number");
                                                intelligenceAttributeInput.setAttribute("id", "attribute-intelligence");
                                                intelligenceAttributeInput.setAttribute("name", "intelligence");
                                                
                                            intelligenceValueContainer.appendChild(intelligenceAttributeInput);
                                            
                                var intelligenceSkillsContainer = document.createElement("div");
                                    intelligenceSkillsContainer.setAttribute("id", "intelligence-skills-container");
                                    intelligenceSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                intelligenceSkills.appendChild(intelligenceSkillsContainer);
                                
                                    var skillTxt1 = document.createElement("p");
                                        skillTxt1.setAttribute("class", "skill-txt");
                                        skillTxt1.textContent = "Skills";
                                        
                                    intelligenceSkillsContainer.appendChild(skillTxt1);
                                    
                                    var intelligenceSkill1 = document.createElement("div");
                                        intelligenceSkill1.setAttribute("id", "intelligence-skill-1");
                                        
                                    intelligenceSkillsContainer.appendChild(intelligenceSkill1);
                                    
                                        var intelligenceSkill1ContainerTxt = document.createElement("div");
                                            intelligenceSkill1ContainerTxt.setAttribute("id", "intelligence-skill1-container-txt");
                                            intelligenceSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        intelligenceSkill1.appendChild(intelligenceSkill1ContainerTxt);
                                        
                                            var skillActualTxtIntelligence1 = document.createElement("p");
                                                skillActualTxtIntelligence1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtIntelligence1.textContent = "Alchemy:";
                                                
                                            intelligenceSkill1ContainerTxt.appendChild(skillActualTxtIntelligence1);
                                            
                                            var alchemyContent = document.createElement("p");
                                                alchemyContent.setAttribute("id", "alchemy-content");
                                                alchemyContent.setAttribute("class", "attribute-actual-value");
                                                alchemyContent.textContent = "null";
                                                
                                            intelligenceSkill1ContainerTxt.appendChild(alchemyContent);
                                            
                                        var alchemyValueContainer = document.createElement("id");
                                            alchemyValueContainer.setAttribute("id", "alchemy-value-container");
                                            
                                        intelligenceSkill1.appendChild(alchemyValueContainer);
                                        
                                            var alchemySkillInput = document.createElement("input");
                                                alchemySkillInput.setAttribute("id", "skill-alchemy");
                                                alchemySkillInput.setAttribute("type", "number");
                                                alchemySkillInput.setAttribute("name", "alchemy");
                                                
                                            alchemyValueContainer.appendChild(alchemySkillInput);
                                            
                                    var intelligenceSkill2 = document.createElement("div");
                                        intelligenceSkill2.setAttribute("id", "intelligence-skill-2");
                                        
                                    intelligenceSkillsContainer.appendChild(intelligenceSkill2);
                                    
                                        var intelligenceSkill2ContainerTxt = document.createElement("div");
                                            intelligenceSkill2ContainerTxt.setAttribute("id", "intelligence-skill2-container-txt");
                                            intelligenceSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        intelligenceSkill2.appendChild(intelligenceSkill2ContainerTxt);
                                        
                                            var skillActualTxtIntelligence2 = document.createElement("p");
                                                skillActualTxtIntelligence2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtIntelligence2.textContent = "Conjuration:";
                                                
                                            intelligenceSkill2ContainerTxt.appendChild(skillActualTxtIntelligence2);
                                            
                                            var conjurationContent = document.createElement("p");
                                                conjurationContent.setAttribute("id", "conjuration-content");
                                                conjurationContent.setAttribute("class", "attribute-actual-value");
                                                conjurationContent.textContent = "null";
                                                
                                            intelligenceSkill2ContainerTxt.appendChild(conjurationContent);
                                            
                                        var conjurationValueContainer = document.createElement("id");
                                            conjurationValueContainer.setAttribute("id", "conjuration-value-container");
                                            
                                        intelligenceSkill2.appendChild(conjurationValueContainer);
                                        
                                            var conjurationSkillInput = document.createElement("input");
                                                conjurationSkillInput.setAttribute("id", "skill-conjuration");
                                                conjurationSkillInput.setAttribute("type", "number");
                                                conjurationSkillInput.setAttribute("name", "conjuration");
                                                
                                            conjurationValueContainer.appendChild(conjurationSkillInput);
                                            
                                    var intelligenceSkill3 = document.createElement("div");
                                        intelligenceSkill3.setAttribute("id", "intelligence-skill-3");
                                        
                                    intelligenceSkillsContainer.appendChild(intelligenceSkill3);
                                    
                                        var intelligenceSkill3ContainerTxt = document.createElement("div");
                                            intelligenceSkill3ContainerTxt.setAttribute("id", "intelligence-skill3-container-txt");
                                            intelligenceSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        intelligenceSkill3.appendChild(intelligenceSkill3ContainerTxt);
                                        
                                            var skillActualTxtIntelligence3 = document.createElement("p");
                                                skillActualTxtIntelligence3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtIntelligence3.textContent = "Enchant:";
                                                
                                            intelligenceSkill3ContainerTxt.appendChild(skillActualTxtIntelligence3);
                                            
                                            var enchantContent = document.createElement("p");
                                                enchantContent.setAttribute("id", "enchant-content");
                                                enchantContent.setAttribute("class", "attribute-actual-value");
                                                enchantContent.textContent = "null";
                                                
                                            intelligenceSkill3ContainerTxt.appendChild(enchantContent);
                                            
                                        var enchantValueContainer = document.createElement("id");
                                            enchantValueContainer.setAttribute("id", "enchant-value-container");
                                            
                                        intelligenceSkill3.appendChild(enchantValueContainer);
                                        
                                            var enchantSkillInput = document.createElement("input");
                                                enchantSkillInput.setAttribute("id", "skill-enchant");
                                                enchantSkillInput.setAttribute("type", "number");
                                                enchantSkillInput.setAttribute("name", "enchant");
                                                
                                            enchantValueContainer.appendChild(enchantSkillInput);
                                            
                                    var intelligenceSkill4 = document.createElement("div");
                                        intelligenceSkill4.setAttribute("id", "intelligence-skill-4");
                                        
                                    intelligenceSkillsContainer.appendChild(intelligenceSkill4);
                                    
                                        var intelligenceSkill4ContainerTxt = document.createElement("div");
                                            intelligenceSkill4ContainerTxt.setAttribute("id", "intelligence-skill4-container-txt");
                                            intelligenceSkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        intelligenceSkill4.appendChild(intelligenceSkill4ContainerTxt);
                                        
                                            var skillActualTxtIntelligence4 = document.createElement("p");
                                                skillActualTxtIntelligence4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtIntelligence4.textContent = "Security:";
                                                
                                            intelligenceSkill4ContainerTxt.appendChild(skillActualTxtIntelligence4);
                                            
                                            var securityContent = document.createElement("p");
                                                securityContent.setAttribute("id", "security-content");
                                                securityContent.setAttribute("class", "attribute-actual-value");
                                                securityContent.textContent = "null";
                                                
                                            intelligenceSkill4ContainerTxt.appendChild(securityContent);
                                            
                                        var securityValueContainer = document.createElement("id");
                                            securityValueContainer.setAttribute("id", "security-value-container");
                                            
                                        intelligenceSkill4.appendChild(securityValueContainer);
                                        
                                            var securitySkillInput = document.createElement("input");
                                                securitySkillInput.setAttribute("id", "skill-security");
                                                securitySkillInput.setAttribute("type", "number");
                                                securitySkillInput.setAttribute("name", "security");
                                                
                                            securityValueContainer.appendChild(securitySkillInput);
                                            
                            var willpowerSkills = document.createElement("div");
                                willpowerSkills.setAttribute("id", "willpower-skills");
                                willpowerSkills.setAttribute("class", "skill-complete");
                                
                            skillsrow1.appendChild(willpowerSkills);
                            
                                var willpowerAttributeContainer = document.createElement("div");
                                    willpowerAttributeContainer.setAttribute("id", "willpower-attribute-container");
                                    willpowerAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                willpowerSkills.appendChild(willpowerAttributeContainer);
                                
                                    var attributeTxt2 = document.createElement("p");
                                        attributeTxt2.setAttribute("class", "attribute-txt");
                                        attributeTxt2.textContent = "Attribute";
                                        
                                    willpowerAttributeContainer.appendChild(attributeTxt2);
                                    
                                    var willpowerAttribute = document.createElement("div");
                                        willpowerAttribute.setAttribute("id", "willpower-attribute");
                                        
                                    willpowerAttributeContainer.appendChild(willpowerAttribute);
                                    
                                        var willpowerAttributeContainerTxt = document.createElement("div");
                                            willpowerAttributeContainerTxt.setAttribute("id", "willpower-container-txt");
                                            willpowerAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        willpowerAttribute.appendChild(willpowerAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt2 = document.createElement("p");
                                                attributeActualTxt2.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt2.textContent = "Willpower:";
                                                
                                            willpowerAttributeContainerTxt.appendChild(attributeActualTxt2);
                                            
                                            var willpowerContent = document.createElement("p");
                                                willpowerContent.setAttribute("id", "willpower-content");
                                                willpowerContent.setAttribute("class", "attribute-actual-value");
                                                willpowerContent.textContent = "Null:";
                                                
                                            willpowerAttributeContainerTxt.appendChild(willpowerContent);
                                            
                                        var willpowerValueContainer = document.createElement("div");
                                            willpowerValueContainer.setAttribute("id", "willpower-value-container");
                                            
                                        willpowerAttribute.appendChild(willpowerValueContainer);
                                        
                                            var willpowerAttributeInput = document.createElement("input");
                                                willpowerAttributeInput.setAttribute("type", "number");
                                                willpowerAttributeInput.setAttribute("id", "attribute-willpower");
                                                willpowerAttributeInput.setAttribute("name", "willpower");
                                                
                                            willpowerValueContainer.appendChild(willpowerAttributeInput);
                                            
                                var willpowerSkillsContainer = document.createElement("div");
                                    willpowerSkillsContainer.setAttribute("id", "willpower-skills-container");
                                    willpowerSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                willpowerSkills.appendChild(willpowerSkillsContainer);
                                
                                    var skillTxt2 = document.createElement("p");
                                        skillTxt2.setAttribute("class", "skill-txt");
                                        skillTxt2.textContent = "Skills";
                                        
                                    willpowerSkillsContainer.appendChild(skillTxt2);
                                    
                                    var willpowerSkill1 = document.createElement("div");
                                        willpowerSkill1.setAttribute("id", "willpower-skill-1");
                                        
                                    willpowerSkillsContainer.appendChild(willpowerSkill1);
                                    
                                        var willpowerSkill1ContainerTxt = document.createElement("div");
                                            willpowerSkill1ContainerTxt.setAttribute("id", "willpower-skill1-container-txt");
                                            willpowerSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        willpowerSkill1.appendChild(willpowerSkill1ContainerTxt);
                                        
                                            var skillActualTxtWillpower1 = document.createElement("p");
                                                skillActualTxtWillpower1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtWillpower1.textContent = "Alteration:";
                                                
                                            willpowerSkill1ContainerTxt.appendChild(skillActualTxtWillpower1);
                                            
                                            var alterationContent = document.createElement("p");
                                                alterationContent.setAttribute("id", "alteration-content");
                                                alterationContent.setAttribute("class", "attribute-actual-value");
                                                alterationContent.textContent = "null";
                                                
                                            willpowerSkill1ContainerTxt.appendChild(alterationContent);
                                            
                                        var alterationValueContainer = document.createElement("id");
                                            alterationValueContainer.setAttribute("id", "alteration-value-container");
                                            
                                        willpowerSkill1.appendChild(alterationValueContainer);
                                        
                                            var alterationSkillInput = document.createElement("input");
                                                alterationSkillInput.setAttribute("id", "skill-alteration");
                                                alterationSkillInput.setAttribute("type", "number");
                                                alterationSkillInput.setAttribute("name", "alteration");
                                                
                                            alterationValueContainer.appendChild(alterationSkillInput);
                                            
                                    var willpowerSkill2 = document.createElement("div");
                                        willpowerSkill2.setAttribute("id", "willpower-skill-2");
                                        
                                    willpowerSkillsContainer.appendChild(willpowerSkill2);
                                    
                                        var willpowerSkill2ContainerTxt = document.createElement("div");
                                            willpowerSkill2ContainerTxt.setAttribute("id", "willpower-skill2-container-txt");
                                            willpowerSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        willpowerSkill2.appendChild(willpowerSkill2ContainerTxt);
                                        
                                            var skillActualTxtWillpower2 = document.createElement("p");
                                                skillActualTxtWillpower2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtWillpower2.textContent = "Destruction:";
                                                
                                            willpowerSkill2ContainerTxt.appendChild(skillActualTxtWillpower2);
                                            
                                            var destructionContent = document.createElement("p");
                                                destructionContent.setAttribute("id", "destruction-content");
                                                destructionContent.setAttribute("class", "attribute-actual-value");
                                                destructionContent.textContent = "null";
                                                
                                            willpowerSkill2ContainerTxt.appendChild(destructionContent);
                                            
                                        var destructionValueContainer = document.createElement("id");
                                            destructionValueContainer.setAttribute("id", "destruction-value-container");
                                            
                                        willpowerSkill2.appendChild(destructionValueContainer);
                                        
                                            var destructionSkillInput = document.createElement("input");
                                                destructionSkillInput.setAttribute("id", "skill-destruction");
                                                destructionSkillInput.setAttribute("type", "number");
                                                destructionSkillInput.setAttribute("name", "destruction");
                                                
                                            destructionValueContainer.appendChild(destructionSkillInput);
                                            
                                    var willpowerSkill3 = document.createElement("div");
                                        willpowerSkill3.setAttribute("id", "willpower-skill-3");
                                        
                                    willpowerSkillsContainer.appendChild(willpowerSkill3);
                                    
                                        var willpowerSkill3ContainerTxt = document.createElement("div");
                                            willpowerSkill3ContainerTxt.setAttribute("id", "willpower-skill3-container-txt");
                                            willpowerSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        willpowerSkill3.appendChild(willpowerSkill3ContainerTxt);
                                        
                                            var skillActualTxtWillpower3 = document.createElement("p");
                                                skillActualTxtWillpower3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtWillpower3.textContent = "Mysticism:";
                                                
                                            willpowerSkill3ContainerTxt.appendChild(skillActualTxtWillpower3);
                                            
                                            var mysticismContent = document.createElement("p");
                                                mysticismContent.setAttribute("id", "mysticism-content");
                                                mysticismContent.setAttribute("class", "attribute-actual-value");
                                                mysticismContent.textContent = "null";
                                                
                                            willpowerSkill3ContainerTxt.appendChild(mysticismContent);
                                            
                                        var mysticismValueContainer = document.createElement("id");
                                            mysticismValueContainer.setAttribute("id", "mysticism-value-container");
                                            
                                        willpowerSkill3.appendChild(mysticismValueContainer);
                                        
                                            var mysticismSkillInput = document.createElement("input");
                                                mysticismSkillInput.setAttribute("id", "skill-mysticism");
                                                mysticismSkillInput.setAttribute("type", "number");
                                                mysticismSkillInput.setAttribute("name", "mysticism");
                                                
                                            mysticismValueContainer.appendChild(mysticismSkillInput);
                                            
                                    var willpowerSkill4 = document.createElement("div");
                                        willpowerSkill4.setAttribute("id", "willpower-skill-4");
                                        
                                    willpowerSkillsContainer.appendChild(willpowerSkill4);
                                    
                                        var willpowerSkill4ContainerTxt = document.createElement("div");
                                            willpowerSkill4ContainerTxt.setAttribute("id", "willpower-skill4-container-txt");
                                            willpowerSkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        willpowerSkill4.appendChild(willpowerSkill4ContainerTxt);
                                        
                                            var skillActualTxtWillpower4 = document.createElement("p");
                                                skillActualTxtWillpower4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtWillpower4.textContent = "Restoration:";
                                                
                                            willpowerSkill4ContainerTxt.appendChild(skillActualTxtWillpower4);
                                            
                                            var restorationContent = document.createElement("p");
                                                restorationContent.setAttribute("id", "restoration-content");
                                                restorationContent.setAttribute("class", "attribute-actual-value");
                                                restorationContent.textContent = "null";
                                                
                                            willpowerSkill4ContainerTxt.appendChild(restorationContent);
                                            
                                        var restorationValueContainer = document.createElement("id");
                                            restorationValueContainer.setAttribute("id", "restoration-value-container");
                                            
                                        willpowerSkill4.appendChild(restorationValueContainer);
                                        
                                            var restorationSkillInput = document.createElement("input");
                                                restorationSkillInput.setAttribute("id", "skill-restoration");
                                                restorationSkillInput.setAttribute("type", "number");
                                                restorationSkillInput.setAttribute("name", "restoration");
                                                
                                            restorationValueContainer.appendChild(restorationSkillInput);
                                            
                            var agilitySkills = document.createElement("div");
                                agilitySkills.setAttribute("id", "agility-skills");
                                agilitySkills.setAttribute("class", "skill-complete");
                                
                            skillsrow1.appendChild(agilitySkills);
                            
                                var agilityAttributeContainer = document.createElement("div");
                                    agilityAttributeContainer.setAttribute("id", "agility-attribute-container");
                                    agilityAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                agilitySkills.appendChild(agilityAttributeContainer);
                                
                                    var attributeTxt3 = document.createElement("p");
                                        attributeTxt3.setAttribute("class", "attribute-txt");
                                        attributeTxt3.textContent = "Attribute";
                                        
                                    agilityAttributeContainer.appendChild(attributeTxt3);
                                    
                                    var agilityAttribute = document.createElement("div");
                                        agilityAttribute.setAttribute("id", "agility-attribute");
                                        
                                    agilityAttributeContainer.appendChild(agilityAttribute);
                                    
                                        var agilityAttributeContainerTxt = document.createElement("div");
                                            agilityAttributeContainerTxt.setAttribute("id", "agility-container-txt");
                                            agilityAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        agilityAttribute.appendChild(agilityAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt3 = document.createElement("p");
                                                attributeActualTxt3.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt3.textContent = "Agility:";
                                                
                                            agilityAttributeContainerTxt.appendChild(attributeActualTxt3);
                                            
                                            var agilityContent = document.createElement("p");
                                                agilityContent.setAttribute("id", "agility-content");
                                                agilityContent.setAttribute("class", "attribute-actual-value");
                                                agilityContent.textContent = "Null:";
                                                
                                            agilityAttributeContainerTxt.appendChild(agilityContent);
                                            
                                        var agilityValueContainer = document.createElement("div");
                                            agilityValueContainer.setAttribute("id", "agility-value-container");
                                            
                                        agilityAttribute.appendChild(agilityValueContainer);
                                        
                                            var agilityAttributeInput = document.createElement("input");
                                                agilityAttributeInput.setAttribute("type", "number");
                                                agilityAttributeInput.setAttribute("id", "attribute-agility");
                                                agilityAttributeInput.setAttribute("name", "agility");
                                                
                                            agilityValueContainer.appendChild(agilityAttributeInput);
                                            
                                var agilitySkillsContainer = document.createElement("div");
                                    agilitySkillsContainer.setAttribute("id", "agility-skills-container");
                                    agilitySkillsContainer.setAttribute("class", "attribute-container");
                                    
                                agilitySkills.appendChild(agilitySkillsContainer);
                                
                                    var skillTxt3 = document.createElement("p");
                                        skillTxt3.setAttribute("class", "skill-txt");
                                        skillTxt3.textContent = "Skills";
                                        
                                    agilitySkillsContainer.appendChild(skillTxt3);
                                    
                                    var agilitySkill1 = document.createElement("div");
                                        agilitySkill1.setAttribute("id", "agility-skill-1");
                                        
                                    agilitySkillsContainer.appendChild(agilitySkill1);
                                    
                                        var agilitySkill1ContainerTxt = document.createElement("div");
                                            agilitySkill1ContainerTxt.setAttribute("id", "agility-skill1-container-txt");
                                            agilitySkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        agilitySkill1.appendChild(agilitySkill1ContainerTxt);
                                        
                                            var skillActualTxtAgility1 = document.createElement("p");
                                                skillActualTxtAgility1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtAgility1.textContent = "Block:";
                                                
                                            agilitySkill1ContainerTxt.appendChild(skillActualTxtAgility1);
                                            
                                            var blockContent = document.createElement("p");
                                                blockContent.setAttribute("id", "block-content");
                                                blockContent.setAttribute("class", "attribute-actual-value");
                                                blockContent.textContent = "null";
                                                
                                            agilitySkill1ContainerTxt.appendChild(blockContent);
                                            
                                        var blockValueContainer = document.createElement("id");
                                            blockValueContainer.setAttribute("id", "block-value-container");
                                            
                                        agilitySkill1.appendChild(blockValueContainer);
                                        
                                            var blockSkillInput = document.createElement("input");
                                                blockSkillInput.setAttribute("id", "skill-block");
                                                blockSkillInput.setAttribute("type", "number");
                                                blockSkillInput.setAttribute("name", "block");
                                                
                                            blockValueContainer.appendChild(blockSkillInput);
                                            
                                    var agilitySkill2 = document.createElement("div");
                                        agilitySkill2.setAttribute("id", "agility-skill-2");
                                        
                                    agilitySkillsContainer.appendChild(agilitySkill2);
                                    
                                        var agilitySkill2ContainerTxt = document.createElement("div");
                                            agilitySkill2ContainerTxt.setAttribute("id", "agility-skill2-container-txt");
                                            agilitySkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        agilitySkill2.appendChild(agilitySkill2ContainerTxt);
                                        
                                            var skillActualTxtAgility2 = document.createElement("p");
                                                skillActualTxtAgility2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtAgility2.textContent = "Light Armor:";
                                                
                                            agilitySkill2ContainerTxt.appendChild(skillActualTxtAgility2);
                                            
                                            var lightArmorContent = document.createElement("p");
                                                lightArmorContent.setAttribute("id", "light-armor-content");
                                                lightArmorContent.setAttribute("class", "attribute-actual-value");
                                                lightArmorContent.textContent = "null";
                                                
                                            agilitySkill2ContainerTxt.appendChild(lightArmorContent);
                                            
                                        var lightArmorValueContainer = document.createElement("id");
                                            lightArmorValueContainer.setAttribute("id", "light-armor-value-container");
                                            
                                        agilitySkill2.appendChild(lightArmorValueContainer);
                                        
                                            var lightArmorSkillInput = document.createElement("input");
                                                lightArmorSkillInput.setAttribute("id", "skill-light-armor");
                                                lightArmorSkillInput.setAttribute("type", "number");
                                                lightArmorSkillInput.setAttribute("name", "light-armor");
                                                
                                            lightArmorValueContainer.appendChild(lightArmorSkillInput);
                                            
                                    var agilitySkill3 = document.createElement("div");
                                        agilitySkill3.setAttribute("id", "agility-skill-3");
                                        
                                    agilitySkillsContainer.appendChild(agilitySkill3);
                                    
                                        var agilitySkill3ContainerTxt = document.createElement("div");
                                            agilitySkill3ContainerTxt.setAttribute("id", "agility-skill3-container-txt");
                                            agilitySkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        agilitySkill3.appendChild(agilitySkill3ContainerTxt);
                                        
                                            var skillActualTxtAgility3 = document.createElement("p");
                                                skillActualTxtAgility3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtAgility3.textContent = "Marksman:";
                                                
                                            agilitySkill3ContainerTxt.appendChild(skillActualTxtAgility3);
                                            
                                            var marksmanContent = document.createElement("p");
                                                marksmanContent.setAttribute("id", "marksman-content");
                                                marksmanContent.setAttribute("class", "attribute-actual-value");
                                                marksmanContent.textContent = "null";
                                                
                                            agilitySkill3ContainerTxt.appendChild(marksmanContent);
                                            
                                        var marksmanValueContainer = document.createElement("id");
                                            marksmanValueContainer.setAttribute("id", "marksman-value-container");
                                            
                                        agilitySkill3.appendChild(marksmanValueContainer);
                                        
                                            var marksmanSkillInput = document.createElement("input");
                                                marksmanSkillInput.setAttribute("id", "skill-marksman");
                                                marksmanSkillInput.setAttribute("type", "number");
                                                marksmanSkillInput.setAttribute("name", "marksman");
                                                
                                            marksmanValueContainer.appendChild(marksmanSkillInput);
                                            
                                    var agilitySkill4 = document.createElement("div");
                                        agilitySkill4.setAttribute("id", "agility-skill-4");
                                        
                                    agilitySkillsContainer.appendChild(agilitySkill4);
                                    
                                        var agilitySkill4ContainerTxt = document.createElement("div");
                                            agilitySkill4ContainerTxt.setAttribute("id", "agility-skill4-container-txt");
                                            agilitySkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        agilitySkill4.appendChild(agilitySkill4ContainerTxt);
                                        
                                            var skillActualTxtAgility4 = document.createElement("p");
                                                skillActualTxtAgility4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtAgility4.textContent = "Sneak:";
                                                
                                            agilitySkill4ContainerTxt.appendChild(skillActualTxtAgility4);
                                            
                                            var sneakContent = document.createElement("p");
                                                sneakContent.setAttribute("id", "sneak-content");
                                                sneakContent.setAttribute("class", "attribute-actual-value");
                                                sneakContent.textContent = "null";
                                                
                                            agilitySkill4ContainerTxt.appendChild(sneakContent);
                                            
                                        var sneakValueContainer = document.createElement("id");
                                            sneakValueContainer.setAttribute("id", "sneak-value-container");
                                            
                                        agilitySkill4.appendChild(sneakValueContainer);
                                        
                                            var sneakSkillInput = document.createElement("input");
                                                sneakSkillInput.setAttribute("id", "skill-sneak");
                                                sneakSkillInput.setAttribute("type", "number");
                                                sneakSkillInput.setAttribute("name", "sneak");
                                                
                                            sneakValueContainer.appendChild(sneakSkillInput);
                                            
                        var skillsRow2 = document.createElement("div");
                            skillsRow2.setAttribute("id", "skills-row-2");
                            
                        skillValues.appendChild(skillsRow2);
                        
                           var strengthSkills = document.createElement("div");
                                strengthSkills.setAttribute("id", "strength-skills");
                                strengthSkills.setAttribute("class", "skill-complete");
                                
                            skillsRow2.appendChild(strengthSkills);
                            
                                var strengthAttributeContainer = document.createElement("div");
                                    strengthAttributeContainer.setAttribute("id", "strength-attribute-container");
                                    strengthAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                strengthSkills.appendChild(strengthAttributeContainer);
                                
                                    var attributeTxt4 = document.createElement("p");
                                        attributeTxt4.setAttribute("class", "attribute-txt");
                                        attributeTxt4.textContent = "Attribute";
                                        
                                    strengthAttributeContainer.appendChild(attributeTxt4);
                                    
                                    var strengthAttribute = document.createElement("div");
                                        strengthAttribute.setAttribute("id", "strength-attribute");
                                        
                                    strengthAttributeContainer.appendChild(strengthAttribute);
                                    
                                        var strengthAttributeContainerTxt = document.createElement("div");
                                            strengthAttributeContainerTxt.setAttribute("id", "strength-container-txt");
                                            strengthAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        strengthAttribute.appendChild(strengthAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt4 = document.createElement("p");
                                                attributeActualTxt4.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt4.textContent = "Strength:";
                                                
                                            strengthAttributeContainerTxt.appendChild(attributeActualTxt4);
                                            
                                            var strengthContent = document.createElement("p");
                                                strengthContent.setAttribute("id", "strength-content");
                                                strengthContent.setAttribute("class", "attribute-actual-value");
                                                strengthContent.textContent = "Null:";
                                                
                                            strengthAttributeContainerTxt.appendChild(strengthContent);
                                            
                                        var strengthValueContainer = document.createElement("div");
                                            strengthValueContainer.setAttribute("id", "strength-value-container");
                                            
                                        strengthAttribute.appendChild(strengthValueContainer);
                                        
                                            var strengthAttributeInput = document.createElement("input");
                                                strengthAttributeInput.setAttribute("type", "number");
                                                strengthAttributeInput.setAttribute("id", "attribute-strength");
                                                strengthAttributeInput.setAttribute("name", "strength");
                                                
                                            strengthValueContainer.appendChild(strengthAttributeInput);
                                            
                                var strengthSkillsContainer = document.createElement("div");
                                    strengthSkillsContainer.setAttribute("id", "strength-skills-container");
                                    strengthSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                strengthSkills.appendChild(strengthSkillsContainer);
                                
                                    var skillTxt4 = document.createElement("p");
                                        skillTxt4.setAttribute("class", "skill-txt");
                                        skillTxt4.textContent = "Skills";
                                        
                                    strengthSkillsContainer.appendChild(skillTxt4);
                                    
                                    var strengthSkill1 = document.createElement("div");
                                        strengthSkill1.setAttribute("id", "strength-skill-1");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill1);
                                    
                                        var strengthSkill1ContainerTxt = document.createElement("div");
                                            strengthSkill1ContainerTxt.setAttribute("id", "strength-skill1-container-txt");
                                            strengthSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill1.appendChild(strengthSkill1ContainerTxt);
                                        
                                            var skillActualTxtStrength1 = document.createElement("p");
                                                skillActualTxtStrength1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength1.textContent = "Acrobatics:";
                                                
                                            strengthSkill1ContainerTxt.appendChild(skillActualTxtStrength1);
                                            
                                            var acrobaticsContent = document.createElement("p");
                                                acrobaticsContent.setAttribute("id", "acrobatics-content");
                                                acrobaticsContent.setAttribute("class", "attribute-actual-value");
                                                acrobaticsContent.textContent = "null";
                                                
                                            strengthSkill1ContainerTxt.appendChild(acrobaticsContent);
                                            
                                        var acrobaticsValueContainer = document.createElement("id");
                                            acrobaticsValueContainer.setAttribute("id", "acrobatics-value-container");
                                            
                                        strengthSkill1.appendChild(acrobaticsValueContainer);
                                        
                                            var acrobaticsSkillInput = document.createElement("input");
                                                acrobaticsSkillInput.setAttribute("id", "skill-acrobatics");
                                                acrobaticsSkillInput.setAttribute("type", "number");
                                                acrobaticsSkillInput.setAttribute("name", "acrobatics");
                                                
                                            acrobaticsValueContainer.appendChild(acrobaticsSkillInput);
                                            
                                    var strengthSkill2 = document.createElement("div");
                                        strengthSkill2.setAttribute("id", "strength-skill-2");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill2);
                                    
                                        var strengthSkill2ContainerTxt = document.createElement("div");
                                            strengthSkill2ContainerTxt.setAttribute("id", "strength-skill2-container-txt");
                                            strengthSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill2.appendChild(strengthSkill2ContainerTxt);
                                        
                                            var skillActualTxtStrength2 = document.createElement("p");
                                                skillActualTxtStrength2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength2.textContent = "Armorer:";
                                                
                                            strengthSkill2ContainerTxt.appendChild(skillActualTxtStrength2);
                                            
                                            var armorerContent = document.createElement("p");
                                                armorerContent.setAttribute("id", "armorer-content");
                                                armorerContent.setAttribute("class", "attribute-actual-value");
                                                armorerContent.textContent = "null";
                                                
                                            strengthSkill2ContainerTxt.appendChild(armorerContent);
                                            
                                        var armorerValueContainer = document.createElement("id");
                                            armorerValueContainer.setAttribute("id", "armorer-value-container");
                                            
                                        strengthSkill2.appendChild(armorerValueContainer);
                                        
                                            var armorerSkillInput = document.createElement("input");
                                                armorerSkillInput.setAttribute("id", "skill-armorer");
                                                armorerSkillInput.setAttribute("type", "number");
                                                armorerSkillInput.setAttribute("name", "armorer");
                                                
                                            armorerValueContainer.appendChild(armorerSkillInput);
                                            
                                    var strengthSkill3 = document.createElement("div");
                                        strengthSkill3.setAttribute("id", "strength-skill-3");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill3);
                                    
                                        var strengthSkill3ContainerTxt = document.createElement("div");
                                            strengthSkill3ContainerTxt.setAttribute("id", "strength-skill3-container-txt");
                                            strengthSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill3.appendChild(strengthSkill3ContainerTxt);
                                        
                                            var skillActualTxtStrength3 = document.createElement("p");
                                                skillActualTxtStrength3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength3.textContent = "Axe:";
                                                
                                            strengthSkill3ContainerTxt.appendChild(skillActualTxtStrength3);
                                            
                                            var axeContent = document.createElement("p");
                                                axeContent.setAttribute("id", "axe-content");
                                                axeContent.setAttribute("class", "attribute-actual-value");
                                                axeContent.textContent = "null";
                                                
                                            strengthSkill3ContainerTxt.appendChild(axeContent);
                                            
                                        var axeValueContainer = document.createElement("id");
                                            axeValueContainer.setAttribute("id", "axe-value-container");
                                            
                                        strengthSkill3.appendChild(axeValueContainer);
                                        
                                            var axeSkillInput = document.createElement("input");
                                                axeSkillInput.setAttribute("id", "skill-axe");
                                                axeSkillInput.setAttribute("type", "number");
                                                axeSkillInput.setAttribute("name", "axe");
                                                
                                            axeValueContainer.appendChild(axeSkillInput);
                                            
                                    var strengthSkill4 = document.createElement("div");
                                        strengthSkill4.setAttribute("id", "strength-skill-4");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill4);
                                    
                                        var strengthSkill4ContainerTxt = document.createElement("div");
                                            strengthSkill4ContainerTxt.setAttribute("id", "strength-skill4-container-txt");
                                            strengthSkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill4.appendChild(strengthSkill4ContainerTxt);
                                        
                                            var skillActualTxtStrength4 = document.createElement("p");
                                                skillActualTxtStrength4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength4.textContent = "Blunt weapon:";
                                                
                                            strengthSkill4ContainerTxt.appendChild(skillActualTxtStrength4);
                                            
                                            var bluntWeaponContent = document.createElement("p");
                                                bluntWeaponContent.setAttribute("id", "blunt-weapon-content");
                                                bluntWeaponContent.setAttribute("class", "attribute-actual-value");
                                                bluntWeaponContent.textContent = "null";
                                                
                                            strengthSkill4ContainerTxt.appendChild(bluntWeaponContent);
                                            
                                        var bluntWeaponValueContainer = document.createElement("id");
                                            bluntWeaponValueContainer.setAttribute("id", "blunt-weapon-value-container");
                                            
                                        strengthSkill4.appendChild(bluntWeaponValueContainer);
                                        
                                            var bluntWeaponSkillInput = document.createElement("input");
                                                bluntWeaponSkillInput.setAttribute("id", "skill-blunt-weapon");
                                                bluntWeaponSkillInput.setAttribute("type", "number");
                                                bluntWeaponSkillInput.setAttribute("name", "blunt-weapon");
                                                
                                            bluntWeaponValueContainer.appendChild(bluntWeaponSkillInput);
                                            
                                    var strengthSkill5 = document.createElement("div");
                                        strengthSkill5.setAttribute("id", "strength-skill-5");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill5);
                                    
                                        var strengthSkill5ContainerTxt = document.createElement("div");
                                            strengthSkill5ContainerTxt.setAttribute("id", "strength-skill5-container-txt");
                                            strengthSkill5ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill5.appendChild(strengthSkill5ContainerTxt);
                                        
                                            var skillActualTxtStrength5 = document.createElement("p");
                                                skillActualTxtStrength5.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength5.textContent = "Long blade:";
                                                
                                            strengthSkill5ContainerTxt.appendChild(skillActualTxtStrength5);
                                            
                                            var longBladeContent = document.createElement("p");
                                                longBladeContent.setAttribute("id", "long-blade-content");
                                                longBladeContent.setAttribute("class", "attribute-actual-value");
                                                longBladeContent.textContent = "null";
                                                
                                            strengthSkill5ContainerTxt.appendChild(longBladeContent);
                                            
                                        var longBladeValueContainer = document.createElement("id");
                                            longBladeValueContainer.setAttribute("id", "long-blade-value-container");
                                            
                                        strengthSkill5.appendChild(longBladeValueContainer);
                                        
                                            var longBladeSkillInput = document.createElement("input");
                                                longBladeSkillInput.setAttribute("id", "skill-long-blade");
                                                longBladeSkillInput.setAttribute("type", "number");
                                                longBladeSkillInput.setAttribute("name", "long-blade");
                                                
                                            longBladeValueContainer.appendChild(longBladeSkillInput);        
                                            
                            var enduranceSkills = document.createElement("div");
                                enduranceSkills.setAttribute("id", "endurance-skills");
                                enduranceSkills.setAttribute("class", "skill-complete");
                                
                            skillsRow2.appendChild(enduranceSkills);
                            
                                var enduranceAttributeContainer = document.createElement("div");
                                    enduranceAttributeContainer.setAttribute("id", "endurance-attribute-container");
                                    enduranceAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                enduranceSkills.appendChild(enduranceAttributeContainer);
                                
                                    var attributeTxt5 = document.createElement("p");
                                        attributeTxt5.setAttribute("class", "attribute-txt");
                                        attributeTxt5.textContent = "Attribute";
                                        
                                    enduranceAttributeContainer.appendChild(attributeTxt5);
                                    
                                    var enduranceAttribute = document.createElement("div");
                                        enduranceAttribute.setAttribute("id", "endurance-attribute");
                                        
                                    enduranceAttributeContainer.appendChild(enduranceAttribute);
                                    
                                        var enduranceAttributeContainerTxt = document.createElement("div");
                                            enduranceAttributeContainerTxt.setAttribute("id", "endurance-container-txt");
                                            enduranceAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        enduranceAttribute.appendChild(enduranceAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt5 = document.createElement("p");
                                                attributeActualTxt5.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt5.textContent = "Endurance:";
                                                
                                            enduranceAttributeContainerTxt.appendChild(attributeActualTxt5);
                                            
                                            var enduranceContent = document.createElement("p");
                                                enduranceContent.setAttribute("id", "endurance-content");
                                                enduranceContent.setAttribute("class", "attribute-actual-value");
                                                enduranceContent.textContent = "Null:";
                                                
                                            enduranceAttributeContainerTxt.appendChild(enduranceContent);
                                            
                                        var enduranceValueContainer = document.createElement("div");
                                            enduranceValueContainer.setAttribute("id", "endurance-value-container");
                                            
                                        enduranceAttribute.appendChild(enduranceValueContainer);
                                        
                                            var enduranceAttributeInput = document.createElement("input");
                                                enduranceAttributeInput.setAttribute("type", "number");
                                                enduranceAttributeInput.setAttribute("id", "attribute-endurance");
                                                enduranceAttributeInput.setAttribute("name", "endruance");
                                                
                                            enduranceValueContainer.appendChild(enduranceAttributeInput);
                                            
                                var enduranceSkillsContainer = document.createElement("div");
                                    enduranceSkillsContainer.setAttribute("id", "endurance-skills-container");
                                    enduranceSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                enduranceSkills.appendChild(enduranceSkillsContainer);
                                
                                    var skillTxt5 = document.createElement("p");
                                        skillTxt5.setAttribute("class", "skill-txt");
                                        skillTxt5.textContent = "Skills";
                                        
                                    enduranceSkillsContainer.appendChild(skillTxt5);
                                    
                                    var enduranceSkill1 = document.createElement("div");
                                        enduranceSkill1.setAttribute("id", "endurance-skill-1");
                                        
                                    enduranceSkillsContainer.appendChild(enduranceSkill1);
                                    
                                        var enduranceSkill1ContainerTxt = document.createElement("div");
                                            enduranceSkill1ContainerTxt.setAttribute("id", "endurance-skill1-container-txt");
                                            enduranceSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        enduranceSkill1.appendChild(enduranceSkill1ContainerTxt);
                                        
                                            var skillActualTxtEndurance1 = document.createElement("p");
                                                skillActualTxtEndurance1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtEndurance1.textContent = "Heavy armor:";
                                                
                                            enduranceSkill1ContainerTxt.appendChild(skillActualTxtEndurance1);
                                            
                                            var heavyArmorContent = document.createElement("p");
                                                heavyArmorContent.setAttribute("id", "heavy-armor-content");
                                                heavyArmorContent.setAttribute("class", "attribute-actual-value");
                                                heavyArmorContent.textContent = "null";
                                                
                                            enduranceSkill1ContainerTxt.appendChild(heavyArmorContent);
                                            
                                        var heavyArmorValueContainer = document.createElement("id");
                                            heavyArmorValueContainer.setAttribute("id", "heavy-armor-value-container");
                                            
                                        enduranceSkill1.appendChild(heavyArmorValueContainer);
                                        
                                            var heavyArmorSkillInput = document.createElement("input");
                                                heavyArmorSkillInput.setAttribute("id", "skill-heavy-armor");
                                                heavyArmorSkillInput.setAttribute("type", "number");
                                                heavyArmorSkillInput.setAttribute("name", "heavy-armor");
                                                
                                            heavyArmorValueContainer.appendChild(heavyArmorSkillInput);
                                            
                                    var enduranceSkill2 = document.createElement("div");
                                        enduranceSkill2.setAttribute("id", "endurance-skill-2");
                                        
                                    enduranceSkillsContainer.appendChild(enduranceSkill2);
                                    
                                        var enduranceSkill2ContainerTxt = document.createElement("div");
                                            enduranceSkill2ContainerTxt.setAttribute("id", "endurance-skill2-container-txt");
                                            enduranceSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        enduranceSkill2.appendChild(enduranceSkill2ContainerTxt);
                                        
                                            var skillActualTxtEndurance2 = document.createElement("p");
                                                skillActualTxtEndurance2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtEndurance2.textContent = "Medium armor:";
                                                
                                            enduranceSkill2ContainerTxt.appendChild(skillActualTxtEndurance2);
                                            
                                            var mediumArmorContent = document.createElement("p");
                                                mediumArmorContent.setAttribute("id", "medium-armor-content");
                                                mediumArmorContent.setAttribute("class", "attribute-actual-value");
                                                mediumArmorContent.textContent = "null";
                                                
                                            enduranceSkill2ContainerTxt.appendChild(mediumArmorContent);
                                            
                                        var mediumArmorValueContainer = document.createElement("id");
                                            mediumArmorValueContainer.setAttribute("id", "armorer-value-container");
                                            
                                        enduranceSkill2.appendChild(mediumArmorValueContainer);
                                        
                                            var mediumArmorSkillInput = document.createElement("input");
                                                mediumArmorSkillInput.setAttribute("id", "skill-medium-armor");
                                                mediumArmorSkillInput.setAttribute("type", "number");
                                                mediumArmorSkillInput.setAttribute("name", "medium-armor");
                                                
                                            mediumArmorValueContainer.appendChild(mediumArmorSkillInput);
                                            
                                    var enduranceSkill3 = document.createElement("div");
                                        enduranceSkill3.setAttribute("id", "endurance-skill-3");
                                        
                                    enduranceSkillsContainer.appendChild(enduranceSkill3);
                                    
                                        var enduranceSkill3ContainerTxt = document.createElement("div");
                                            enduranceSkill3ContainerTxt.setAttribute("id", "endurance-skill3-container-txt");
                                            enduranceSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        enduranceSkill3.appendChild(enduranceSkill3ContainerTxt);
                                        
                                            var skillActualTxtEndurance3 = document.createElement("p");
                                                skillActualTxtEndurance3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtEndurance3.textContent = "Spear:";
                                                
                                            enduranceSkill3ContainerTxt.appendChild(skillActualTxtEndurance3);
                                            
                                            var spearContent = document.createElement("p");
                                                spearContent.setAttribute("id", "spear-content");
                                                spearContent.setAttribute("class", "attribute-actual-value");
                                                spearContent.textContent = "null";
                                                
                                            enduranceSkill3ContainerTxt.appendChild(spearContent);
                                            
                                        var spearValueContainer = document.createElement("id");
                                            spearValueContainer.setAttribute("id", "spear-value-container");
                                            
                                        enduranceSkill3.appendChild(spearValueContainer);
                                        
                                            var spearSkillInput = document.createElement("input");
                                                spearSkillInput.setAttribute("id", "skill-spear");
                                                spearSkillInput.setAttribute("type", "number");
                                                spearSkillInput.setAttribute("name", "spear");
                                                
                                            spearValueContainer.appendChild(spearSkillInput);
                                            
                            var speedSkills = document.createElement("div");
                                speedSkills.setAttribute("id", "speed-skills");
                                speedSkills.setAttribute("class", "skill-complete");
                                
                            skillsRow2.appendChild(speedSkills);
                            
                                var speedAttributeContainer = document.createElement("div");
                                    speedAttributeContainer.setAttribute("id", "speed-attribute-container");
                                    speedAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                speedSkills.appendChild(speedAttributeContainer);
                                
                                    var attributeTxt6 = document.createElement("p");
                                        attributeTxt6.setAttribute("class", "attribute-txt");
                                        attributeTxt6.textContent = "Attribute";
                                        
                                    speedAttributeContainer.appendChild(attributeTxt6);
                                    
                                    var speedAttribute = document.createElement("div");
                                        speedAttribute.setAttribute("id", "speed-attribute");
                                        
                                    speedAttributeContainer.appendChild(speedAttribute);
                                    
                                        var speedAttributeContainerTxt = document.createElement("div");
                                            speedAttributeContainerTxt.setAttribute("id", "speed-container-txt");
                                            speedAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        speedAttribute.appendChild(speedAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt6 = document.createElement("p");
                                                attributeActualTxt6.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt6.textContent = "Speed:";
                                                
                                            speedAttributeContainerTxt.appendChild(attributeActualTxt6);
                                            
                                            var speedContent = document.createElement("p");
                                                speedContent.setAttribute("id", "speed-content");
                                                speedContent.setAttribute("class", "attribute-actual-value");
                                                speedContent.textContent = "Null:";
                                                
                                            speedAttributeContainerTxt.appendChild(speedContent);
                                            
                                        var speedValueContainer = document.createElement("div");
                                            speedValueContainer.setAttribute("id", "speed-value-container");
                                            
                                        speedAttribute.appendChild(speedValueContainer);
                                        
                                            var speedAttributeInput = document.createElement("input");
                                                speedAttributeInput.setAttribute("type", "number");
                                                speedAttributeInput.setAttribute("id", "attribute-speed");
                                                speedAttributeInput.setAttribute("name", "speed");
                                                
                                            speedValueContainer.appendChild(speedAttributeInput);
                                            
                                var speedSkillsContainer = document.createElement("div");
                                    speedSkillsContainer.setAttribute("id", "speed-skills-container");
                                    speedSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                speedSkills.appendChild(speedSkillsContainer);
                                
                                    var skillTxt6 = document.createElement("p");
                                        skillTxt6.setAttribute("class", "skill-txt");
                                        skillTxt6.textContent = "Skills";
                                        
                                    speedSkillsContainer.appendChild(skillTxt6);
                                    
                                    var speedSkill1 = document.createElement("div");
                                        speedSkill1.setAttribute("id", "speed-skill-1");
                                        
                                    speedSkillsContainer.appendChild(speedSkill1);
                                    
                                        var speedSkill1ContainerTxt = document.createElement("div");
                                            speedSkill1ContainerTxt.setAttribute("id", "speed-skill1-container-txt");
                                            speedSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        speedSkill1.appendChild(speedSkill1ContainerTxt);
                                        
                                            var skillActualTxtSpeed1 = document.createElement("p");
                                                skillActualTxtSpeed1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtSpeed1.textContent = "Athletics:";
                                                
                                            speedSkill1ContainerTxt.appendChild(skillActualTxtSpeed1);
                                            
                                            var athleticsContent = document.createElement("p");
                                                athleticsContent.setAttribute("id", "athletics-content");
                                                athleticsContent.setAttribute("class", "attribute-actual-value");
                                                athleticsContent.textContent = "null";
                                                
                                            speedSkill1ContainerTxt.appendChild(athleticsContent);
                                            
                                        var athleticsValueContainer = document.createElement("id");
                                            athleticsValueContainer.setAttribute("id", "athletics-value-container");
                                            
                                        speedSkill1.appendChild(athleticsValueContainer);
                                        
                                            var athleticsSkillInput = document.createElement("input");
                                                athleticsSkillInput.setAttribute("id", "skill-athletics");
                                                athleticsSkillInput.setAttribute("type", "number");
                                                athleticsSkillInput.setAttribute("name", "athletics");
                                                
                                            athleticsValueContainer.appendChild(athleticsSkillInput);
                                            
                                    var speedSkill2 = document.createElement("div");
                                        speedSkill2.setAttribute("id", "speed-skill-2");
                                        
                                    speedSkillsContainer.appendChild(speedSkill2);
                                    
                                        var speedSkill2ContainerTxt = document.createElement("div");
                                            speedSkill2ContainerTxt.setAttribute("id", "speed-skill2-container-txt");
                                            speedSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        speedSkill2.appendChild(speedSkill2ContainerTxt);
                                        
                                            var skillActualTxtSpeed2 = document.createElement("p");
                                                skillActualTxtSpeed2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtSpeed2.textContent = "Hand to hand:";
                                                
                                            speedSkill2ContainerTxt.appendChild(skillActualTxtSpeed2);
                                            
                                            var handToHandContent = document.createElement("p");
                                                handToHandContent.setAttribute("id", "hand-to-hand-content");
                                                handToHandContent.setAttribute("class", "attribute-actual-value");
                                                handToHandContent.textContent = "null";
                                                
                                            speedSkill2ContainerTxt.appendChild(handToHandContent);
                                            
                                        var handToHandValueContainer = document.createElement("id");
                                            handToHandValueContainer.setAttribute("id", "hand-to-hand-value-container");
                                            
                                        speedSkill2.appendChild(handToHandValueContainer);
                                        
                                            var handToHandSkillInput = document.createElement("input");
                                                handToHandSkillInput.setAttribute("id", "skill-hand-to-hand");
                                                handToHandSkillInput.setAttribute("type", "number");
                                                handToHandSkillInput.setAttribute("name", "hand-to-hand");
                                                
                                            handToHandValueContainer.appendChild(handToHandSkillInput);
                                            
                                    var speedSkill3 = document.createElement("div");
                                        speedSkill3.setAttribute("id", "speed-skill-3");
                                        
                                    speedSkillsContainer.appendChild(speedSkill3);
                                    
                                        var speedSkill3ContainerTxt = document.createElement("div");
                                            speedSkill3ContainerTxt.setAttribute("id", "speed-skill3-container-txt");
                                            speedSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        speedSkill3.appendChild(speedSkill3ContainerTxt);
                                        
                                            var skillActualTxtSpeed3 = document.createElement("p");
                                                skillActualTxtSpeed3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtSpeed3.textContent = "Short blade:";
                                                
                                            speedSkill3ContainerTxt.appendChild(skillActualTxtSpeed3);
                                            
                                            var shortBladeContent = document.createElement("p");
                                                shortBladeContent.setAttribute("id", "short-blade-content");
                                                shortBladeContent.setAttribute("class", "attribute-actual-value");
                                                shortBladeContent.textContent = "null";
                                                
                                            speedSkill3ContainerTxt.appendChild(shortBladeContent);
                                            
                                        var shortBladeValueContainer = document.createElement("id");
                                            shortBladeValueContainer.setAttribute("id", "short-blade-value-container");
                                            
                                        speedSkill3.appendChild(shortBladeValueContainer);
                                        
                                            var shortBladeSkillInput = document.createElement("input");
                                                shortBladeSkillInput.setAttribute("id", "skill-short-blade");
                                                shortBladeSkillInput.setAttribute("type", "number");
                                                shortBladeSkillInput.setAttribute("name", "short-blade");
                                                
                                            shortBladeValueContainer.appendChild(shortBladeSkillInput);    
                                            
                                    var speedSkill4 = document.createElement("div");
                                        speedSkill4.setAttribute("id", "speed-skill-4");
                                        
                                    speedSkillsContainer.appendChild(speedSkill4);
                                    
                                        var speedSkill4ContainerTxt = document.createElement("div");
                                            speedSkill4ContainerTxt.setAttribute("id", "speed-skill4-container-txt");
                                            speedSkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        speedSkill4.appendChild(speedSkill4ContainerTxt);
                                        
                                            var skillActualTxtSpeed4 = document.createElement("p");
                                                skillActualTxtSpeed4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtSpeed4.textContent = "Unarmored:";
                                                
                                            speedSkill4ContainerTxt.appendChild(skillActualTxtSpeed4);
                                            
                                            var unarmoredContent = document.createElement("p");
                                                unarmoredContent.setAttribute("id", "unarmored-content");
                                                unarmoredContent.setAttribute("class", "attribute-actual-value");
                                                unarmoredContent.textContent = "null";
                                                
                                            speedSkill4ContainerTxt.appendChild(unarmoredContent);
                                            
                                        var unarmoredValueContainer = document.createElement("id");
                                            unarmoredValueContainer.setAttribute("id", "unarmored-value-container");
                                            
                                        speedSkill4.appendChild(unarmoredValueContainer);
                                        
                                            var unarmoredSkillInput = document.createElement("input");
                                                unarmoredSkillInput.setAttribute("id", "skill-unarmored");
                                                unarmoredSkillInput.setAttribute("type", "number");
                                                unarmoredSkillInput.setAttribute("name", "unarmored");
                                                
                                            unarmoredValueContainer.appendChild(unarmoredSkillInput);
                                
                                var personalitySkills = document.createElement("div");
                                personalitySkills.setAttribute("id", "personality-skills");
                                personalitySkills.setAttribute("class", "skill-complete");
                                
                            skillsRow2.appendChild(personalitySkills);
                            
                                var personalityAttributeContainer = document.createElement("div");
                                    personalityAttributeContainer.setAttribute("id", "personality-attribute-container");
                                    personalityAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                personalitySkills.appendChild(personalityAttributeContainer);
                                
                                    var attributeTxt7 = document.createElement("p");
                                        attributeTxt7.setAttribute("class", "attribute-txt");
                                        attributeTxt7.textContent = "Attribute";
                                        
                                    personalityAttributeContainer.appendChild(attributeTxt7);
                                    
                                    var personalityAttribute = document.createElement("div");
                                        personalityAttribute.setAttribute("id", "personality-attribute");
                                        
                                    personalityAttributeContainer.appendChild(personalityAttribute);
                                    
                                        var personalityAttributeContainerTxt = document.createElement("div");
                                            personalityAttributeContainerTxt.setAttribute("id", "personality-container-txt");
                                            personalityAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        personalityAttribute.appendChild(personalityAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt7 = document.createElement("p");
                                                attributeActualTxt7.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt7.textContent = "Personality:";
                                                
                                            personalityAttributeContainerTxt.appendChild(attributeActualTxt7);
                                            
                                            var personalityContent = document.createElement("p");
                                                personalityContent.setAttribute("id", "personality-content");
                                                personalityContent.setAttribute("class", "attribute-actual-value");
                                                personalityContent.textContent = "Null:";
                                                
                                            personalityAttributeContainerTxt.appendChild(personalityContent);
                                            
                                        var personalityValueContainer = document.createElement("div");
                                            personalityValueContainer.setAttribute("id", "personality-value-container");
                                            
                                        personalityAttribute.appendChild(personalityValueContainer);
                                        
                                            var personalityAttributeInput = document.createElement("input");
                                                personalityAttributeInput.setAttribute("type", "number");
                                                personalityAttributeInput.setAttribute("id", "attribute-personality");
                                                personalityAttributeInput.setAttribute("name", "personality");
                                                
                                            personalityValueContainer.appendChild(personalityAttributeInput);
                                            
                                var personalitySkillsContainer = document.createElement("div");
                                    personalitySkillsContainer.setAttribute("id", "personality-skills-container");
                                    personalitySkillsContainer.setAttribute("class", "attribute-container");
                                    
                                personalitySkills.appendChild(personalitySkillsContainer);
                                
                                    var skillTxt7 = document.createElement("p");
                                        skillTxt7.setAttribute("class", "skill-txt");
                                        skillTxt7.textContent = "Skills";
                                        
                                    personalitySkillsContainer.appendChild(skillTxt7);
                                    
                                    var personalitySkill1 = document.createElement("div");
                                        personalitySkill1.setAttribute("id", "personality-skill-1");
                                        
                                    personalitySkillsContainer.appendChild(personalitySkill1);
                                    
                                        var personalitySkill1ContainerTxt = document.createElement("div");
                                            personalitySkill1ContainerTxt.setAttribute("id", "personality-skill1-container-txt");
                                            personalitySkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        personalitySkill1.appendChild(personalitySkill1ContainerTxt);
                                        
                                            var skillActualTxtPersonality1 = document.createElement("p");
                                                skillActualTxtPersonality1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtPersonality1.textContent = "Illusion:";
                                                
                                            personalitySkill1ContainerTxt.appendChild(skillActualTxtPersonality1);
                                            
                                            var illusionContent = document.createElement("p");
                                                illusionContent.setAttribute("id", "illusion-content");
                                                illusionContent.setAttribute("class", "attribute-actual-value");
                                                illusionContent.textContent = "null";
                                                
                                            personalitySkill1ContainerTxt.appendChild(illusionContent);
                                            
                                        var illusionValueContainer = document.createElement("id");
                                            illusionValueContainer.setAttribute("id", "illusion-value-container");
                                            
                                        personalitySkill1.appendChild(illusionValueContainer);
                                        
                                            var illusionSkillInput= document.createElement("input");
                                                illusionSkillInput.setAttribute("id", "skill-illusion");
                                                illusionSkillInput.setAttribute("type", "number");
                                                illusionSkillInput.setAttribute("name", "illusion");
                                                
                                            illusionValueContainer.appendChild(illusionSkillInput);
                                            
                                    var personalitySkill2 = document.createElement("div");
                                        personalitySkill2.setAttribute("id", "personality-skill-2");
                                        
                                    personalitySkillsContainer.appendChild(personalitySkill2);
                                    
                                        var personalitySkill2ContainerTxt = document.createElement("div");
                                            personalitySkill2ContainerTxt.setAttribute("id", "personality-skill2-container-txt");
                                            personalitySkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        personalitySkill2.appendChild(personalitySkill2ContainerTxt);
                                        
                                            var skillActualTxtPersonality2 = document.createElement("p");
                                                skillActualTxtPersonality2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtPersonality2.textContent = "Mercantile:";
                                                
                                            personalitySkill2ContainerTxt.appendChild(skillActualTxtPersonality2);
                                            
                                            var mercantileContent = document.createElement("p");
                                                mercantileContent.setAttribute("id", "mercantile-content");
                                                mercantileContent.setAttribute("class", "attribute-actual-value");
                                                mercantileContent.textContent = "null";
                                                
                                            personalitySkill2ContainerTxt.appendChild(mercantileContent);
                                            
                                        var mercantileValueContainer = document.createElement("id");
                                            mercantileValueContainer.setAttribute("id", "mercantile-value-container");
                                            
                                        personalitySkill2.appendChild(mercantileValueContainer);
                                        
                                            var mercantileSkillInput = document.createElement("input");
                                                mercantileSkillInput.setAttribute("id", "skill-mercantile");
                                                mercantileSkillInput.setAttribute("type", "number");
                                                mercantileSkillInput.setAttribute("name", "mercantile");
        
                                            mercantileValueContainer.appendChild(mercantileSkillInput);
                                            
                                    var personalitySkill3 = document.createElement("div");
                                        personalitySkill3.setAttribute("id", "personality-skill-3");
                                        
                                    personalitySkillsContainer.appendChild(personalitySkill3);
                                    
                                        var personalitySkill3ContainerTxt = document.createElement("div");
                                            personalitySkill3ContainerTxt.setAttribute("id", "personality-skill3-container-txt");
                                            personalitySkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        personalitySkill3.appendChild(personalitySkill3ContainerTxt);
                                        
                                            var skillActualTxtPersonality3 = document.createElement("p");
                                                skillActualTxtPersonality3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtPersonality3.textContent = "Speechcraft:";
                                                
                                            personalitySkill3ContainerTxt.appendChild(skillActualTxtPersonality3);
                                            
                                            var speechcraftContent = document.createElement("p");
                                                speechcraftContent.setAttribute("id", "speechcraft-content");
                                                speechcraftContent.setAttribute("class", "attribute-actual-value");
                                                speechcraftContent.textContent = "null";
                                                
                                            personalitySkill3ContainerTxt.appendChild(speechcraftContent);
                                            
                                        var speechcraftValueContainer = document.createElement("id");
                                            speechcraftValueContainer.setAttribute("id", "speechcraft-value-container");
                                            
                                        personalitySkill3.appendChild(speechcraftValueContainer);
                                        
                                            var speechcraftSkillInput = document.createElement("input");
                                                speechcraftSkillInput.setAttribute("id", "skill-speechcraft");
                                                speechcraftSkillInput.setAttribute("type", "number");
                                                speechcraftSkillInput.setAttribute("name", "speechcraft");
                                                
                                            speechcraftValueContainer.appendChild(speechcraftSkillInput);  
                                            
                                var luckAttributeContainer = document.createElement("div");
                                    luckAttributeContainer.setAttribute("id", "luck-attribute-container");
                                    luckAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                personalitySkills.appendChild(luckAttributeContainer);
                                
                                    var attributeTxt8 = document.createElement("p");
                                        attributeTxt8.setAttribute("class", "attribute-txt");
                                        attributeTxt8.textContent = "Attribute";
                                        
                                    luckAttributeContainer.appendChild(attributeTxt8);
                                    
                                    var luckAttribute = document.createElement("div");
                                        luckAttribute.setAttribute("id", "luck-attribute");
                                        
                                    luckAttributeContainer.appendChild(luckAttribute);
                                    
                                        var luckAttributeContainerTxt = document.createElement("div");
                                            luckAttributeContainerTxt.setAttribute("id", "luck-container-txt");
                                            luckAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        luckAttributeContainer.appendChild(luckAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt8 = document.createElement("p");
                                                attributeActualTxt8.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt8.textContent = "Luck:";
                                                
                                            luckAttributeContainerTxt.appendChild(attributeActualTxt8);
                                            
                                            var luckContent = document.createElement("p");
                                                luckContent.setAttribute("id", "luck-content");
                                                luckContent.setAttribute("class", "attribute-actual-value");
                                                luckContent.textContent = "Null:";
                                                
                                            luckAttributeContainerTxt.appendChild(luckContent);
                                            
                                        var luckValueContainer = document.createElement("div");
                                            luckValueContainer.setAttribute("id", "luck-value-container");
                                            
                                        luckAttributeContainer.appendChild(luckValueContainer);
                                        
                                            var luckAttributeInput = document.createElement("input");
                                                luckAttributeInput.setAttribute("type", "number");
                                                luckAttributeInput.setAttribute("id", "attribute-luck");
                                                luckAttributeInput.setAttribute("name", "luck");
                                                
                                            luckValueContainer.appendChild(luckAttributeInput);
                                            
                    var saveCalc = document.createElement("div");
                        saveCalc.setAttribute("id", "save-calc");
                        
                calculatorParent.appendChild(saveCalc);
                    
                        var returnButton = document.createElement("input");
                            returnButton.setAttribute("type", "submit");
                            returnButton.setAttribute("id", "return-button");
                            returnButton.setAttribute("value", "return");
        
                        saveCalc.appendChild(returnButton);
                        
                const armorEvent = document.querySelector("#armor");
        
        
                //event listeners--------------------------
                
                returnButton.addEventListener("click", HomePage);
                
                weaponsSelect.addEventListener("input", RetrieveWeapon);
                conditionSelector.addEventListener("input", RetrieveCondition);
                armorEvent.addEventListener("input", ChosenArmor);
                attackButton.addEventListener("click", CalcWeaponDamage);    
                characterNameInput.addEventListener("input", SetCharName);
                    
                spellSkillRestorationInput.addEventListener("click", RestorationSelected);
                spellSkillAlterationInput.addEventListener("click", AlterationSelected);    
                spellSkillMysticismInput.addEventListener("click", MysticismSelected);
                spellSkillIllusionInput.addEventListener("click", IllusionSelected);
                spellSkillConjurationInput.addEventListener("click", ConjurationSelected);
                spellSkillDestructionInput.addEventListener("click", DestructionSelected);
                spellCostInput.addEventListener("input", ValueChangeDetected);
                acrobatClassInput.addEventListener("click", AcrobatClassSelected);
                agentClassInput.addEventListener("click", AgentClassSelected);     
                archerClassInput.addEventListener("click", ArcherClassSelected);
                assasinClassInput.addEventListener("click", AssasinClassSelected);
                barbarianClassInput.addEventListener("click", BarbarianClassSelected);
                bardClassInput.addEventListener("click", BardClassSelected);
                battlemageClassInput.addEventListener("click", BattlemageClassSelected);
                crusaderClassInput.addEventListener("click", CrusaderClassSelected);
                healerClassInput.addEventListener("click", HealerClassSelected);
                knightClassInput.addEventListener("click", KnightClassSelected);
                mageClassInput.addEventListener("click", MageClassSelected);
                monkClassInput.addEventListener("click", MonkClassSelected);
                nightbladeClassInput.addEventListener("click", NightbladeClassSelected);
                pilgrimClassInput.addEventListener("click", PilgrimClassSelected);
                rogueClassInput.addEventListener("click", RogueClassSelected);
                scoutClassInput.addEventListener("click", ScoutClassSelected);
                sorcererClassInput.addEventListener("click", SorcererClassSelected);
                spellswordClassInput.addEventListener("click", SpellswordClassSelected);
                thiefClassInput.addEventListener("click", ThiefClassSelected);
                warriorClassInput.addEventListener("click", WarriorClassSelected);
                witchhunterClassInput.addEventListener("click", WitchhunterClassSelected);
                
                
                theWarriorBirthsignInput.addEventListener("click", TriggerWarriorBirthsign);    
                theMageBirthsignInput.addEventListener("click", TriggerMageBirthsign);    
                theThiefBirthsignInput.addEventListener("click", TriggerThiefBirthsign);    
                theSerpantBirthsignInput.addEventListener("click", TriggerSerpentBirthsign);    
                theLadyBirthsignInput.addEventListener("click", TriggerLadyBirthsign);    
                theSteedBirthsignInput.addEventListener("click", TriggerSteedBirthsign);    
                theLordBirthsignInput.addEventListener("click", TriggerLordBirthsign);     
                theApprenticeBirthsignInput.addEventListener("click", TriggerApprenticeBirthsign);    
                theAntronachBirthsignInput.addEventListener("click", TriggerAntronachBirthsign);     
                theRitualBirthsignInput.addEventListener("click", TriggerRitualBirthsign); 
                theLoverBirthsignInput.addEventListener("click", TriggerLoverBirthsign); 
                theShadowBirthsignInput.addEventListener("click", TriggerShadowBirthsign); 
                theTowerBirthsignInput.addEventListener("click", TriggerTowerBirthsign);
                
                
                argonianInput.addEventListener("click", ArgonianSelected);
                bretonInput.addEventListener("click", BretonSelected);
                darkElfInput.addEventListener("click", DarkElfSelected);
                highElfInput.addEventListener("click", HighElfSelected);
                imperialInput.addEventListener("click", ImperialSelected);
                khajiitInput.addEventListener("click", KhajiitSelected);
                nordInput.addEventListener("click", NordSelected);
                orcInput.addEventListener("click", OrcSelected);    
                redguardInput.addEventListener("click", RedguardSelected);
                woodElfInput.addEventListener('click', WoodElfSelected);
                
                selectMaleInput.addEventListener("click", MaleSelectedINITIALISE);
                selectFemaleInput.addEventListener("click", FemaleSelectedINITIALISE);
                
                
                enduranceAttributeInput.addEventListener("input", ValueChangeDetected);
                heavyArmorSkillInput.addEventListener("input", ValueChangeDetected);
                mediumArmorSkillInput.addEventListener("input", ValueChangeDetected);
                spearSkillInput.addEventListener("input", ValueChangeDetected);
                strengthAttributeInput.addEventListener("input", ValueChangeDetected);
                acrobaticsSkillInput.addEventListener("input", ValueChangeDetected);
                armorerSkillInput.addEventListener("input", ValueChangeDetected);
                axeSkillInput.addEventListener("input", ValueChangeDetected);
                bluntWeaponSkillInput.addEventListener("input", ValueChangeDetected);
                longBladeSkillInput.addEventListener("input", ValueChangeDetected);
                intelligenceAttributeInput.addEventListener("input", ValueChangeDetected);
                alchemySkillInput.addEventListener("input", ValueChangeDetected);
                conjurationSkillInput.addEventListener("input", ValueChangeDetected);
                enchantSkillInput.addEventListener("input", ValueChangeDetected);
                securitySkillInput.addEventListener("input", ValueChangeDetected);
                willpowerAttributeInput.addEventListener("input", ValueChangeDetected);
                alterationSkillInput.addEventListener("input", ValueChangeDetected);
                destructionSkillInput.addEventListener("input", ValueChangeDetected);
                mysticismSkillInput.addEventListener("input", ValueChangeDetected);
                restorationSkillInput.addEventListener("input", ValueChangeDetected);
                agilityAttributeInput.addEventListener("input", ValueChangeDetected);
                blockSkillInput.addEventListener("input", ValueChangeDetected);
                lightArmorSkillInput.addEventListener("input", ValueChangeDetected);
                marksmanSkillInput.addEventListener("input", ValueChangeDetected);
                sneakSkillInput.addEventListener("input", ValueChangeDetected);
                speedAttributeInput.addEventListener("input", ValueChangeDetected);
                athleticsSkillInput.addEventListener("input", ValueChangeDetected);
                handToHandSkillInput.addEventListener("input", ValueChangeDetected);
                shortBladeSkillInput.addEventListener("input", ValueChangeDetected);
                unarmoredSkillInput.addEventListener("input", ValueChangeDetected);
                personalityAttributeInput.addEventListener("input", ValueChangeDetected);
                illusionSkillInput.addEventListener("input", ValueChangeDetected);
                mercantileSkillInput.addEventListener("input", ValueChangeDetected);
                speechcraftSkillInput.addEventListener("input", ValueChangeDetected);
                luckAttributeInput.addEventListener("input", ValueChangeDetected);
                
                
                //------------initialise input values 
                
                    enduranceAttributeInput.value = baseEndurance;  
                    heavyArmorSkillInput.value = baseHeavyArmor;
                    mediumArmorSkillInput.value = baseMediumArmor;
                    spearSkillInput.value = baseSpear;
                
                
                    strengthAttributeInput.value = baseStrength;
                    acrobaticsSkillInput.value = baseAcrobatics;          
                    armorerSkillInput.value = baseArmorer;
                    axeSkillInput.value = baseAxe;
                    bluntWeaponSkillInput.value = baseBluntWeapon;
                    longBladeSkillInput.value = baseLongBlade;
                
                
                    intelligenceAttributeInput.value = baseIntelligence;
                    alchemySkillInput.value = baseAlchemy;          
                    conjurationSkillInput.value = baseConjuration;
                    enchantSkillInput.value = baseEnchant;
                    securitySkillInput.value = baseSecurity;
                    
                    willpowerAttributeInput.value = baseWillpower;
                    alterationSkillInput.value = baseAlteration;          
                    destructionSkillInput.value = baseDestruction;
                    mysticismSkillInput.value = baseMysticism;
                    restorationSkillInput.value = baseRestoration;
                
                
                    agilityAttributeInput.value = baseAgility;
                    blockSkillInput.value = baseBlock;          
                    lightArmorSkillInput.value = baseLightArmor;
                    marksmanSkillInput.value = baseMarksman;
                    sneakSkillInput.value = baseSneak;
                    
                    speedAttributeInput.value = baseSpeed;
                    athleticsSkillInput.value = baseAthletics;          
                    handToHandSkillInput.value = baseHandToHand;
                    shortBladeSkillInput.value = baseShortBlade;
                    unarmoredSkillInput.value = baseUnarmored;
                
                
                    personalityAttributeInput.value = basePersonality;
                    illusionSkillInput.value = baseIllusion;          
                    mercantileSkillInput.value = baseMercantile;
                    speechcraftSkillInput.value = baseSpeechcraft;
                
                    luckAttributeInput.value = baseLuck;
                
                
                    RetrieveRace();
                    RetrieveGender();       //charVals.gender initialises at 0 so begins as male, this checks for male or female on startup 
                    CalcWeaponDamage();     //triggers initial weapon calc function 
                
        
            
        }  
          
        
        function UserCalcPage(){
            
             ClearPage();
            
            
            const contentAnchor = document.querySelector("#content-anchor");
            
                var calculatorParent = document.createElement("div");
                    calculatorParent.setAttribute("id", "calculator-parent");
                    
            contentAnchor.appendChild(calculatorParent);
            
                    var calculatorInstructionsParent = document.createElement("div");
                        calculatorInstructionsParent.setAttribute("id", "calculator-instructions-parent");
                        
                calculatorParent.appendChild(calculatorInstructionsParent);
                
                        var calcIntroTxt = document.createElement("p");
                            calcIntroTxt.setAttribute("id", "calc-intro-txt");
                            calcIntroTxt.setAttribute("class", "instructions-calc-txt");
                            calcIntroTxt.textContent = "How to use:";
                            
                    calculatorInstructionsParent.appendChild(calcIntroTxt);
                    
                        var calcInstructions1 = document.createElement("p");
                            calcInstructions1.setAttribute("id", "calc-instructions-1");
                            calcInstructions1.setAttribute("class", "instructions-calc-txt");
                            calcInstructions1.textContent = "To use the Morrowind Calculator begin by setting a name, race, class and birthsign from the selection below. This will initialise the base values for your character. From there you can change any value within the calculator as desired.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions1);    
                    
                        var calcInstructions2 = document.createElement("p");
                            calcInstructions2.setAttribute("id", "calc-instructions-2");
                            calcInstructions2.setAttribute("class", "instructions-calc-txt");
                            calcInstructions2.textContent = "When using the 'chance to cast' system simply follow the instructions provided. Chance to cast is calculated through the skill level the character has in the selected school of magic the spell is associated with. Chance to cast is calculated based on the characters willpower, luck, skill in the relevant school of magic and cost of the spell itself.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions2); 
                    
                        var calcInstructions3 = document.createElement("p");
                            calcInstructions3.setAttribute("id", "calc-instructions-3");
                            calcInstructions3.setAttribute("class", "instructions-calc-txt");
                            calcInstructions3.textContent = "The melee attack values are determined through a selection of the three dropdown menus, 'weapons', 'armour' and 'condition'. The higher the condition of a weapon the stronger the weapon attack. Damage with a weapon as well as the protection value of a piece of armour is determined by the items base values as well as the characters proficiency with the skill governing that item. So, a higher long blade skill would lead to a stronger longsword attack damage. To calculate a character’s damage with a weapon the enemies armour values are taken into account which is reflected within this calculator through the characters own armour value. This means that if the user wishes to test their attack damage against a character with specific armour values, they must alter the armour skill values of their own character to achieve it.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions3); 
                    
                        var calcInstructions4 = document.createElement("p");
                            calcInstructions4.setAttribute("id", "calc-instructions-4");
                            calcInstructions4.setAttribute("class", "instructions-calc-txt");
                            calcInstructions4.textContent = "Character health is calculated based upon the characters current level. From level one to two the base health is established from the characters endurance and strength values. Following this the health will increase by 10% of the characters endurance attribute per level.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions4);      
            
                        var calcInstructions5 = document.createElement("p");
                            calcInstructions5.setAttribute("id", "calc-instructions-5");
                            calcInstructions5.setAttribute("class", "instructions-calc-txt");
                            calcInstructions5.textContent = "A character’s level is increased through increasing the skill points of one of the five major or five minor skills. A characters major and minor skills are determined via their class selection. Whenever the character has increased their skill points by ten throughout any of these selected skills a level will be gained. Levelling of any other skills will not count towards the characters level.";
                        
                    calculatorInstructionsParent.appendChild(calcInstructions5);
                    
                    var initialCharacterInformation = document.createElement("div");
                        initialCharacterInformation.setAttribute("id", "initial-character-information");
                        
                calculatorParent.appendChild(initialCharacterInformation);
                
                        var characterNameParent = document.createElement("div");
                            characterNameParent.setAttribute("id", "character-name-parent");
                            
                        initialCharacterInformation.appendChild(characterNameParent);
                        
                            var characterNameDisplay = document.createElement("div");
                                characterNameDisplay.setAttribute("id", "character-name-display");
                    
                            characterNameParent.appendChild(characterNameDisplay);
                            
                                var cName = document.createElement("p");
                                    cName.setAttribute("id", "cName");
                                    cName.textContent = "Character Name:";
                                    
                                characterNameDisplay.appendChild(cName);
                                
                            var characterNameInputDiv = document.createElement("div");
                                characterNameInputDiv.setAttribute("id", "character-name-input");
                                
                            characterNameParent.appendChild(characterNameInputDiv);
                            
                                var characterNameInput = document.createElement("input");
                                    characterNameInput.setAttribute("type", "text");
                                    characterNameInput.setAttribute("id", "characterNameInput");
                                    
                                characterNameInputDiv.appendChild(characterNameInput); 
                                    
                            var genderSelect = document.createElement("div");
                                genderSelect.setAttribute("id", "gender-select");
                                
                        initialCharacterInformation.appendChild(genderSelect);
                            
                                var genderInstruction = document.createElement("div");
                                    genderInstruction.setAttribute("id", "gender-instruction");
                                    
                            genderSelect.appendChild(genderInstruction);
                            
                                    var genderTxt = document.createElement("p");
                                        genderTxt.setAttribute("id", "gender-txt");
                                        genderTxt.textContent = "Select Gender:";
                                        
                                genderInstruction.appendChild(genderTxt); 
                                
                            var genderParent = document.createElement("div");
                                genderParent.setAttribute("id", "gender-parent");
                                
                        initialCharacterInformation.appendChild(genderParent);
                                
                                var genderMale = document.createElement("div");
                                    genderMale.setAttribute("id", "gender-male");
                                    
                                genderParent.appendChild(genderMale);
                                
                                    var selectMaleInput = document.createElement("input");
                                        selectMaleInput.setAttribute("id", "select-male");
                                        selectMaleInput.setAttribute("type", "submit");
                                        selectMaleInput.setAttribute("value", "male");
                                        selectMaleInput.setAttribute("class", "selection-btn");
                                        
                                    genderMale.appendChild(selectMaleInput);
                                    
                                var genderFemale = document.createElement("div");
                                    genderFemale.setAttribute("id", "gender-female");
                                    
                                genderParent.appendChild(genderFemale);
                                
                                    var selectFemaleInput = document.createElement("input");
                                        selectFemaleInput.setAttribute("id", "select-female");
                                        selectFemaleInput.setAttribute("type", "submit");
                                        selectFemaleInput.setAttribute("value", "female");
                                        selectFemaleInput.setAttribute("class", "selection-btn");
                                        
                                    genderFemale.appendChild(selectFemaleInput);
                                    
                            var raceSelect = document.createElement("div");
                                raceSelect.setAttribute("id", "race-select");
                                
                        initialCharacterInformation.appendChild(raceSelect);
                        
                                var raceInstruction = document.createElement("div");
                                    raceInstruction.setAttribute("id", "race-instruction");
                                    
                                raceSelect.appendChild(raceInstruction);
                                
                                    var raceTxt = document.createElement("p");
                                        raceTxt.setAttribute("id", "race-txt");
                                        raceTxt.textContent = "Select Race:";
                                        
                                    raceInstruction.appendChild(raceTxt);
                                    
                                var raceRow1 = document.createElement("div");
                                    raceRow1.setAttribute("id", "race-row-1");
                                    
                                raceSelect.appendChild(raceRow1);
                            
                                    var raceSelectArgonian = document.createElement("div");
                                        raceSelectArgonian.setAttribute("id", "race-select-argonian");
                                        
                                    raceRow1.appendChild(raceSelectArgonian);
                                    
                                        var argonianInput = document.createElement("input");
                                            argonianInput.setAttribute("type", "submit");
                                            argonianInput.setAttribute("id", "argonian");
                                            argonianInput.setAttribute("value", "argonian");
                                            argonianInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectArgonian.appendChild(argonianInput);
                                        
                                    var raceSelectBreton = document.createElement("div");
                                        raceSelectBreton.setAttribute("id", "race-select-breton");
                                        raceSelectBreton.setAttribute("class", "button-gap");
                                        
                                    raceRow1.appendChild(raceSelectBreton);
                                    
                                        var bretonInput = document.createElement("input");
                                            bretonInput.setAttribute("type", "submit");
                                            bretonInput.setAttribute("id", "breton");
                                            bretonInput.setAttribute("value", "breton");
                                            bretonInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectBreton.appendChild(bretonInput);
                                        
                                    var raceSelectDarkElf = document.createElement("div");
                                        raceSelectDarkElf.setAttribute("id", "race-select-dark-elf");
                                        raceSelectDarkElf.setAttribute("class", "button-gap");
                                        
                                    raceRow1.appendChild(raceSelectDarkElf);
                                    
                                        var darkElfInput = document.createElement("input");
                                            darkElfInput.setAttribute("type", "submit");
                                            darkElfInput.setAttribute("id", "dark-elf");
                                            darkElfInput.setAttribute("value", "dark-elf");
                                            darkElfInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectDarkElf.appendChild(darkElfInput);
                                        
                                var raceRow2 = document.createElement("div");
                                    raceRow2.setAttribute("id", "race-row-2");
                                    
                                raceSelect.appendChild(raceRow2);
                            
                                    var raceSelectHighElf = document.createElement("div");
                                        raceSelectHighElf.setAttribute("id", "race-select-high-elf");
                                        
                                    raceRow2.appendChild(raceSelectHighElf);
                                    
                                        var highElfInput = document.createElement("input");
                                            highElfInput.setAttribute("type", "submit");
                                            highElfInput.setAttribute("id", "high-elf");
                                            highElfInput.setAttribute("value", "high-elf");
                                            highElfInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectHighElf.appendChild(highElfInput);
                                        
                                    var raceSelectImperial = document.createElement("div");
                                        raceSelectImperial.setAttribute("id", "race-select-imperial");
                                        raceSelectImperial.setAttribute("class", "button-gap");
                                        
                                    raceRow2.appendChild(raceSelectImperial);
                                    
                                        var imperialInput = document.createElement("input");
                                            imperialInput.setAttribute("type", "submit");
                                            imperialInput.setAttribute("id", "imperial");
                                            imperialInput.setAttribute("value", "imperial");
                                            imperialInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectImperial.appendChild(imperialInput);
                                        
                                    var raceSelectKhajiit = document.createElement("div");
                                        raceSelectKhajiit.setAttribute("id", "race-select-khajiit");
                                        raceSelectKhajiit.setAttribute("class", "button-gap");
                                        
                                    raceRow2.appendChild(raceSelectKhajiit);
                                    
                                        var khajiitInput = document.createElement("input");
                                            khajiitInput.setAttribute("type", "submit");
                                            khajiitInput.setAttribute("id", "khajiit");
                                            khajiitInput.setAttribute("value", "khajiit");
                                            khajiitInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectKhajiit.appendChild(khajiitInput);
                                
                                var raceRow3 = document.createElement("div");
                                    raceRow3.setAttribute("id", "race-row-3");
                                    
                                raceSelect.appendChild(raceRow3);
                            
                                    var raceSelectNord = document.createElement("div");
                                        raceSelectNord.setAttribute("id", "race-select-nord");
                                        
                                    raceRow3.appendChild(raceSelectNord);
                                    
                                        var nordInput = document.createElement("input");
                                            nordInput.setAttribute("type", "submit");
                                            nordInput.setAttribute("id", "nord");
                                            nordInput.setAttribute("value", "nord");
                                            nordInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectNord.appendChild(nordInput);
                                        
                                    var raceSelectOrc = document.createElement("div");
                                        raceSelectOrc.setAttribute("id", "race-select-orc");
                                        raceSelectOrc.setAttribute("class", "button-gap");
                                        
                                    raceRow3.appendChild(raceSelectOrc);
                                    
                                        var orcInput = document.createElement("input");
                                            orcInput.setAttribute("type", "submit");
                                            orcInput.setAttribute("id", "orc");
                                            orcInput.setAttribute("value", "orc");
                                            orcInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectOrc.appendChild(orcInput);
                                        
                                    var raceSelectRedguard = document.createElement("div");
                                        raceSelectRedguard.setAttribute("id", "race-select-redguard");
                                        raceSelectRedguard.setAttribute("class", "button-gap");
                                        
                                    raceRow3.appendChild(raceSelectRedguard);
                                    
                                        var redguardInput = document.createElement("input");
                                            redguardInput.setAttribute("type", "submit");
                                            redguardInput.setAttribute("id", "redguard");
                                            redguardInput.setAttribute("value", "redguard");
                                            redguardInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectRedguard.appendChild(redguardInput);    
                                        
                                    var raceSelectWoodElf = document.createElement("div");
                                        raceSelectWoodElf.setAttribute("id", "race-select-wood-elf");
                                        raceSelectWoodElf.setAttribute("class", "button-gap");
                                        
                                    raceRow3.appendChild(raceSelectWoodElf);
                                    
                                        var woodElfInput = document.createElement("input");
                                            woodElfInput.setAttribute("type", "submit");
                                            woodElfInput.setAttribute("id", "wood-elf");
                                            woodElfInput.setAttribute("value", "wood-elf");
                                            woodElfInput.setAttribute("class", "selection-btn");
                                            
                                        raceSelectWoodElf.appendChild(woodElfInput); 
                                        
                    var secondaryCharacterInformation = document.createElement("div");
                        secondaryCharacterInformation.setAttribute("id", "secondary-character-information");
                    
                calculatorParent.appendChild(secondaryCharacterInformation);
                        
                        var classSelectDiv = document.createElement("div");    
                            classSelectDiv.setAttribute("id", "class-select");
                            
                        secondaryCharacterInformation.appendChild(classSelectDiv);
                        
                            var classInstruction = document.createElement("div");
                                classInstruction.setAttribute("id", "class-instruction");
                                
                            classSelectDiv.appendChild(classInstruction);
                            
                                var classTxt = document.createElement("p");
                                    classTxt.setAttribute("id", "class-txt");
                                    classTxt.textContent = "Select Class:";
                                    
                                classInstruction.appendChild(classTxt);
                                
                            var classRow1 = document.createElement("div");
                                classRow1.setAttribute("id", "class-row-1");
                                
                            classSelectDiv.appendChild(classRow1);
                            
                                var acrobaticClassSelect = document.createElement("div");
                                    acrobaticClassSelect.setAttribute("id", "acrobatic-class-select");
                                    
                                classRow1.appendChild(acrobaticClassSelect);
                                
                                    var acrobatClassInput = document.createElement("input");
                                        acrobatClassInput.setAttribute("type", "submit");
                                        acrobatClassInput.setAttribute("id", "acrobat-class");
                                        acrobatClassInput.setAttribute("value", "acrobat");
                                        acrobatClassInput.setAttribute("class", "selection-btn");
                                        
                                    acrobaticClassSelect.appendChild(acrobatClassInput);
                                
                                var agentClassSelect = document.createElement("div");
                                    agentClassSelect.setAttribute("id", "agent-class-select");
                                    agentClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow1.appendChild(agentClassSelect);
                                
                                    var agentClassInput = document.createElement("input");
                                        agentClassInput.setAttribute("type", "submit");
                                        agentClassInput.setAttribute("id", "agent-class");
                                        agentClassInput.setAttribute("value", "agent");
                                        agentClassInput.setAttribute("class", "selection-btn");
                                        
                                    agentClassSelect.appendChild(agentClassInput);  
                                    
                                var archerClassSelect = document.createElement("div");
                                    archerClassSelect.setAttribute("id", "archer-class-select");
                                    archerClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow1.appendChild(archerClassSelect);
                                
                                    var archerClassInput = document.createElement("input");
                                        archerClassInput.setAttribute("type", "submit");
                                        archerClassInput.setAttribute("id", "archer-class");
                                        archerClassInput.setAttribute("value", "archer");
                                        archerClassInput.setAttribute("class", "selection-btn");
                                        
                                    archerClassSelect.appendChild(archerClassInput);   
                                    
                                var assasinClassSelect = document.createElement("div");
                                    assasinClassSelect.setAttribute("id", "assasin-class-select");
                                    assasinClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow1.appendChild(assasinClassSelect);
                                
                                    var assasinClassInput = document.createElement("input");
                                        assasinClassInput.setAttribute("type", "submit");
                                        assasinClassInput.setAttribute("id", "assasin-class");
                                        assasinClassInput.setAttribute("value", "assasin");
                                        assasinClassInput.setAttribute("class", "selection-btn");
                                        
                                    assasinClassSelect.appendChild(assasinClassInput);   
                            
                            var classRow2 = document.createElement("div");
                                classRow2.setAttribute("id", "class-row-2");
                                
                            classSelectDiv.appendChild(classRow2);
                            
                                var barbarianClassSelect = document.createElement("div");
                                    barbarianClassSelect.setAttribute("id", "barbarian-class-select");
                                    
                                classRow2.appendChild(barbarianClassSelect);
                                
                                    var barbarianClassInput = document.createElement("input");
                                        barbarianClassInput.setAttribute("type", "submit");
                                        barbarianClassInput.setAttribute("id", "barbarian-class");
                                        barbarianClassInput.setAttribute("value", "barbarian");
                                        barbarianClassInput.setAttribute("class", "selection-btn");
                                        
                                    barbarianClassSelect.appendChild(barbarianClassInput);
                                
                                var bardClassSelect = document.createElement("div");
                                    bardClassSelect.setAttribute("id", "bard-class-select");
                                    bardClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow2.appendChild(bardClassSelect);
                                
                                    var bardClassInput = document.createElement("input");
                                        bardClassInput.setAttribute("type", "submit");
                                        bardClassInput.setAttribute("id", "bard-class");
                                        bardClassInput.setAttribute("value", "bard");
                                        bardClassInput.setAttribute("class", "selection-btn");
                                        
                                    bardClassSelect.appendChild(bardClassInput);  
                                    
                                var battlemageClassSelect = document.createElement("div");
                                    battlemageClassSelect.setAttribute("id", "battlemage-class-select");
                                    battlemageClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow2.appendChild(battlemageClassSelect);
                                
                                    var battlemageClassInput = document.createElement("input");
                                        battlemageClassInput.setAttribute("type", "submit");
                                        battlemageClassInput.setAttribute("id", "battlemage-class");
                                        battlemageClassInput.setAttribute("value", "battlemage");
                                        battlemageClassInput.setAttribute("class", "selection-btn");
                                        
                                    battlemageClassSelect.appendChild(battlemageClassInput);   
                                    
                                var crusaderClassSelect = document.createElement("div");
                                    crusaderClassSelect.setAttribute("id", "crusader-class-select");
                                    crusaderClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow2.appendChild(crusaderClassSelect);
                                
                                    var crusaderClassInput = document.createElement("input");
                                        crusaderClassInput.setAttribute("type", "submit");
                                        crusaderClassInput.setAttribute("id", "crusader-class");
                                        crusaderClassInput.setAttribute("value", "crusader");
                                        crusaderClassInput.setAttribute("class", "selection-btn");
                                        
                                    crusaderClassSelect.appendChild(crusaderClassInput);   
                    
                            var classRow3 = document.createElement("div");
                                classRow3.setAttribute("id", "class-row-3");
                                
                            classSelectDiv.appendChild(classRow3);
                            
                                var healerClassSelect = document.createElement("div");
                                    healerClassSelect.setAttribute("id", "healer-class-select");
                                    
                                classRow3.appendChild(healerClassSelect);
                                
                                    var healerClassInput = document.createElement("input");
                                        healerClassInput.setAttribute("type", "submit");
                                        healerClassInput.setAttribute("id", "healer-class");
                                        healerClassInput.setAttribute("value", "healer");
                                        healerClassInput.setAttribute("class", "selection-btn");
                                        
                                    healerClassSelect.appendChild(healerClassInput);
                                
                                var knightClassSelect = document.createElement("div");
                                    knightClassSelect.setAttribute("id", "knight-class-select");
                                    knightClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow3.appendChild(knightClassSelect);
                                
                                    var knightClassInput = document.createElement("input");
                                        knightClassInput.setAttribute("type", "submit");
                                        knightClassInput.setAttribute("id", "knight-class");
                                        knightClassInput.setAttribute("value", "knight");
                                        knightClassInput.setAttribute("class", "selection-btn");
                                        
                                    knightClassSelect.appendChild(knightClassInput);  
                                    
                                var mageClassSelect = document.createElement("div");
                                    mageClassSelect.setAttribute("id", "mage-class-select");
                                    mageClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow3.appendChild(mageClassSelect);
                                
                                    var mageClassInput = document.createElement("input");
                                        mageClassInput.setAttribute("type", "submit");
                                        mageClassInput.setAttribute("id", "mage-class");
                                        mageClassInput.setAttribute("value", "mage");
                                        mageClassInput.setAttribute("class", "selection-btn");
                                        
                                    mageClassSelect.appendChild(mageClassInput);   
                                    
                                var monkClassSelect = document.createElement("div");
                                    monkClassSelect.setAttribute("id", "monk-class-select");
                                    monkClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow3.appendChild(monkClassSelect);
                                
                                    var monkClassInput = document.createElement("input");
                                        monkClassInput.setAttribute("type", "submit");
                                        monkClassInput.setAttribute("id", "monk-class");
                                        monkClassInput.setAttribute("value", "monk");
                                        monkClassInput.setAttribute("class", "selection-btn");
                                        
                                    monkClassSelect.appendChild(monkClassInput);
                                    
                            var classRow4 = document.createElement("div");
                                classRow4.setAttribute("id", "class-row-4");
                                
                            classSelectDiv.appendChild(classRow4);
                            
                                var nightbladeClassSelect = document.createElement("div");
                                    nightbladeClassSelect.setAttribute("id", "nightblade-class-select");
                                    
                                classRow4.appendChild(nightbladeClassSelect);
                                
                                    var nightbladeClassInput = document.createElement("input");
                                        nightbladeClassInput.setAttribute("type", "submit");
                                        nightbladeClassInput.setAttribute("id", "nightblade-class");
                                        nightbladeClassInput.setAttribute("value", "nightblade");
                                        nightbladeClassInput.setAttribute("class", "selection-btn");
                                        
                                    nightbladeClassSelect.appendChild(nightbladeClassInput);
                                
                                var pilgrimClassSelect = document.createElement("div");
                                    pilgrimClassSelect.setAttribute("id", "pilgrim-class-select");
                                    pilgrimClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow4.appendChild(pilgrimClassSelect);
                                
                                    var pilgrimClassInput = document.createElement("input");
                                        pilgrimClassInput.setAttribute("type", "submit");
                                        pilgrimClassInput.setAttribute("id", "pilgrim-class");
                                        pilgrimClassInput.setAttribute("value", "pilgrim");
                                        pilgrimClassInput.setAttribute("class", "selection-btn");
                                        
                                    pilgrimClassSelect.appendChild(pilgrimClassInput);  
                                    
                                var rogueClassSelect = document.createElement("div");
                                    rogueClassSelect.setAttribute("id", "rogue-class-select");
                                    rogueClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow4.appendChild(rogueClassSelect);
                                
                                    var rogueClassInput = document.createElement("input");
                                        rogueClassInput.setAttribute("type", "submit");
                                        rogueClassInput.setAttribute("id", "rogue-class");
                                        rogueClassInput.setAttribute("value", "rogue");
                                        rogueClassInput.setAttribute("class", "selection-btn");
                                        
                                    rogueClassSelect.appendChild(rogueClassInput);   
                                    
                                var scoutClassSelect = document.createElement("div");
                                    scoutClassSelect.setAttribute("id", "scout-class-select");
                                    scoutClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow4.appendChild(scoutClassSelect);
                                
                                    var scoutClassInput = document.createElement("input");
                                        scoutClassInput.setAttribute("type", "submit");
                                        scoutClassInput.setAttribute("id", "scout-class");
                                        scoutClassInput.setAttribute("value", "scout");
                                        scoutClassInput.setAttribute("class", "selection-btn");
                                        
                                    scoutClassSelect.appendChild(scoutClassInput);
                    
                            var classRow5 = document.createElement("div");
                                classRow5.setAttribute("id", "class-row-5");
                                
                            classSelectDiv.appendChild(classRow5);
                            
                                var sorcererClassSelect = document.createElement("div");
                                    sorcererClassSelect.setAttribute("id", "sorcerer-class-select");
                                    
                                classRow5.appendChild(sorcererClassSelect);
                                
                                    var sorcererClassInput = document.createElement("input");
                                        sorcererClassInput.setAttribute("type", "submit");
                                        sorcererClassInput.setAttribute("id", "sorcerer-class");
                                        sorcererClassInput.setAttribute("value", "sorcerer");
                                        sorcererClassInput.setAttribute("class", "selection-btn");
                                        
                                    sorcererClassSelect.appendChild(sorcererClassInput);
                                
                                var spellswordClassSelect = document.createElement("div");
                                    spellswordClassSelect.setAttribute("id", "spellsword-class-select");
                                    spellswordClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow5.appendChild(spellswordClassSelect);
                                
                                    var spellswordClassInput = document.createElement("input");
                                        spellswordClassInput.setAttribute("type", "submit");
                                        spellswordClassInput.setAttribute("id", "spellsword-class");
                                        spellswordClassInput.setAttribute("value", "spellsword");
                                        spellswordClassInput.setAttribute("class", "selection-btn");
                                        
                                    spellswordClassSelect.appendChild(spellswordClassInput);  
                                    
                                var thiefClassSelect = document.createElement("div");
                                    thiefClassSelect.setAttribute("id", "thief-class-select");
                                    thiefClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow5.appendChild(thiefClassSelect);
                                
                                    var thiefClassInput = document.createElement("input");
                                        thiefClassInput.setAttribute("type", "submit");
                                        thiefClassInput.setAttribute("id", "thief-class");
                                        thiefClassInput.setAttribute("value", "thief");
                                        thiefClassInput.setAttribute("class", "selection-btn");
                                        
                                    thiefClassSelect.appendChild(thiefClassInput);   
                                    
                                var warriorClassSelect = document.createElement("div");
                                    warriorClassSelect.setAttribute("id", "warrior-class-select");
                                    warriorClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow5.appendChild(warriorClassSelect);
                                
                                    var warriorClassInput = document.createElement("input");
                                        warriorClassInput.setAttribute("type", "submit");
                                        warriorClassInput.setAttribute("id", "warrior-class");
                                        warriorClassInput.setAttribute("value", "warrior");
                                        warriorClassInput.setAttribute("class", "selection-btn");
                                        
                                    warriorClassSelect.appendChild(warriorClassInput);
                                    
                                var witchhunterClassSelect = document.createElement("div");
                                    witchhunterClassSelect.setAttribute("id", "witchhunter-class-select");
                                    witchhunterClassSelect.setAttribute("class", "button-gap");
                                    
                                classRow5.appendChild(witchhunterClassSelect);
                                
                                    var witchhunterClassInput = document.createElement("input");
                                        witchhunterClassInput.setAttribute("type", "submit");
                                        witchhunterClassInput.setAttribute("id", "witchhunter-class");
                                        witchhunterClassInput.setAttribute("value", "witchhunter");
                                        witchhunterClassInput.setAttribute("class", "selection-btn");
                                        
                                    witchhunterClassSelect.appendChild(witchhunterClassInput);
                        
                        var birthsignSelect = document.createElement("div");
                            birthsignSelect.setAttribute("id", "birthsign-select");
                            
                        secondaryCharacterInformation.appendChild(birthsignSelect);
                        
                            var birthsignInstruction = document.createElement("div");
                                birthsignInstruction.setAttribute("id", "birthsign-instruction");
                                
                            birthsignSelect.appendChild(birthsignInstruction);
                            
                                var birthsignTxt = document.createElement("p");
                                    birthsignTxt.setAttribute("id", "birthsign-txt");
                                    birthsignTxt.textContent = "Select Birthsign:";
                                    
                                birthsignInstruction.appendChild(birthsignTxt);
                                
                            var birthsignRow1 = document.createElement("div");
                                birthsignRow1.setAttribute("id", "birthsign-row-1");
                                
                            birthsignSelect.appendChild(birthsignRow1);
                            
                                var warriorBirthsignSelect = document.createElement("div");
                                    warriorBirthsignSelect.setAttribute("id", "warrior-birthsign-select");
                            
                                    
                                birthsignRow1.appendChild(warriorBirthsignSelect);
                                
                                    var theWarriorBirthsignInput = document.createElement("input");
                                        theWarriorBirthsignInput.setAttribute("type", "submit");
                                        theWarriorBirthsignInput.setAttribute("id", "the-warrior-birthsign");
                                        theWarriorBirthsignInput.setAttribute("value", "the-warrior");
                                        theWarriorBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    warriorBirthsignSelect.appendChild(theWarriorBirthsignInput);
                                    
                                var mageBirthsignSelect = document.createElement("div");
                                    mageBirthsignSelect.setAttribute("id", "mage-birthsign-select");
                                    mageBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow1.appendChild(mageBirthsignSelect);
                                
                                    var theMageBirthsignInput = document.createElement("input");
                                        theMageBirthsignInput.setAttribute("type", "submit");
                                        theMageBirthsignInput.setAttribute("id", "the-mage-birthsign");
                                        theMageBirthsignInput.setAttribute("value", "the-mage");
                                        theMageBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    mageBirthsignSelect.appendChild(theMageBirthsignInput);
                                    
                                var thiefBirthsignSelect = document.createElement("div");
                                    thiefBirthsignSelect.setAttribute("id", "thief-birthsign-select");
                                    thiefBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow1.appendChild(thiefBirthsignSelect);
                                
                                    var theThiefBirthsignInput = document.createElement("input");
                                        theThiefBirthsignInput.setAttribute("type", "submit");
                                        theThiefBirthsignInput.setAttribute("id", "the-thief-birthsign");
                                        theThiefBirthsignInput.setAttribute("value", "the-thief");
                                        theThiefBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    thiefBirthsignSelect.appendChild(theThiefBirthsignInput);
                                    
                                var serpantBirthsignSelect = document.createElement("div");
                                    serpantBirthsignSelect.setAttribute("id", "serpant-birthsign-select");
                                    serpantBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow1.appendChild(serpantBirthsignSelect);
                                
                                    var theSerpantBirthsignInput = document.createElement("input");
                                        theSerpantBirthsignInput.setAttribute("type", "submit");
                                        theSerpantBirthsignInput.setAttribute("id", "the-serpant-birthsign");
                                        theSerpantBirthsignInput.setAttribute("value", "the-serpant");
                                        theSerpantBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    serpantBirthsignSelect.appendChild(theSerpantBirthsignInput);
                                    
                            var birthsignRow2 = document.createElement("div");
                                birthsignRow2.setAttribute("id", "birthsign-row-2");
                                
                            birthsignSelect.appendChild(birthsignRow2);
                            
                                var ladyBirthsignSelect = document.createElement("div");
                                    ladyBirthsignSelect.setAttribute("id", "lady-birthsign-select");
                  
                                    
                                birthsignRow2.appendChild(ladyBirthsignSelect);
                                
                                    var theLadyBirthsignInput = document.createElement("input");
                                        theLadyBirthsignInput.setAttribute("type", "submit");
                                        theLadyBirthsignInput.setAttribute("id", "the-lady-birthsign");
                                        theLadyBirthsignInput.setAttribute("value", "the-lady");
                                        theLadyBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    ladyBirthsignSelect.appendChild(theLadyBirthsignInput);
                                    
                                var steedBirthsignSelect = document.createElement("div");
                                    steedBirthsignSelect.setAttribute("id", "steed-birthsign-select");
                                    steedBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow2.appendChild(steedBirthsignSelect);
                                
                                    var theSteedBirthsignInput = document.createElement("input");
                                        theSteedBirthsignInput.setAttribute("type", "submit");
                                        theSteedBirthsignInput.setAttribute("id", "the-steed-birthsign");
                                        theSteedBirthsignInput.setAttribute("value", "the-steed");
                                        theSteedBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    steedBirthsignSelect.appendChild(theSteedBirthsignInput);
                                    
                                var lordBirthsignSelect = document.createElement("div");
                                    lordBirthsignSelect.setAttribute("id", "lord-birthsign-select");
                                    lordBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow2.appendChild(lordBirthsignSelect);
                                
                                    var theLordBirthsignInput = document.createElement("input");
                                        theLordBirthsignInput.setAttribute("type", "submit");
                                        theLordBirthsignInput.setAttribute("id", "the-lord-birthsign");
                                        theLordBirthsignInput.setAttribute("value", "the-lord");
                                        theLordBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    lordBirthsignSelect.appendChild(theLordBirthsignInput);
                                    
                                var apprenticeBirthsignSelect = document.createElement("div");
                                    apprenticeBirthsignSelect.setAttribute("id", "apprentice-birthsign-select");
                                    apprenticeBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow2.appendChild(apprenticeBirthsignSelect);
                                
                                    var theApprenticeBirthsignInput = document.createElement("input");
                                        theApprenticeBirthsignInput.setAttribute("type", "submit");
                                        theApprenticeBirthsignInput.setAttribute("id", "the-apprentice-birthsign");
                                        theApprenticeBirthsignInput.setAttribute("value", "the-apprentice");
                                        theApprenticeBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    apprenticeBirthsignSelect.appendChild(theApprenticeBirthsignInput);
                                    
                            var birthsignRow3 = document.createElement("div");
                                birthsignRow3.setAttribute("id", "birthsign-row-3");
                                
                            birthsignSelect.appendChild(birthsignRow3);
                            
                                var antronachBirthsignSelect = document.createElement("div");
                                    antronachBirthsignSelect.setAttribute("id", "antronach-birthsign-select");
        
                                    
                                birthsignRow3.appendChild(antronachBirthsignSelect);
                                
                                    var theAntronachBirthsignInput = document.createElement("input");
                                        theAntronachBirthsignInput.setAttribute("type", "submit");
                                        theAntronachBirthsignInput.setAttribute("id", "the-antronach-birthsign");
                                        theAntronachBirthsignInput.setAttribute("value", "the-antronach");
                                        theAntronachBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    antronachBirthsignSelect.appendChild(theAntronachBirthsignInput);
                                    
                                var ritualBirthsignSelect = document.createElement("div");
                                    ritualBirthsignSelect.setAttribute("id", "ritual-birthsign-select");
                                    ritualBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow3.appendChild(ritualBirthsignSelect);
                                
                                    var theRitualBirthsignInput = document.createElement("input");
                                        theRitualBirthsignInput.setAttribute("type", "submit");
                                        theRitualBirthsignInput.setAttribute("id", "the-ritual-birthsign");
                                        theRitualBirthsignInput.setAttribute("value", "the-ritual");
                                        theRitualBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    ritualBirthsignSelect.appendChild(theRitualBirthsignInput);
                                    
                                var loverBirthsignSelect = document.createElement("div");
                                    loverBirthsignSelect.setAttribute("id", "lover-birthsign-select");
                                    loverBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow3.appendChild(loverBirthsignSelect);
                                
                                    var theLoverBirthsignInput = document.createElement("input");
                                        theLoverBirthsignInput.setAttribute("type", "submit");
                                        theLoverBirthsignInput.setAttribute("id", "the-lover-birthsign");
                                        theLoverBirthsignInput.setAttribute("value", "the-lover");
                                        theLoverBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    loverBirthsignSelect.appendChild(theLoverBirthsignInput);
                                    
                                var shadowBirthsignSelect = document.createElement("div");
                                    shadowBirthsignSelect.setAttribute("id", "shadow-birthsign-select");
                                    shadowBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow3.appendChild(shadowBirthsignSelect);
                                
                                    var theShadowBirthsignInput = document.createElement("input");
                                        theShadowBirthsignInput.setAttribute("type", "submit");
                                        theShadowBirthsignInput.setAttribute("id", "the-shadow-birthsign");
                                        theShadowBirthsignInput.setAttribute("value", "the-shadow");
                                        theShadowBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    shadowBirthsignSelect.appendChild(theShadowBirthsignInput);
                                    
                                var towerBirthsignSelect = document.createElement("div");
                                    towerBirthsignSelect.setAttribute("id", "tower-birthsign-select");
                                    towerBirthsignSelect.setAttribute("class", "button-gap");
                                    
                                birthsignRow3.appendChild(towerBirthsignSelect);
                                
                                    var theTowerBirthsignInput = document.createElement("input");
                                        theTowerBirthsignInput.setAttribute("type", "submit");
                                        theTowerBirthsignInput.setAttribute("id", "the-tower-birthsign");
                                        theTowerBirthsignInput.setAttribute("value", "the-tower");
                                        theTowerBirthsignInput.setAttribute("class", "selection-btn");
                                        
                                    towerBirthsignSelect.appendChild(theTowerBirthsignInput);   
                                    
                    var infoStats = document.createElement("div");
                        infoStats.setAttribute("id", "info-stats");
                    
                calculatorParent.appendChild(infoStats);
                    
                         var characterChoiceInformation = document.createElement("div");
                            characterChoiceInformation.setAttribute("id", "character-choice-information");
                            
                        infoStats.appendChild(characterChoiceInformation);
                        
                            var choiceInfoRow1 = document.createElement("div");
                                choiceInfoRow1.setAttribute("id", "choice-info-row1");
                                
                            characterChoiceInformation.appendChild(choiceInfoRow1);
                        
                                var genderInfo = document.createElement("div");
                                    genderInfo.setAttribute("id", "gender-info");
        
                                choiceInfoRow1.appendChild(genderInfo);
                                
                                    var genderDisplay = document.createElement("p");
                                        genderDisplay.setAttribute("id", "gender-display");
                                        genderDisplay.textContent = "Gender";
                                        
                                    genderInfo.appendChild(genderDisplay);
                                
                                var raceInfo = document.createElement("div");
                                    raceInfo.setAttribute("id", "race-info");
                                    
                                choiceInfoRow1.appendChild(raceInfo);
                                
                                    var raceDisplay = document.createElement("p");
                                        raceDisplay.setAttribute("id", "race-display");
                                        raceDisplay.textContent = "Race";
                                        
                                    raceInfo.appendChild(raceDisplay);
                                
                            var choiceInfoRow2 = document.createElement("div");
                                    choiceInfoRow2.setAttribute("id", "choice-info-row2");
                                    
                                characterChoiceInformation.appendChild(choiceInfoRow2);
                                
                                var birthsignInfo = document.createElement("div");
                                    birthsignInfo.setAttribute("id", "birthsign-info");
                                    
                                choiceInfoRow2.appendChild(birthsignInfo);
                                
                                    var birthsignDisplay = document.createElement("p");
                                        birthsignDisplay.setAttribute("id", "birthsign-display");
                                        birthsignDisplay.textContent = "Birthsign";
                                        
                                    birthsignInfo.appendChild(birthsignDisplay);
                                
                                var classInfo = document.createElement("div");
                                    classInfo.setAttribute("id", "class-info");
          
                                    
                                choiceInfoRow2.appendChild(classInfo);
                                
                                    var classDisplay = document.createElement("p");
                                        classDisplay.setAttribute("id", "class-display");
                                        classDisplay.textContent = "Class";
                                        
                                    classInfo.appendChild(classDisplay);
        
                        var statsTitle = document.createElement("div");
                            statsTitle.setAttribute("id", "stats-title");
                            
                        infoStats.appendChild(statsTitle);
                        
                            var statsTxt = document.createElement("p");
                                statsTxt.setAttribute("id", "stats-txt");
                                statsTxt.textContent = "Character stats";
                                
                            statsTitle.appendChild(statsTxt);
                            
                        var levelStats = document.createElement("div");
                            levelStats.setAttribute("id", "level-stats");
                            
                        infoStats.appendChild(levelStats);
                        
                            var levelDisplay = document.createElement("p");
                                levelDisplay.setAttribute("id", "level-display");
                                
                            levelStats.appendChild(levelDisplay);
                            
                        var mainStats = document.createElement("div");
                            mainStats.setAttribute("id", "main-stats");
                            
                        infoStats.appendChild(mainStats);
                        
                            var healthStat = document.createElement("div");
                                healthStat.setAttribute("id", "health-stat");
                                
                            mainStats.appendChild(healthStat);
                            
                                var healthDisplay = document.createElement("p");
                                    healthDisplay.setAttribute("id", "health-display");
                                    healthDisplay.textContent = "Health:";
                                    
                                healthStat.appendChild(healthDisplay);
                                
                            var magickaStat = document.createElement("div");
                                magickaStat.setAttribute("id", "magicka-stat");
                                
                            mainStats.appendChild(magickaStat);
                                
                                var magickaDisplay = document.createElement("p");
                                    magickaDisplay.setAttribute("id", "magicka-display");
                                    magickaDisplay.textContent = "Magicka:";
                                    
                                magickaStat.appendChild(magickaDisplay);
                                
                            var fatigueStat = document.createElement("div");
                                fatigueStat.setAttribute("id", "fatigue-stat");
                                
                            mainStats.appendChild(fatigueStat);
                            
                                var fatigueDisplay = document.createElement("p");
                                    fatigueDisplay.setAttribute("id", "fatigue-display");
                                    fatigueDisplay.textContent = "Fatigue:";
                                    
                                fatigueStat.appendChild(fatigueDisplay);
                        
                        var secondaryStats = document.createElement("div");
                            secondaryStats.setAttribute("id", "secondary-stats");
                            
                        infoStats.appendChild(secondaryStats);
                        
                            var encumbranceStat = document.createElement("div");
                                encumbranceStat.setAttribute("id", "encumbrance-stat");
                                
                            secondaryStats.appendChild(encumbranceStat);
                            
                                var encumbranceDisplay = document.createElement("p");
                                    encumbranceDisplay.setAttribute("id", "encumbrance-display");
                                    
                                encumbranceStat.appendChild(encumbranceDisplay);
                                
                            var resistRow1 = document.createElement("div");
                                resistRow1.setAttribute("id", "resist-row-1");
                                
                            secondaryStats.appendChild(resistRow1);
                            
                                var resistMagickaStat = document.createElement("div");
                                    resistMagickaStat.setAttribute("id", "resist-magicka-stat");
                                    
                                resistRow1.appendChild(resistMagickaStat);
                                
                                    var resistMagickaDisplay = document.createElement("p");
                                        resistMagickaDisplay.setAttribute("id", "resist-magicka-display");
                                        resistMagickaDisplay.textContent = "Magicka damage resistance:";
                                        
                                    resistMagickaStat.appendChild(resistMagickaDisplay);
                                    
                                var resistFireStat = document.createElement("div");
                                    resistFireStat.setAttribute("id", "resist-fire-stat");
                                    
                                resistRow1.appendChild(resistFireStat);
                                
                                    var resistFireDisplay = document.createElement("p");
                                        resistFireDisplay.setAttribute("id", "resist-fire-display");
                                        resistFireDisplay.textContent = "Fire damage resistance:";
                                        
                                    resistFireStat.appendChild(resistFireDisplay);
                                    
                            var resistRow2 = document.createElement("div");
                                resistRow2.setAttribute("id", "resist-row-2");
                                
                            secondaryStats.appendChild(resistRow2);
                            
                                var resistFrostStat = document.createElement("div");
                                    resistFrostStat.setAttribute("id", "resist-frost-stat");
                                    
                                resistRow2.appendChild(resistFrostStat);
                                
                                    var resistFrostDisplay = document.createElement("p");
                                        resistFrostDisplay.setAttribute("id", "resist-frost-display");
                                        resistFrostDisplay.textContent = "Frost damage resistance:";
                                        
                                    resistFrostStat.appendChild(resistFrostDisplay);
                                    
                                var resistShockStat = document.createElement("div");
                                    resistShockStat.setAttribute("id", "resist-shock-stat");
                                    
                                resistRow2.appendChild(resistShockStat);
                                
                                    var resistShockDisplay = document.createElement("p");
                                        resistShockDisplay.setAttribute("id", "resist-shock-display");
                                        resistShockDisplay.textContent = "Shock damage resistance:";
                                        
                                    resistShockStat.appendChild(resistShockDisplay);
                                    
                            var resistRow3 = document.createElement("div");
                                resistRow3.setAttribute("id", "resist-row-3");
                                
                            secondaryStats.appendChild(resistRow3);
                            
                                var resistPoisonStat = document.createElement("div");
                                    resistPoisonStat.setAttribute("id", "resist-poison-stat");
                                    
                                resistRow3.appendChild(resistPoisonStat);
                                
                                    var resistPoisonDisplay = document.createElement("p");
                                        resistPoisonDisplay.setAttribute("id", "resist-poison-display");
                                        resistPoisonDisplay.textContent = "Poison damage resistance:";
                                        
                                    resistPoisonStat.appendChild(resistPoisonDisplay);
                                    
                                var resistCommonDiseaseStat = document.createElement("div");
                                    resistCommonDiseaseStat.setAttribute("id", "resist-common-disease-stat");
                                    
                                resistRow3.appendChild(resistCommonDiseaseStat);
                                
                                    var resistCommonDiseaseDisplay = document.createElement("p");
                                        resistCommonDiseaseDisplay.setAttribute("id", "resist-common-disease-display");
                                        resistCommonDiseaseDisplay.textContent = "Common disease resistance:";
                                        
                                    resistCommonDiseaseStat.appendChild(resistCommonDiseaseDisplay);
                                    
                    var spellStats = document.createElement("div");
                        spellStats.setAttribute("id", "spell-stats");
                        
                calculatorParent.appendChild(spellStats);
                
                        var spellStatInstructions = document.createElement("div");
                            spellStatInstructions.setAttribute("id", "spell-stat-instructions");
                            
                        spellStats.appendChild(spellStatInstructions);
                        
                            var spellStatInstructionsTxt = document.createElement("p");
                                spellStatInstructionsTxt.setAttribute("id", "spell-stat-instructions-txt");
                                spellStatInstructionsTxt.textContent = "To calculate a spells chance to hit, select the school of magic then input the cost of the spell.";
                                
                            spellStatInstructions.appendChild(spellStatInstructionsTxt);
                            
                        var spellStatSelections = document.createElement("div");
                            spellStatSelections.setAttribute("id", "spell-stat-selections");
                            
                        spellStats.appendChild(spellStatSelections);
                        
                            var spellStatRow = document.createElement("div");
                                spellStatRow.setAttribute("id", "spell-stat-row");
                                
                            spellStatSelections.appendChild(spellStatRow);
                            
                                var spellStatRestorationSelect = document.createElement("div");
                                    spellStatRestorationSelect.setAttribute("id", "spell-stat-restoration-select");
                                    spellStatRestorationSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatRestorationSelect);
                                
                                    var spellSkillRestorationInput = document.createElement("input");
                                        spellSkillRestorationInput.setAttribute("type", "submit");
                                        spellSkillRestorationInput.setAttribute("id", "spell-skill-restoration");
                                        spellSkillRestorationInput.setAttribute("name", "restoration");
                                        spellSkillRestorationInput.setAttribute("value", "restoration");
                                        spellSkillRestorationInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatRestorationSelect.appendChild(spellSkillRestorationInput);
                                    
                                var spellStatAlterationSelect = document.createElement("div");
                                    spellStatAlterationSelect.setAttribute("id", "spell-stat-alteration-select");
                                    spellStatAlterationSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatAlterationSelect);
                                
                                    var spellSkillAlterationInput = document.createElement("input");
                                        spellSkillAlterationInput.setAttribute("type", "submit");
                                        spellSkillAlterationInput.setAttribute("id", "spell-skill-alteration");
                                        spellSkillAlterationInput.setAttribute("name", "alteration");
                                        spellSkillAlterationInput.setAttribute("value", "alteration");
                                        spellSkillAlterationInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatAlterationSelect.appendChild(spellSkillAlterationInput);
                                    
                                var spellStatMysticismSelect = document.createElement("div");
                                    spellStatMysticismSelect.setAttribute("id", "spell-stat-mysticism-select");
                                    spellStatMysticismSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatMysticismSelect);
                                
                                    var spellSkillMysticismInput = document.createElement("input");
                                        spellSkillMysticismInput.setAttribute("type", "submit");
                                        spellSkillMysticismInput.setAttribute("id", "spell-skill-mysticism");
                                        spellSkillMysticismInput.setAttribute("name", "mysticism");
                                        spellSkillMysticismInput.setAttribute("value", "mysticism");
                                        spellSkillMysticismInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatMysticismSelect.appendChild(spellSkillMysticismInput);
                                    
                                var spellStatIllusionSelect = document.createElement("div");
                                    spellStatIllusionSelect.setAttribute("id", "spell-stat-illusion-select");
                                    spellStatIllusionSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatIllusionSelect);
                                
                                    var spellSkillIllusionInput = document.createElement("input");
                                        spellSkillIllusionInput.setAttribute("type", "submit");
                                        spellSkillIllusionInput.setAttribute("id", "spell-skill-illusion");
                                        spellSkillIllusionInput.setAttribute("name", "illusion");
                                        spellSkillIllusionInput.setAttribute("value", "illusion");
                                        spellSkillIllusionInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatIllusionSelect.appendChild(spellSkillIllusionInput); 
                                    
                                var spellStatConjurationSelect = document.createElement("div");
                                    spellStatConjurationSelect.setAttribute("id", "spell-stat-conjuration-select");
                                    spellStatConjurationSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatConjurationSelect);
                                
                                    var spellSkillConjurationInput = document.createElement("input");
                                        spellSkillConjurationInput.setAttribute("type", "submit");
                                        spellSkillConjurationInput.setAttribute("id", "spell-skill-conjuration");
                                        spellSkillConjurationInput.setAttribute("name", "conjuration");
                                        spellSkillConjurationInput.setAttribute("value", "conjuration");
                                        spellSkillConjurationInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatConjurationSelect.appendChild(spellSkillConjurationInput); 
                                    
                                var spellStatDestructionSelect = document.createElement("div");
                                    spellStatDestructionSelect.setAttribute("id", "spell-stat-destruction-select");
                                    spellStatDestructionSelect.setAttribute("class", "spell-stat-button-gap");
                                    
                                spellStatRow.appendChild(spellStatDestructionSelect);
                                
                                    var spellSkillDestructionInput = document.createElement("input");
                                        spellSkillDestructionInput.setAttribute("type", "submit");
                                        spellSkillDestructionInput.setAttribute("id", "spell-skill-destruction");
                                        spellSkillDestructionInput.setAttribute("name", "destruction");
                                        spellSkillDestructionInput.setAttribute("value", "destruction");
                                        spellSkillDestructionInput.setAttribute("class", "selection-btn");
                                        
                                    spellStatDestructionSelect.appendChild(spellSkillDestructionInput); 
                                    
                        var spellCostSelection = document.createElement("div");
                            spellCostSelection.setAttribute("id", "spell-cost-selection");
                            
                        spellStats.appendChild(spellCostSelection);
                        
                            var spellCostParent = document.createElement("div");
                                spellCostParent.setAttribute("id", "spell-cost-parent");
                                
                            spellCostSelection.appendChild(spellCostParent);
                            
                                var spellCostTxt = document.createElement("p");
                                    spellCostTxt.setAttribute("id", "spell-cost-txt");
                                    spellCostTxt.textContent = "Spell cost:";
                                
                                spellCostParent.appendChild(spellCostTxt);
                                
                                var spellCostInput = document.createElement("input");
                                    spellCostInput.setAttribute("type", "number");
                                    spellCostInput.setAttribute("id", "spell-cost");
                                    spellCostInput.setAttribute("name", "spell-cost-input");
                                    
                                spellCostParent.appendChild(spellCostInput);
                                    
                        var spellStatDisplay = document.createElement("div");
                            spellStatDisplay.setAttribute("id", "spell-stat-display");
                            
                        spellStats.appendChild(spellStatDisplay);
                        
                            var chanceToCastStat = document.createElement("div");
                                chanceToCastStat.setAttribute("id", "chance-to-cast-stat");
                                
                            spellStatDisplay.appendChild(chanceToCastStat);
                            
                                var chanceToCastDisplay = document.createElement("p");
                                    chanceToCastDisplay.setAttribute("id", "chance-to-cast-display");
                                    chanceToCastDisplay.textContent = "Chance to cast: %";
                                    
                                chanceToCastStat.appendChild(chanceToCastDisplay);
                                
                    var weaponStats = document.createElement("div");
                        weaponStats.setAttribute("id", "weapon-stats");
                        
                calculatorParent.appendChild(weaponStats);
                
                        var weaponStatsInstructions = document.createElement("div");
                            weaponStatsInstructions.setAttribute("id", "weapon-stats-instructions");
                            
                        weaponStats.appendChild(weaponStatsInstructions);
                        
                            var weaponStatsInstructionsTxt = document.createElement("p");
                                weaponStatsInstructionsTxt.setAttribute("id", "weapon-stats-instructions-txt");
                                weaponStatsInstructionsTxt.textContent = "Select a set of armor, weapon and weapon condition. Weapon attack damage is simulated when clicking 'attack'. Be aware enemy armor value mimics that of the users";
                                
                            weaponStatsInstructions.appendChild(weaponStatsInstructionsTxt);
                            
                        var weaponStatSelectors = document.createElement("div");
                            weaponStatSelectors.setAttribute("id", "weapon-stat-selectors");
                            
                        weaponStats.appendChild(weaponStatSelectors);
                        
                            var selectWeapons = document.createElement("div");
                                selectWeapons.setAttribute("id", "select-weapons");
                                
                            weaponStatSelectors.appendChild(selectWeapons);
                            
                                var weaponsLabel = document.createElement("label");
                                    weaponsLabel.setAttribute("for", "weapons");
                                    weaponsLabel.setAttribute("class", "selector-label");
                                    weaponsLabel.textContent = "Choose a weapon:";
                                    
                                selectWeapons.appendChild(weaponsLabel);
                                
                                var weaponsSelect = document.createElement("select");
                                    weaponsSelect.setAttribute("name", "weapons");
                                    weaponsSelect.setAttribute("id", "weapons");
                                    weaponsSelect.setAttribute("class", "selector-box");
                                    
                                selectWeapons.appendChild(weaponsSelect);
                                
                                    var longBladeOptgroup = document.createElement("optgroup");
                                        longBladeOptgroup.setAttribute("label", "Long-blade");
                                    
                                    weaponsSelect.appendChild(longBladeOptgroup);
                                
                                        var optionIronLongsword = document.createElement("option");
                                            optionIronLongsword.setAttribute("value", "iron-longsword");
                                            optionIronLongsword.setAttribute("id", "iron-longsword");
                                            optionIronLongsword.textContent = "iron-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionIronLongsword);
                                        
                                        var optionSteelLongsword = document.createElement("option");
                                            optionSteelLongsword.setAttribute("value", "steel-longsword");
                                            optionSteelLongsword.setAttribute("id", "steel-longsword");
                                            optionSteelLongsword.textContent = "steel-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionSteelLongsword);
                                        
                                        var optionGlassLongsword = document.createElement("option");
                                            optionGlassLongsword.setAttribute("value", "glass-longsword");
                                            optionGlassLongsword.setAttribute("id", "glass-longsword");
                                            optionGlassLongsword.textContent = "glass-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionGlassLongsword);
                                        
                                        var optionEbonyLongsword = document.createElement("option");
                                            optionEbonyLongsword.setAttribute("value", "ebony-longsword");
                                            optionEbonyLongsword.setAttribute("id", "ebony-longsword");
                                            optionEbonyLongsword.textContent = "ebony-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionEbonyLongsword);
                                        
                                        var optionDaedricLongsword = document.createElement("option");
                                            optionDaedricLongsword.setAttribute("value", "daedric-longsword");
                                            optionDaedricLongsword.setAttribute("id", "daedric-longsword");
                                            optionDaedricLongsword.textContent = "daedric-longsword";
                                        
                                        longBladeOptgroup.appendChild(optionDaedricLongsword);
                                        
                                    var bluntWeaponOptgroup = document.createElement("optgroup");
                                        bluntWeaponOptgroup.setAttribute("label", "Blunt-weapons");
                                        
                                    weaponsSelect.appendChild(bluntWeaponOptgroup);
                                    
                                        var optionIronMace = document.createElement("option");
                                            optionIronMace.setAttribute("value", "iron-mace");
                                            optionIronMace.setAttribute("id", "iron-mace");
                                            optionIronMace.textContent = "iron-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionIronMace);
                                        
                                        var optionSteelMace = document.createElement("option");
                                            optionSteelMace.setAttribute("value", "steel-mace");
                                            optionSteelMace.setAttribute("id", "steel-mace");
                                            optionSteelMace.textContent = "steel-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionSteelMace);
                                        
                                        var optionDwarvenMace = document.createElement("option");
                                            optionDwarvenMace.setAttribute("value", "dwarven-mace");
                                            optionDwarvenMace.setAttribute("id", "dwarven-mace");
                                            optionDwarvenMace.textContent = "dwarven-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionDwarvenMace);
                                        
                                        var optionEbonyMace = document.createElement("option");
                                            optionEbonyMace.setAttribute("value", "ebony-mace");
                                            optionEbonyMace.setAttribute("id", "ebony-mace");
                                            optionEbonyMace.textContent = "ebony-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionEbonyMace);
                                        
                                        var optionDaedricMace = document.createElement("option");
                                            optionDaedricMace.setAttribute("value", "daedric-mace");
                                            optionDaedricMace.setAttribute("id", "daedric-mace");
                                            optionDaedricMace.textContent = "daedric-mace";
                                        
                                        bluntWeaponOptgroup.appendChild(optionDaedricMace);
                                        
                                    var spearOptgroup = document.createElement("optgroup");
                                        spearOptgroup.setAttribute("label", "Spears");
                                        
                                    weaponsSelect.appendChild(spearOptgroup);
                                    
                                        var optionIronSpear = document.createElement("option");
                                            optionIronSpear.setAttribute("value", "iron-spear");
                                            optionIronSpear.setAttribute("id", "iron-spear");
                                            optionIronSpear.textContent = "iron-spear";
                                        
                                        spearOptgroup.appendChild(optionIronSpear);
                                        
                                        var optionSteelSpear = document.createElement("option");
                                            optionSteelSpear.setAttribute("value", "steel-spear");
                                            optionSteelSpear.setAttribute("id", "steel-spear");
                                            optionSteelSpear.textContent = "steel-spear";
                                        
                                        spearOptgroup.appendChild(optionSteelSpear);
                                        
                                        var optionDwarvenSpear = document.createElement("option");
                                            optionDwarvenSpear.setAttribute("value", "dwarven-spear");
                                            optionDwarvenSpear.setAttribute("id", "dwarven-spear");
                                            optionDwarvenSpear.textContent = "dwarven-spear";
                                        
                                        spearOptgroup.appendChild(optionDwarvenSpear);
                                        
                                        var optionEbonySpear = document.createElement("option");
                                            optionEbonySpear.setAttribute("value", "ebony-spear");
                                            optionEbonySpear.setAttribute("id", "ebony-spear");
                                            optionEbonySpear.textContent = "ebony-spear";
                                        
                                        spearOptgroup.appendChild(optionEbonySpear);
                                        
                                        var optionDaedricSpear = document.createElement("option");
                                            optionDaedricSpear.setAttribute("value", "daedric-spear");
                                            optionDaedricSpear.setAttribute("id", "daedric-spear");
                                            optionDaedricSpear.textContent = "daedric-spear";
                                        
                                        spearOptgroup.appendChild(optionDaedricSpear);
                                        
                                    var axeOptgroup = document.createElement("optgroup");
                                        axeOptgroup.setAttribute("label", "Axe");
                                        
                                    weaponsSelect.appendChild(axeOptgroup);
                                    
                                        var optionIronWarAxe = document.createElement("option");
                                            optionIronWarAxe.setAttribute("value", "iron-war-axe");
                                            optionIronWarAxe.setAttribute("id", "iron-war-axe");
                                            optionIronWarAxe.textContent = "iron-war-axe";
        
                                        axeOptgroup.appendChild(optionIronWarAxe);
                                        
                                        var optionSteelWarAxe = document.createElement("option");
                                            optionSteelWarAxe.setAttribute("value", "steel-war-axe");
                                            optionSteelWarAxe.setAttribute("id", "steel-war-axe");
                                            optionSteelWarAxe.textContent = "steel-war-axe";
                                        
                                        axeOptgroup.appendChild(optionSteelWarAxe);
                                        
                                        var optionDwarvenWarAxe = document.createElement("option");
                                            optionDwarvenWarAxe.setAttribute("value", "dwarven-war-axe");
                                            optionDwarvenWarAxe.setAttribute("id", "dwarven-war-axe");
                                            optionDwarvenWarAxe.textContent = "dwarven-war-axe";
                                        
                                        axeOptgroup.appendChild(optionDwarvenWarAxe);
                                        
                                        var optionEbonyWarAxe = document.createElement("option");
                                            optionEbonyWarAxe.setAttribute("value", "ebony-war-axe");
                                            optionEbonyWarAxe.setAttribute("id", "ebony-war-axe");
                                            optionEbonyWarAxe.textContent = "ebony-war-axe";
                                        
                                        axeOptgroup.appendChild(optionEbonyWarAxe);
                                        
                                        var optionDaedricWarAxe = document.createElement("option");
                                            optionDaedricWarAxe.setAttribute("value", "daedric-war-axe");
                                            optionDaedricWarAxe.setAttribute("id", "daedric-war-axe");
                                            optionDaedricWarAxe.textContent = "daedric-war-axe";
                                        
                                        axeOptgroup.appendChild(optionDaedricWarAxe);    
                                        
                                    var shortBladeOptgroup = document.createElement("optgroup");
                                        shortBladeOptgroup.setAttribute("label", "Short-blade");
                                        
                                    weaponsSelect.appendChild(shortBladeOptgroup);
                                    
                                        var optionIronShortsword = document.createElement("option");
                                            optionIronShortsword.setAttribute("value", "iron-shortsword");
                                            optionIronShortsword.setAttribute("id", "iron-shortsword");
                                            optionIronShortsword.textContent = "iron-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionIronShortsword);
                                        
                                        var optionSteelShortsword = document.createElement("option");
                                            optionSteelShortsword.setAttribute("value", "steel-shortsword");
                                            optionSteelShortsword.setAttribute("id", "steel-shortsword");
                                            optionSteelShortsword.textContent = "steel-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionSteelShortsword);
                                        
                                        var optionDwarvenShortsword = document.createElement("option");
                                            optionDwarvenShortsword.setAttribute("value", "dwarven-shortsword");
                                            optionDwarvenShortsword.setAttribute("id", "dwarven-shortsword");
                                            optionDwarvenShortsword.textContent = "dwarven-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionDwarvenShortsword);
                                        
                                        var optionEbonyShortsword = document.createElement("option");
                                            optionEbonyShortsword.setAttribute("value", "ebony-shortsword");
                                            optionEbonyShortsword.setAttribute("id", "ebony-shortsword");
                                            optionEbonyShortsword.textContent = "ebony-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionEbonyShortsword);
                                        
                                        var optionDaedricShortsword = document.createElement("option");
                                            optionDaedricShortsword.setAttribute("value", "daedric-shortsword");
                                            optionDaedricShortsword.setAttribute("id", "daedric-shortsword");
                                            optionDaedricShortsword.textContent = "daedric-shortsword";
                                        
                                        shortBladeOptgroup.appendChild(optionDaedricShortsword); 
                                        
                            var selectConditions = document.createElement("div");       
                                selectConditions.setAttribute("id", "select-condition");
                                
                            weaponStatSelectors.appendChild(selectConditions);
                                    
                                var conditionSelector = document.createElement("label");
                                    conditionSelector.setAttribute("for", "condition");
                                    conditionSelector.setAttribute("class", "selector-label");
                                    conditionSelector.textContent = "Choose weapon condition:";
                                    
                                selectConditions.appendChild(conditionSelector);
                                    
                                var selectCondition = document.createElement("select");
                                    selectCondition.setAttribute("name", "condition");  
                                    selectCondition.setAttribute("id", "condition");  
                                    selectCondition.setAttribute("class", "selector-box");
                                        
                                selectConditions.appendChild(selectCondition);
                                        
                                        var conditionsOptgroup = document.createElement("optgroup");
                                            conditionsOptgroup.setAttribute("label", "Condition");
                                            
                                        selectCondition.appendChild(conditionsOptgroup);
                                        
                                            var optionMax = document.createElement("option");
                                                optionMax.setAttribute("value", "max");
                                                optionMax.setAttribute("id", "max-condition-select");
                                                optionMax.textContent = "max-condition";
                                                
                                            conditionsOptgroup.appendChild(optionMax);
                                            
                                            var optionHigh = document.createElement("option");
                                                optionHigh.setAttribute("value", "high");
                                                optionHigh.setAttribute("id", "high-condition-select");
                                                optionHigh.textContent = "max-condition";
                                                
                                            conditionsOptgroup.appendChild(optionHigh);
                                            
                                            var optionMedium = document.createElement("option");
                                                optionMedium.setAttribute("value", "medium");
                                                optionMedium.setAttribute("id", "medium-condition-select");
                                                optionMedium.textContent = "medium-condition";
                                                
                                            conditionsOptgroup.appendChild(optionMedium);
                                            
                                            var optionLow = document.createElement("option");
                                                optionLow.setAttribute("value", "low");
                                                optionLow.setAttribute("id", "low-condition-select");
                                                optionLow.textContent = "low-condition";
                                                
                                            conditionsOptgroup.appendChild(optionLow);
                                        
                            var selectArmor = document.createElement("div");       
                                selectArmor.setAttribute("id", "select-armor");
                                    
                            weaponStatSelectors.appendChild(selectArmor);
                                        
                                var armorLabel = document.createElement("label");
                                    armorLabel.setAttribute("for", "armor");
                                    armorLabel.setAttribute("class", "selector-label");
                                    armorLabel.textContent = "Choose armor:";
                                    
                                selectArmor.appendChild(armorLabel);
                                    
                                var selectedArmor = document.createElement("select");
                                    selectedArmor.setAttribute("name", "armor");  
                                    selectedArmor.setAttribute("id", "armor");  
                                    selectedArmor.setAttribute("class", "selector-box");
                                        
                                selectArmor.appendChild(selectedArmor);
                                        
                                        var heavyArmorOptgroup = document.createElement("optgroup");
                                            heavyArmorOptgroup.setAttribute("label", "Heavy-armor");
                                            
                                        selectedArmor.appendChild(heavyArmorOptgroup);
                                        
                                            var optionIronArmor = document.createElement("option");
                                                optionIronArmor.setAttribute("value", "iron-armor");
                                                optionIronArmor.setAttribute("id", "iron-armor-select");
                                                optionIronArmor.textContent = "iron-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionIronArmor);
                                            
                                            var optionSteelArmor = document.createElement("option");
                                                optionSteelArmor.setAttribute("value", "steel-armor");
                                                optionSteelArmor.setAttribute("id", "steel-armor-select");
                                                optionSteelArmor.textContent = "steel-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionSteelArmor);
                                            
                                            var optionDwemerArmor = document.createElement("option");
                                                optionDwemerArmor.setAttribute("value", "dwemer-armor");
                                                optionDwemerArmor.setAttribute("id", "dwemer-armor-select");
                                                optionDwemerArmor.textContent = "dwemer-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionDwemerArmor);
                                            
                                            var optionEbonyArmor = document.createElement("option");
                                                optionEbonyArmor.setAttribute("value", "ebony-armor");
                                                optionEbonyArmor.setAttribute("id", "ebony-armor-select");
                                                optionEbonyArmor.textContent = "ebony-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionEbonyArmor);
                                            
                                            var optionDaedricArmor= document.createElement("option");
                                                optionDaedricArmor.setAttribute("value", "daedric-armor");
                                                optionDaedricArmor.setAttribute("id", "daedric-armor-select");
                                                optionDaedricArmor.textContent = "daedric-armor";
                                                
                                            heavyArmorOptgroup.appendChild(optionDaedricArmor);
                                            
                                        var mediumArmorOptgroup = document.createElement("optgroup");
                                            mediumArmorOptgroup.setAttribute("label", "Medium-armor");
                                            
                                        selectedArmor.appendChild(mediumArmorOptgroup);
                                        
                                            var optionBonemoldArmor = document.createElement("option");
                                                optionBonemoldArmor.setAttribute("value", "bonemold-armor");
                                                optionBonemoldArmor.setAttribute("id", "bonemold-armor-select");
                                                optionBonemoldArmor.textContent = "bonemold-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionBonemoldArmor);
                                            
                                            var optionOrcishArmor = document.createElement("option");
                                                optionOrcishArmor.setAttribute("value", "orcish-armor");
                                                optionOrcishArmor.setAttribute("id", "orcish-armor-select");
                                                optionOrcishArmor.textContent = "orcish-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionOrcishArmor);
                                            
                                            var optionAdamantiumArmor = document.createElement("option");
                                                optionAdamantiumArmor.setAttribute("value", "adamantium-armor");
                                                optionAdamantiumArmor.setAttribute("id", "adamantium-armor-select");
                                                optionAdamantiumArmor.textContent = "adamantium-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionAdamantiumArmor);
                                            
                                            var optionIceArmor = document.createElement("option");
                                                optionIceArmor.setAttribute("value", "ice-armor");
                                                optionIceArmor.setAttribute("id", "ice-armor-select");
                                                optionIceArmor.textContent = "ice-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionIceArmor);
                                            
                                            var optionRoyalGuardArmor= document.createElement("option");
                                                optionRoyalGuardArmor.setAttribute("value", "royal-guard-armor");
                                                optionRoyalGuardArmor.setAttribute("id", "royal-guard-armor-select");
                                                optionRoyalGuardArmor.textContent = "royal-guard-armor";
                                                
                                            mediumArmorOptgroup.appendChild(optionRoyalGuardArmor);  
                                            
                                        var lightArmorOptgroup = document.createElement("optgroup");
                                            lightArmorOptgroup.setAttribute("label", "Light-armor");
                                            
                                        selectedArmor.appendChild(lightArmorOptgroup);
                                        
                                            var optionNordicFurArmor = document.createElement("option");
                                                optionNordicFurArmor.setAttribute("value", "nordic-fur-armor");
                                                optionNordicFurArmor.setAttribute("id", "nordic-fur-armor-select");
                                                optionNordicFurArmor.textContent = "nordic-fur-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionNordicFurArmor);
                                            
                                            var optionNetchLeatherArmor = document.createElement("option");
                                                optionNetchLeatherArmor.setAttribute("value", "netch-leather-armor");
                                                optionNetchLeatherArmor.setAttribute("id", "netch-leather-armor-select");
                                                optionNetchLeatherArmor.textContent = "netch-leather-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionNetchLeatherArmor);
                                            
                                            var optionChitinArmor = document.createElement("option");
                                                optionChitinArmor.setAttribute("value", "chitin-armor");
                                                optionChitinArmor.setAttribute("id", "chitin-armor-select");
                                                optionChitinArmor.textContent = "chitin-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionChitinArmor);
                                            
                                            var optionDarkBrotherhoodArmor = document.createElement("option");
                                                optionDarkBrotherhoodArmor.setAttribute("value", "dark-brotherhood-armor");
                                                optionDarkBrotherhoodArmor.setAttribute("id", "dark-brotherhood-armor-select");
                                                optionDarkBrotherhoodArmor.textContent = "dark-brotherhood-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionDarkBrotherhoodArmor);
                                            
                                            var optionGlassArmor= document.createElement("option");
                                                optionGlassArmor.setAttribute("value", "glass-armor");
                                                optionGlassArmor.setAttribute("id", "glass-armor-select");
                                                optionGlassArmor.textContent = "glass-armor";
                                                
                                            lightArmorOptgroup.appendChild(optionGlassArmor);
                        
                        var attackBtnDiv = document.createElement("div");
                            attackBtnDiv.setAttribute("id", "attack-btn-div");
                            
                        weaponStats.appendChild(attackBtnDiv);
                        
                            var attackButton = document.createElement("input");
                                attackButton.setAttribute("type", "submit");
                                attackButton.setAttribute("id", "attack-btn");
                                attackButton.setAttribute("name", "submit");
                                attackButton.setAttribute("value", "attack");
                                
                            attackBtnDiv.appendChild(attackButton);
                            
                        var weaponStatValues = document.createElement("div");  
                            weaponStatValues.setAttribute("id", "weapon-stat-values");
                            
                        weaponStats.appendChild(weaponStatValues);
                        
                            var weaponStatArmorProtection = document.createElement("div");
                                weaponStatArmorProtection.setAttribute("id", "weapon-stat-armor-protection");
                                
                            weaponStatValues.appendChild(weaponStatArmorProtection);
                            
                                var armorProtectionDisplay = document.createElement("p");
                                    armorProtectionDisplay.setAttribute("id", "armor-protection-display");
                                    armorProtectionDisplay.setAttribute("class", "weapon-stat-font");
                                    armorProtectionDisplay.textContent = "Armor protection:";
                                    
                                weaponStatArmorProtection.appendChild(armorProtectionDisplay);
                                
                            var weaponStatWeaponDmg = document.createElement("div");
                                weaponStatWeaponDmg.setAttribute("id", "weapon-stat-weapon-dmg");
                            
                            weaponStatValues.appendChild(weaponStatWeaponDmg);
                            
                                var attackDamageDisplay = document.createElement("p");
                                    attackDamageDisplay.setAttribute("id", "attack-damage-display");
                                    attackDamageDisplay.setAttribute("class", "weapon-stat-font");
                                    attackDamageDisplay.textContent = "Attack damage:";
                                    
                                weaponStatWeaponDmg.appendChild(attackDamageDisplay);
                                
                            var weaponStatChanceToHit = document.createElement("div");
                                weaponStatChanceToHit.setAttribute("id", "weapon-stat-chance-to-hit");
                                
                            weaponStatValues.appendChild(weaponStatChanceToHit);
                            
                                var chanceToHitDisplay = document.createElement("p");
                                    chanceToHitDisplay.setAttribute("id", "chance-to-hit-display");
                                    chanceToHitDisplay.setAttribute("class", "weapon-stat-font");
                                    chanceToHitDisplay.textContent = "Chance to hit:";
                                    
                                weaponStatChanceToHit.appendChild(chanceToHitDisplay);
                                    
                    var skillValues = document.createElement("div");
                        skillValues.setAttribute("id", "skill-values");
                        
                calculatorParent.appendChild(skillValues);
                    
                        var skillsrow1 = document.createElement("div");
                            skillsrow1.setAttribute("id", "skills-row-1");
                            
                        skillValues.appendChild(skillsrow1);
                        
                            var intelligenceSkills = document.createElement("div");
                                intelligenceSkills.setAttribute("id", "intelligence-skills");
                                intelligenceSkills.setAttribute("class", "skill-complete");
                                
                            skillsrow1.appendChild(intelligenceSkills);
                            
                                var intelligenceAttributeContainer = document.createElement("div");
                                    intelligenceAttributeContainer.setAttribute("id", "intelligence-attribute-container");
                                    intelligenceAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                intelligenceSkills.appendChild(intelligenceAttributeContainer);
                                
                                    var attributeTxt9 = document.createElement("p");
                                        attributeTxt9.setAttribute("class", "attribute-txt");
                                        attributeTxt9.textContent = "Attribute";
                                        
                                    intelligenceAttributeContainer.appendChild(attributeTxt9);
                                    
                                    var intelligenceAttribute = document.createElement("div");
                                        intelligenceAttribute.setAttribute("id", "intelligence-attribute");
                                        
                                    intelligenceAttributeContainer.appendChild(intelligenceAttribute);
                                    
                                        var intelligenceAttributeContainerTxt = document.createElement("div");
                                            intelligenceAttributeContainerTxt.setAttribute("id", "intelligence-container-txt");
                                            intelligenceAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        intelligenceAttribute.appendChild(intelligenceAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt9 = document.createElement("p");
                                                attributeActualTxt9.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt9.textContent = "Intelligence:";
                                                
                                            intelligenceAttributeContainerTxt.appendChild(attributeActualTxt9);
                                            
                                            var intelligenceContent = document.createElement("p");
                                                intelligenceContent.setAttribute("id", "intelligence-content");
                                                intelligenceContent.setAttribute("class", "attribute-actual-value");
                                                intelligenceContent.textContent = "Null:";
                                                
                                            intelligenceAttributeContainerTxt.appendChild(intelligenceContent);
                                            
                                        var intelligenceValueContainer = document.createElement("div");
                                            intelligenceValueContainer.setAttribute("id", "intelligence-value-container");
                                            
                                        intelligenceAttribute.appendChild(intelligenceValueContainer);
                                        
                                            var intelligenceAttributeInput = document.createElement("input");
                                                intelligenceAttributeInput.setAttribute("type", "number");
                                                intelligenceAttributeInput.setAttribute("id", "attribute-intelligence");
                                                intelligenceAttributeInput.setAttribute("name", "intelligence");
                                                
                                            intelligenceValueContainer.appendChild(intelligenceAttributeInput);
                                            
                                var intelligenceSkillsContainer = document.createElement("div");
                                    intelligenceSkillsContainer.setAttribute("id", "intelligence-skills-container");
                                    intelligenceSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                intelligenceSkills.appendChild(intelligenceSkillsContainer);
                                
                                    var skillTxt8 = document.createElement("p");
                                        skillTxt8.setAttribute("class", "skill-txt");
                                        skillTxt8.textContent = "Skills";
                                        
                                    intelligenceSkillsContainer.appendChild(skillTxt8);
                                    
                                    var intelligenceSkill1 = document.createElement("div");
                                        intelligenceSkill1.setAttribute("id", "intelligence-skill-1");
                                        
                                    intelligenceSkillsContainer.appendChild(intelligenceSkill1);
                                    
                                        var intelligenceSkill1ContainerTxt = document.createElement("div");
                                            intelligenceSkill1ContainerTxt.setAttribute("id", "intelligence-skill1-container-txt");
                                            intelligenceSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        intelligenceSkill1.appendChild(intelligenceSkill1ContainerTxt);
                                        
                                            var skillActualTxtIntelligence1 = document.createElement("p");
                                                skillActualTxtIntelligence1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtIntelligence1.textContent = "Alchemy:";
                                                
                                            intelligenceSkill1ContainerTxt.appendChild(skillActualTxtIntelligence1);
                                            
                                            var alchemyContent = document.createElement("p");
                                                alchemyContent.setAttribute("id", "alchemy-content");
                                                alchemyContent.setAttribute("class", "attribute-actual-value");
                                                alchemyContent.textContent = "null";
                                                
                                            intelligenceSkill1ContainerTxt.appendChild(alchemyContent);
                                            
                                        var alchemyValueContainer = document.createElement("id");
                                            alchemyValueContainer.setAttribute("id", "alchemy-value-container");
                                            
                                        intelligenceSkill1.appendChild(alchemyValueContainer);
                                        
                                            var alchemySkillInput = document.createElement("input");
                                                alchemySkillInput.setAttribute("id", "skill-alchemy");
                                                alchemySkillInput.setAttribute("type", "number");
                                                alchemySkillInput.setAttribute("name", "alchemy");
                                                
                                            alchemyValueContainer.appendChild(alchemySkillInput);
                                            
                                    var intelligenceSkill2 = document.createElement("div");
                                        intelligenceSkill2.setAttribute("id", "intelligence-skill-2");
                                        
                                    intelligenceSkillsContainer.appendChild(intelligenceSkill2);
                                    
                                        var intelligenceSkill2ContainerTxt = document.createElement("div");
                                            intelligenceSkill2ContainerTxt.setAttribute("id", "intelligence-skill2-container-txt");
                                            intelligenceSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        intelligenceSkill2.appendChild(intelligenceSkill2ContainerTxt);
                                        
                                            var skillActualTxtIntelligence2 = document.createElement("p");
                                                skillActualTxtIntelligence2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtIntelligence2.textContent = "Conjuration:";
                                                
                                            intelligenceSkill2ContainerTxt.appendChild(skillActualTxtIntelligence2);
                                            
                                            var conjurationContent = document.createElement("p");
                                                conjurationContent.setAttribute("id", "conjuration-content");
                                                conjurationContent.setAttribute("class", "attribute-actual-value");
                                                conjurationContent.textContent = "null";
                                                
                                            intelligenceSkill2ContainerTxt.appendChild(conjurationContent);
                                            
                                        var conjurationValueContainer = document.createElement("id");
                                            conjurationValueContainer.setAttribute("id", "conjuration-value-container");
                                            
                                        intelligenceSkill2.appendChild(conjurationValueContainer);
                                        
                                            var conjurationSkillInput = document.createElement("input");
                                                conjurationSkillInput.setAttribute("id", "skill-conjuration");
                                                conjurationSkillInput.setAttribute("type", "number");
                                                conjurationSkillInput.setAttribute("name", "conjuration");
                                                
                                            conjurationValueContainer.appendChild(conjurationSkillInput);
                                            
                                    var intelligenceSkill3 = document.createElement("div");
                                        intelligenceSkill3.setAttribute("id", "intelligence-skill-3");
                                        
                                    intelligenceSkillsContainer.appendChild(intelligenceSkill3);
                                    
                                        var intelligenceSkill3ContainerTxt = document.createElement("div");
                                            intelligenceSkill3ContainerTxt.setAttribute("id", "intelligence-skill3-container-txt");
                                            intelligenceSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        intelligenceSkill3.appendChild(intelligenceSkill3ContainerTxt);
                                        
                                            var skillActualTxtIntelligence3 = document.createElement("p");
                                                skillActualTxtIntelligence3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtIntelligence3.textContent = "Enchant:";
                                                
                                            intelligenceSkill3ContainerTxt.appendChild(skillActualTxtIntelligence3);
                                            
                                            var enchantContent = document.createElement("p");
                                                enchantContent.setAttribute("id", "enchant-content");
                                                enchantContent.setAttribute("class", "attribute-actual-value");
                                                enchantContent.textContent = "null";
                                                
                                            intelligenceSkill3ContainerTxt.appendChild(enchantContent);
                                            
                                        var enchantValueContainer = document.createElement("id");
                                            enchantValueContainer.setAttribute("id", "enchant-value-container");
                                            
                                        intelligenceSkill3.appendChild(enchantValueContainer);
                                        
                                            var enchantSkillInput = document.createElement("input");
                                                enchantSkillInput.setAttribute("id", "skill-enchant");
                                                enchantSkillInput.setAttribute("type", "number");
                                                enchantSkillInput.setAttribute("name", "enchant");
                                                
                                            enchantValueContainer.appendChild(enchantSkillInput);
                                            
                                    var intelligenceSkill4 = document.createElement("div");
                                        intelligenceSkill4.setAttribute("id", "intelligence-skill-4");
                                        
                                    intelligenceSkillsContainer.appendChild(intelligenceSkill4);
                                    
                                        var intelligenceSkill4ContainerTxt = document.createElement("div");
                                            intelligenceSkill4ContainerTxt.setAttribute("id", "intelligence-skill4-container-txt");
                                            intelligenceSkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        intelligenceSkill4.appendChild(intelligenceSkill4ContainerTxt);
                                        
                                            var skillActualTxtIntelligence4 = document.createElement("p");
                                                skillActualTxtIntelligence4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtIntelligence4.textContent = "Security:";
                                                
                                            intelligenceSkill4ContainerTxt.appendChild(skillActualTxtIntelligence4);
                                            
                                            var securityContent = document.createElement("p");
                                                securityContent.setAttribute("id", "security-content");
                                                securityContent.setAttribute("class", "attribute-actual-value");
                                                securityContent.textContent = "null";
                                                
                                            intelligenceSkill4ContainerTxt.appendChild(securityContent);
                                            
                                        var securityValueContainer = document.createElement("id");
                                            securityValueContainer.setAttribute("id", "security-value-container");
                                            
                                        intelligenceSkill4.appendChild(securityValueContainer);
                                        
                                            var securitySkillInput = document.createElement("input");
                                                securitySkillInput.setAttribute("id", "skill-security");
                                                securitySkillInput.setAttribute("type", "number");
                                                securitySkillInput.setAttribute("name", "security");
                                                
                                            securityValueContainer.appendChild(securitySkillInput);
                                            
                            var willpowerSkills = document.createElement("div");
                                willpowerSkills.setAttribute("id", "willpower-skills");
                                willpowerSkills.setAttribute("class", "skill-complete");
                                
                            skillsrow1.appendChild(willpowerSkills);
                            
                                var willpowerAttributeContainer = document.createElement("div");
                                    willpowerAttributeContainer.setAttribute("id", "willpower-attribute-container");
                                    willpowerAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                willpowerSkills.appendChild(willpowerAttributeContainer);
                                
                                    var attributeTxt10 = document.createElement("p");
                                        attributeTxt10.setAttribute("class", "attribute-txt");
                                        attributeTxt10.textContent = "Attribute";
                                        
                                    willpowerAttributeContainer.appendChild(attributeTxt10);
                                    
                                    var willpowerAttribute = document.createElement("div");
                                        willpowerAttribute.setAttribute("id", "willpower-attribute");
                                        
                                    willpowerAttributeContainer.appendChild(willpowerAttribute);
                                    
                                        var willpowerAttributeContainerTxt = document.createElement("div");
                                            willpowerAttributeContainerTxt.setAttribute("id", "willpower-container-txt");
                                            willpowerAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        willpowerAttribute.appendChild(willpowerAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt10 = document.createElement("p");
                                                attributeActualTxt10.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt10.textContent = "Willpower:";
                                                
                                            willpowerAttributeContainerTxt.appendChild(attributeActualTxt10);
                                            
                                            var willpowerContent = document.createElement("p");
                                                willpowerContent.setAttribute("id", "willpower-content");
                                                willpowerContent.setAttribute("class", "attribute-actual-value");
                                                willpowerContent.textContent = "Null:";
                                                
                                            willpowerAttributeContainerTxt.appendChild(willpowerContent);
                                            
                                        var willpowerValueContainer = document.createElement("div");
                                            willpowerValueContainer.setAttribute("id", "willpower-value-container");
                                            
                                        willpowerAttribute.appendChild(willpowerValueContainer);
                                        
                                            var willpowerAttributeInput = document.createElement("input");
                                                willpowerAttributeInput.setAttribute("type", "number");
                                                willpowerAttributeInput.setAttribute("id", "attribute-willpower");
                                                willpowerAttributeInput.setAttribute("name", "willpower");
                                                
                                            willpowerValueContainer.appendChild(willpowerAttributeInput);
                                            
                                var willpowerSkillsContainer = document.createElement("div");
                                    willpowerSkillsContainer.setAttribute("id", "willpower-skills-container");
                                    willpowerSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                willpowerSkills.appendChild(willpowerSkillsContainer);
                                
                                    var skillTxt9 = document.createElement("p");
                                        skillTxt9.setAttribute("class", "skill-txt");
                                        skillTxt9.textContent = "Skills";
                                        
                                    willpowerSkillsContainer.appendChild(skillTxt9);
                                    
                                    var willpowerSkill1 = document.createElement("div");
                                        willpowerSkill1.setAttribute("id", "willpower-skill-1");
                                        
                                    willpowerSkillsContainer.appendChild(willpowerSkill1);
                                    
                                        var willpowerSkill1ContainerTxt = document.createElement("div");
                                            willpowerSkill1ContainerTxt.setAttribute("id", "willpower-skill1-container-txt");
                                            willpowerSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        willpowerSkill1.appendChild(willpowerSkill1ContainerTxt);
                                        
                                            var skillActualTxtWillpower1 = document.createElement("p");
                                                skillActualTxtWillpower1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtWillpower1.textContent = "Alteration:";
                                                
                                            willpowerSkill1ContainerTxt.appendChild(skillActualTxtWillpower1);
                                            
                                            var alterationContent = document.createElement("p");
                                                alterationContent.setAttribute("id", "alteration-content");
                                                alterationContent.setAttribute("class", "attribute-actual-value");
                                                alterationContent.textContent = "null";
                                                
                                            willpowerSkill1ContainerTxt.appendChild(alterationContent);
                                            
                                        var alterationValueContainer = document.createElement("id");
                                            alterationValueContainer.setAttribute("id", "alteration-value-container");
                                            
                                        willpowerSkill1.appendChild(alterationValueContainer);
                                        
                                            var alterationSkillInput = document.createElement("input");
                                                alterationSkillInput.setAttribute("id", "skill-alteration");
                                                alterationSkillInput.setAttribute("type", "number");
                                                alterationSkillInput.setAttribute("name", "alteration");
                                                
                                            alterationValueContainer.appendChild(alterationSkillInput);
                                            
                                    var willpowerSkill2 = document.createElement("div");
                                        willpowerSkill2.setAttribute("id", "willpower-skill-2");
                                        
                                    willpowerSkillsContainer.appendChild(willpowerSkill2);
                                    
                                        var willpowerSkill2ContainerTxt = document.createElement("div");
                                            willpowerSkill2ContainerTxt.setAttribute("id", "willpower-skill2-container-txt");
                                            willpowerSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        willpowerSkill2.appendChild(willpowerSkill2ContainerTxt);
                                        
                                            var skillActualTxtWillpower2 = document.createElement("p");
                                                skillActualTxtWillpower2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtWillpower2.textContent = "Destruction:";
                                                
                                            willpowerSkill2ContainerTxt.appendChild(skillActualTxtWillpower2);
                                            
                                            var destructionContent = document.createElement("p");
                                                destructionContent.setAttribute("id", "destruction-content");
                                                destructionContent.setAttribute("class", "attribute-actual-value");
                                                destructionContent.textContent = "null";
                                                
                                            willpowerSkill2ContainerTxt.appendChild(destructionContent);
                                            
                                        var destructionValueContainer = document.createElement("id");
                                            destructionValueContainer.setAttribute("id", "destruction-value-container");
                                            
                                        willpowerSkill2.appendChild(destructionValueContainer);
                                        
                                            var destructionSkillInput = document.createElement("input");
                                                destructionSkillInput.setAttribute("id", "skill-destruction");
                                                destructionSkillInput.setAttribute("type", "number");
                                                destructionSkillInput.setAttribute("name", "destruction");
                                                
                                            destructionValueContainer.appendChild(destructionSkillInput);
                                            
                                    var willpowerSkill3 = document.createElement("div");
                                        willpowerSkill3.setAttribute("id", "willpower-skill-3");
                                        
                                    willpowerSkillsContainer.appendChild(willpowerSkill3);
                                    
                                        var willpowerSkill3ContainerTxt = document.createElement("div");
                                            willpowerSkill3ContainerTxt.setAttribute("id", "willpower-skill3-container-txt");
                                            willpowerSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        willpowerSkill3.appendChild(willpowerSkill3ContainerTxt);
                                        
                                            var skillActualTxtWillpower3 = document.createElement("p");
                                                skillActualTxtWillpower3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtWillpower3.textContent = "Mysticism:";
                                                
                                            willpowerSkill3ContainerTxt.appendChild(skillActualTxtWillpower3);
                                            
                                            var mysticismContent = document.createElement("p");
                                                mysticismContent.setAttribute("id", "mysticism-content");
                                                mysticismContent.setAttribute("class", "attribute-actual-value");
                                                mysticismContent.textContent = "null";
                                                
                                            willpowerSkill3ContainerTxt.appendChild(mysticismContent);
                                            
                                        var mysticismValueContainer = document.createElement("id");
                                            mysticismValueContainer.setAttribute("id", "mysticism-value-container");
                                            
                                        willpowerSkill3.appendChild(mysticismValueContainer);
                                        
                                            var mysticismSkillInput = document.createElement("input");
                                                mysticismSkillInput.setAttribute("id", "skill-mysticism");
                                                mysticismSkillInput.setAttribute("type", "number");
                                                mysticismSkillInput.setAttribute("name", "mysticism");
                                                
                                            mysticismValueContainer.appendChild(mysticismSkillInput);
                                            
                                    var willpowerSkill4 = document.createElement("div");
                                        willpowerSkill4.setAttribute("id", "willpower-skill-4");
                                        
                                    willpowerSkillsContainer.appendChild(willpowerSkill4);
                                    
                                        var willpowerSkill4ContainerTxt = document.createElement("div");
                                            willpowerSkill4ContainerTxt.setAttribute("id", "willpower-skill4-container-txt");
                                            willpowerSkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        willpowerSkill4.appendChild(willpowerSkill4ContainerTxt);
                                        
                                            var skillActualTxtWillpower4 = document.createElement("p");
                                                skillActualTxtWillpower4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtWillpower4.textContent = "Restoration:";
                                                
                                            willpowerSkill4ContainerTxt.appendChild(skillActualTxtWillpower4);
                                            
                                            var restorationContent = document.createElement("p");
                                                restorationContent.setAttribute("id", "restoration-content");
                                                restorationContent.setAttribute("class", "attribute-actual-value");
                                                restorationContent.textContent = "null";
                                                
                                            willpowerSkill4ContainerTxt.appendChild(restorationContent);
                                            
                                        var restorationValueContainer = document.createElement("id");
                                            restorationValueContainer.setAttribute("id", "restoration-value-container");
                                            
                                        willpowerSkill4.appendChild(restorationValueContainer);
                                        
                                            var restorationSkillInput = document.createElement("input");
                                                restorationSkillInput.setAttribute("id", "skill-restoration");
                                                restorationSkillInput.setAttribute("type", "number");
                                                restorationSkillInput.setAttribute("name", "restoration");
                                                
                                            restorationValueContainer.appendChild(restorationSkillInput);
                                            
                            var agilitySkills = document.createElement("div");
                                agilitySkills.setAttribute("id", "agility-skills");
                                agilitySkills.setAttribute("class", "skill-complete");
                                
                            skillsrow1.appendChild(agilitySkills);
                            
                                var agilityAttributeContainer = document.createElement("div");
                                    agilityAttributeContainer.setAttribute("id", "agility-attribute-container");
                                    agilityAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                agilitySkills.appendChild(agilityAttributeContainer);
                                
                                    var attributeTxt11 = document.createElement("p");
                                        attributeTxt11.setAttribute("class", "attribute-txt");
                                        attributeTxt11.textContent = "Attribute";
                                        
                                    agilityAttributeContainer.appendChild(attributeTxt11);
                                    
                                    var agilityAttribute = document.createElement("div");
                                        agilityAttribute.setAttribute("id", "agility-attribute");
                                        
                                    agilityAttributeContainer.appendChild(agilityAttribute);
                                    
                                        var agilityAttributeContainerTxt = document.createElement("div");
                                            agilityAttributeContainerTxt.setAttribute("id", "agility-container-txt");
                                            agilityAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        agilityAttribute.appendChild(agilityAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt11 = document.createElement("p");
                                                attributeActualTxt11.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt11.textContent = "Agility:";
                                                
                                            agilityAttributeContainerTxt.appendChild(attributeActualTxt11);
                                            
                                            var agilityContent = document.createElement("p");
                                                agilityContent.setAttribute("id", "agility-content");
                                                agilityContent.setAttribute("class", "attribute-actual-value");
                                                agilityContent.textContent = "Null:";
                                                
                                            agilityAttributeContainerTxt.appendChild(agilityContent);
                                            
                                        var agilityValueContainer = document.createElement("div");
                                            agilityValueContainer.setAttribute("id", "agility-value-container");
                                            
                                        agilityAttribute.appendChild(agilityValueContainer);
                                        
                                            var agilityAttributeInput = document.createElement("input");
                                                agilityAttributeInput.setAttribute("type", "number");
                                                agilityAttributeInput.setAttribute("id", "attribute-agility");
                                                agilityAttributeInput.setAttribute("name", "agility");
                                                
                                            agilityValueContainer.appendChild(agilityAttributeInput);
                                            
                                var agilitySkillsContainer = document.createElement("div");
                                    agilitySkillsContainer.setAttribute("id", "agility-skills-container");
                                    agilitySkillsContainer.setAttribute("class", "attribute-container");
                                    
                                agilitySkills.appendChild(agilitySkillsContainer);
                                
                                    var skillTxt10 = document.createElement("p");
                                        skillTxt10.setAttribute("class", "skill-txt");
                                        skillTxt10.textContent = "Skills";
                                        
                                    agilitySkillsContainer.appendChild(skillTxt10);
                                    
                                    var agilitySkill1 = document.createElement("div");
                                        agilitySkill1.setAttribute("id", "agility-skill-1");
                                        
                                    agilitySkillsContainer.appendChild(agilitySkill1);
                                    
                                        var agilitySkill1ContainerTxt = document.createElement("div");
                                            agilitySkill1ContainerTxt.setAttribute("id", "agility-skill1-container-txt");
                                            agilitySkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        agilitySkill1.appendChild(agilitySkill1ContainerTxt);
                                        
                                            var skillActualTxtAgility1 = document.createElement("p");
                                                skillActualTxtAgility1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtAgility1.textContent = "Block:";
                                                
                                            agilitySkill1ContainerTxt.appendChild(skillActualTxtAgility1);
                                            
                                            var blockContent = document.createElement("p");
                                                blockContent.setAttribute("id", "block-content");
                                                blockContent.setAttribute("class", "attribute-actual-value");
                                                blockContent.textContent = "null";
                                                
                                            agilitySkill1ContainerTxt.appendChild(blockContent);
                                            
                                        var blockValueContainer = document.createElement("id");
                                            blockValueContainer.setAttribute("id", "block-value-container");
                                            
                                        agilitySkill1.appendChild(blockValueContainer);
                                        
                                            var blockSkillInput = document.createElement("input");
                                                blockSkillInput.setAttribute("id", "skill-block");
                                                blockSkillInput.setAttribute("type", "number");
                                                blockSkillInput.setAttribute("name", "block");
                                                
                                            blockValueContainer.appendChild(blockSkillInput);
                                            
                                    var agilitySkill2 = document.createElement("div");
                                        agilitySkill2.setAttribute("id", "agility-skill-2");
                                        
                                    agilitySkillsContainer.appendChild(agilitySkill2);
                                    
                                        var agilitySkill2ContainerTxt = document.createElement("div");
                                            agilitySkill2ContainerTxt.setAttribute("id", "agility-skill2-container-txt");
                                            agilitySkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        agilitySkill2.appendChild(agilitySkill2ContainerTxt);
                                        
                                            var skillActualTxtAgility2 = document.createElement("p");
                                                skillActualTxtAgility2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtAgility2.textContent = "Light Armor:";
                                                
                                            agilitySkill2ContainerTxt.appendChild(skillActualTxtAgility2);
                                            
                                            var lightArmorContent = document.createElement("p");
                                                lightArmorContent.setAttribute("id", "light-armor-content");
                                                lightArmorContent.setAttribute("class", "attribute-actual-value");
                                                lightArmorContent.textContent = "null";
                                                
                                            agilitySkill2ContainerTxt.appendChild(lightArmorContent);
                                            
                                        var lightArmorValueContainer = document.createElement("id");
                                            lightArmorValueContainer.setAttribute("id", "light-armor-value-container");
                                            
                                        agilitySkill2.appendChild(lightArmorValueContainer);
                                        
                                            var lightArmorSkillInput = document.createElement("input");
                                                lightArmorSkillInput.setAttribute("id", "skill-light-armor");
                                                lightArmorSkillInput.setAttribute("type", "number");
                                                lightArmorSkillInput.setAttribute("name", "light-armor");
                                                
                                            lightArmorValueContainer.appendChild(lightArmorSkillInput);
                                            
                                    var agilitySkill3 = document.createElement("div");
                                        agilitySkill3.setAttribute("id", "agility-skill-3");
                                        
                                    agilitySkillsContainer.appendChild(agilitySkill3);
                                    
                                        var agilitySkill3ContainerTxt = document.createElement("div");
                                            agilitySkill3ContainerTxt.setAttribute("id", "agility-skill3-container-txt");
                                            agilitySkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        agilitySkill3.appendChild(agilitySkill3ContainerTxt);
                                        
                                            var skillActualTxtAgility3 = document.createElement("p");
                                                skillActualTxtAgility3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtAgility3.textContent = "Marksman:";
                                                
                                            agilitySkill3ContainerTxt.appendChild(skillActualTxtAgility3);
                                            
                                            var marksmanContent = document.createElement("p");
                                                marksmanContent.setAttribute("id", "marksman-content");
                                                marksmanContent.setAttribute("class", "attribute-actual-value");
                                                marksmanContent.textContent = "null";
                                                
                                            agilitySkill3ContainerTxt.appendChild(marksmanContent);
                                            
                                        var marksmanValueContainer = document.createElement("id");
                                            marksmanValueContainer.setAttribute("id", "marksman-value-container");
                                            
                                        agilitySkill3.appendChild(marksmanValueContainer);
                                        
                                            var marksmanSkillInput = document.createElement("input");
                                                marksmanSkillInput.setAttribute("id", "skill-marksman");
                                                marksmanSkillInput.setAttribute("type", "number");
                                                marksmanSkillInput.setAttribute("name", "marksman");
                                                
                                            marksmanValueContainer.appendChild(marksmanSkillInput);
                                            
                                    var agilitySkill4 = document.createElement("div");
                                        agilitySkill4.setAttribute("id", "agility-skill-4");
                                        
                                    agilitySkillsContainer.appendChild(agilitySkill4);
                                    
                                        var agilitySkill4ContainerTxt = document.createElement("div");
                                            agilitySkill4ContainerTxt.setAttribute("id", "agility-skill4-container-txt");
                                            agilitySkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        agilitySkill4.appendChild(agilitySkill4ContainerTxt);
                                        
                                            var skillActualTxtAgility4 = document.createElement("p");
                                                skillActualTxtAgility4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtAgility4.textContent = "Sneak:";
                                                
                                            agilitySkill4ContainerTxt.appendChild(skillActualTxtAgility4);
                                            
                                            var sneakContent = document.createElement("p");
                                                sneakContent.setAttribute("id", "sneak-content");
                                                sneakContent.setAttribute("class", "attribute-actual-value");
                                                sneakContent.textContent = "null";
                                                
                                            agilitySkill4ContainerTxt.appendChild(sneakContent);
                                            
                                        var sneakValueContainer = document.createElement("id");
                                            sneakValueContainer.setAttribute("id", "sneak-value-container");
                                            
                                        agilitySkill4.appendChild(sneakValueContainer);
                                        
                                            var sneakSkillInput = document.createElement("input");
                                                sneakSkillInput.setAttribute("id", "skill-sneak");
                                                sneakSkillInput.setAttribute("type", "number");
                                                sneakSkillInput.setAttribute("name", "sneak");
                                                
                                            sneakValueContainer.appendChild(sneakSkillInput);
                                            
                        var skillsRow2 = document.createElement("div");
                            skillsRow2.setAttribute("id", "skills-row-2");
                            
                        skillValues.appendChild(skillsRow2);
                        
                           var strengthSkills = document.createElement("div");
                                strengthSkills.setAttribute("id", "strength-skills");
                                strengthSkills.setAttribute("class", "skill-complete");
                                
                            skillsRow2.appendChild(strengthSkills);
                            
                                var strengthAttributeContainer = document.createElement("div");
                                    strengthAttributeContainer.setAttribute("id", "strength-attribute-container");
                                    strengthAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                strengthSkills.appendChild(strengthAttributeContainer);
                                
                                    var attributeTxt12 = document.createElement("p");
                                        attributeTxt12.setAttribute("class", "attribute-txt");
                                        attributeTxt12.textContent = "Attribute";
                                        
                                    strengthAttributeContainer.appendChild(attributeTxt12);
                                    
                                    var strengthAttribute = document.createElement("div");
                                        strengthAttribute.setAttribute("id", "strength-attribute");
                                        
                                    strengthAttributeContainer.appendChild(strengthAttribute);
                                    
                                        var strengthAttributeContainerTxt = document.createElement("div");
                                            strengthAttributeContainerTxt.setAttribute("id", "strength-container-txt");
                                            strengthAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        strengthAttribute.appendChild(strengthAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt12 = document.createElement("p");
                                                attributeActualTxt12.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt12.textContent = "Strength:";
                                                
                                            strengthAttributeContainerTxt.appendChild(attributeActualTxt12);
                                            
                                            var strengthContent = document.createElement("p");
                                                strengthContent.setAttribute("id", "strength-content");
                                                strengthContent.setAttribute("class", "attribute-actual-value");
                                                strengthContent.textContent = "Null:";
                                                
                                            strengthAttributeContainerTxt.appendChild(strengthContent);
                                            
                                        var strengthValueContainer = document.createElement("div");
                                            strengthValueContainer.setAttribute("id", "strength-value-container");
                                            
                                        strengthAttribute.appendChild(strengthValueContainer);
                                        
                                            var strengthAttributeInput = document.createElement("input");
                                                strengthAttributeInput.setAttribute("type", "number");
                                                strengthAttributeInput.setAttribute("id", "attribute-strength");
                                                strengthAttributeInput.setAttribute("name", "strength");
                                                
                                            strengthValueContainer.appendChild(strengthAttributeInput);
                                            
                                var strengthSkillsContainer = document.createElement("div");
                                    strengthSkillsContainer.setAttribute("id", "strength-skills-container");
                                    strengthSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                strengthSkills.appendChild(strengthSkillsContainer);
                                
                                    var skillTxt11 = document.createElement("p");
                                        skillTxt11.setAttribute("class", "skill-txt");
                                        skillTxt11.textContent = "Skills";
                                        
                                    strengthSkillsContainer.appendChild(skillTxt11);
                                    
                                    var strengthSkill1 = document.createElement("div");
                                        strengthSkill1.setAttribute("id", "strength-skill-1");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill1);
                                    
                                        var strengthSkill1ContainerTxt = document.createElement("div");
                                            strengthSkill1ContainerTxt.setAttribute("id", "strength-skill1-container-txt");
                                            strengthSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill1.appendChild(strengthSkill1ContainerTxt);
                                        
                                            var skillActualTxtStrength1 = document.createElement("p");
                                                skillActualTxtStrength1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength1.textContent = "Acrobatics:";
                                                
                                            strengthSkill1ContainerTxt.appendChild(skillActualTxtStrength1);
                                            
                                            var acrobaticsContent = document.createElement("p");
                                                acrobaticsContent.setAttribute("id", "acrobatics-content");
                                                acrobaticsContent.setAttribute("class", "attribute-actual-value");
                                                acrobaticsContent.textContent = "null";
                                                
                                            strengthSkill1ContainerTxt.appendChild(acrobaticsContent);
                                            
                                        var acrobaticsValueContainer = document.createElement("id");
                                            acrobaticsValueContainer.setAttribute("id", "acrobatics-value-container");
                                            
                                        strengthSkill1.appendChild(acrobaticsValueContainer);
                                        
                                            var acrobaticsSkillInput = document.createElement("input");
                                                acrobaticsSkillInput.setAttribute("id", "skill-acrobatics");
                                                acrobaticsSkillInput.setAttribute("type", "number");
                                                acrobaticsSkillInput.setAttribute("name", "acrobatics");
                                                
                                            acrobaticsValueContainer.appendChild(acrobaticsSkillInput);
                                            
                                    var strengthSkill2 = document.createElement("div");
                                        strengthSkill2.setAttribute("id", "strength-skill-2");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill2);
                                    
                                        var strengthSkill2ContainerTxt = document.createElement("div");
                                            strengthSkill2ContainerTxt.setAttribute("id", "strength-skill2-container-txt");
                                            strengthSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill2.appendChild(strengthSkill2ContainerTxt);
                                        
                                            var skillActualTxtStrength2 = document.createElement("p");
                                                skillActualTxtStrength2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength2.textContent = "Armorer:";
                                                
                                            strengthSkill2ContainerTxt.appendChild(skillActualTxtStrength2);
                                            
                                            var armorerContent = document.createElement("p");
                                                armorerContent.setAttribute("id", "armorer-content");
                                                armorerContent.setAttribute("class", "attribute-actual-value");
                                                armorerContent.textContent = "null";
                                                
                                            strengthSkill2ContainerTxt.appendChild(armorerContent);
                                            
                                        var armorerValueContainer = document.createElement("id");
                                            armorerValueContainer.setAttribute("id", "armorer-value-container");
                                            
                                        strengthSkill2.appendChild(armorerValueContainer);
                                        
                                            var armorerSkillInput = document.createElement("input");
                                                armorerSkillInput.setAttribute("id", "skill-armorer");
                                                armorerSkillInput.setAttribute("type", "number");
                                                armorerSkillInput.setAttribute("name", "armorer");
                                                
                                            armorerValueContainer.appendChild(armorerSkillInput);
                                            
                                    var strengthSkill3 = document.createElement("div");
                                        strengthSkill3.setAttribute("id", "strength-skill-3");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill3);
                                    
                                        var strengthSkill3ContainerTxt = document.createElement("div");
                                            strengthSkill3ContainerTxt.setAttribute("id", "strength-skill3-container-txt");
                                            strengthSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill3.appendChild(strengthSkill3ContainerTxt);
                                        
                                            var skillActualTxtStrength3 = document.createElement("p");
                                                skillActualTxtStrength3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength3.textContent = "Axe:";
                                                
                                            strengthSkill3ContainerTxt.appendChild(skillActualTxtStrength3);
                                            
                                            var axeContent = document.createElement("p");
                                                axeContent.setAttribute("id", "axe-content");
                                                axeContent.setAttribute("class", "attribute-actual-value");
                                                axeContent.textContent = "null";
                                                
                                            strengthSkill3ContainerTxt.appendChild(axeContent);
                                            
                                        var axeValueContainer = document.createElement("id");
                                            axeValueContainer.setAttribute("id", "axe-value-container");
                                            
                                        strengthSkill3.appendChild(axeValueContainer);
                                        
                                            var axeSkillInput = document.createElement("input");
                                                axeSkillInput.setAttribute("id", "skill-axe");
                                                axeSkillInput.setAttribute("type", "number");
                                                axeSkillInput.setAttribute("name", "axe");
                                                
                                            axeValueContainer.appendChild(axeSkillInput);
                                            
                                    var strengthSkill4 = document.createElement("div");
                                        strengthSkill4.setAttribute("id", "strength-skill-4");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill4);
                                    
                                        var strengthSkill4ContainerTxt = document.createElement("div");
                                            strengthSkill4ContainerTxt.setAttribute("id", "strength-skill4-container-txt");
                                            strengthSkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill4.appendChild(strengthSkill4ContainerTxt);
                                        
                                            var skillActualTxtStrength4 = document.createElement("p");
                                                skillActualTxtStrength4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength4.textContent = "Blunt weapon:";
                                                
                                            strengthSkill4ContainerTxt.appendChild(skillActualTxtStrength4);
                                            
                                            var bluntWeaponContent = document.createElement("p");
                                                bluntWeaponContent.setAttribute("id", "blunt-weapon-content");
                                                bluntWeaponContent.setAttribute("class", "attribute-actual-value");
                                                bluntWeaponContent.textContent = "null";
                                                
                                            strengthSkill4ContainerTxt.appendChild(bluntWeaponContent);
                                            
                                        var bluntWeaponValueContainer = document.createElement("id");
                                            bluntWeaponValueContainer.setAttribute("id", "blunt-weapon-value-container");
                                            
                                        strengthSkill4.appendChild(bluntWeaponValueContainer);
                                        
                                            var bluntWeaponSkillInput = document.createElement("input");
                                                bluntWeaponSkillInput.setAttribute("id", "skill-blunt-weapon");
                                                bluntWeaponSkillInput.setAttribute("type", "number");
                                                bluntWeaponSkillInput.setAttribute("name", "blunt-weapon");
                                                
                                            bluntWeaponValueContainer.appendChild(bluntWeaponSkillInput);
                                            
                                    var strengthSkill5 = document.createElement("div");
                                        strengthSkill5.setAttribute("id", "strength-skill-5");
                                        
                                    strengthSkillsContainer.appendChild(strengthSkill5);
                                    
                                        var strengthSkill5ContainerTxt = document.createElement("div");
                                            strengthSkill5ContainerTxt.setAttribute("id", "strength-skill5-container-txt");
                                            strengthSkill5ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        strengthSkill5.appendChild(strengthSkill5ContainerTxt);
                                        
                                            var skillActualTxtStrength5 = document.createElement("p");
                                                skillActualTxtStrength5.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtStrength5.textContent = "Long blade:";
                                                
                                            strengthSkill5ContainerTxt.appendChild(skillActualTxtStrength5);
                                            
                                            var longBladeContent = document.createElement("p");
                                                longBladeContent.setAttribute("id", "long-blade-content");
                                                longBladeContent.setAttribute("class", "attribute-actual-value");
                                                longBladeContent.textContent = "null";
                                                
                                            strengthSkill5ContainerTxt.appendChild(longBladeContent);
                                            
                                        var longBladeValueContainer = document.createElement("id");
                                            longBladeValueContainer.setAttribute("id", "long-blade-value-container");
                                            
                                        strengthSkill5.appendChild(longBladeValueContainer);
                                        
                                            var longBladeSkillInput = document.createElement("input");
                                                longBladeSkillInput.setAttribute("id", "skill-long-blade");
                                                longBladeSkillInput.setAttribute("type", "number");
                                                longBladeSkillInput.setAttribute("name", "long-blade");
                                                
                                            longBladeValueContainer.appendChild(longBladeSkillInput);        
                                            
                            var enduranceSkills = document.createElement("div");
                                enduranceSkills.setAttribute("id", "endurance-skills");
                                enduranceSkills.setAttribute("class", "skill-complete");
                                
                            skillsRow2.appendChild(enduranceSkills);
                            
                                var enduranceAttributeContainer = document.createElement("div");
                                    enduranceAttributeContainer.setAttribute("id", "endurance-attribute-container");
                                    enduranceAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                enduranceSkills.appendChild(enduranceAttributeContainer);
                                
                                    var attributeTxt13 = document.createElement("p");
                                        attributeTxt13.setAttribute("class", "attribute-txt");
                                        attributeTxt13.textContent = "Attribute";
                                        
                                    enduranceAttributeContainer.appendChild(attributeTxt13);
                                    
                                    var enduranceAttribute = document.createElement("div");
                                        enduranceAttribute.setAttribute("id", "endurance-attribute");
                                        
                                    enduranceAttributeContainer.appendChild(enduranceAttribute);
                                    
                                        var enduranceAttributeContainerTxt = document.createElement("div");
                                            enduranceAttributeContainerTxt.setAttribute("id", "endurance-container-txt");
                                            enduranceAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        enduranceAttribute.appendChild(enduranceAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt13 = document.createElement("p");
                                                attributeActualTxt13.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt13.textContent = "Endurance:";
                                                
                                            enduranceAttributeContainerTxt.appendChild(attributeActualTxt13);
                                            
                                            var enduranceContent = document.createElement("p");
                                                enduranceContent.setAttribute("id", "endurance-content");
                                                enduranceContent.setAttribute("class", "attribute-actual-value");
                                                enduranceContent.textContent = "Null:";
                                                
                                            enduranceAttributeContainerTxt.appendChild(enduranceContent);
                                            
                                        var enduranceValueContainer = document.createElement("div");
                                            enduranceValueContainer.setAttribute("id", "endurance-value-container");
                                            
                                        enduranceAttribute.appendChild(enduranceValueContainer);
                                        
                                            var enduranceAttributeInput = document.createElement("input");
                                                enduranceAttributeInput.setAttribute("type", "number");
                                                enduranceAttributeInput.setAttribute("id", "attribute-endurance");
                                                enduranceAttributeInput.setAttribute("name", "endruance");
                                                
                                            enduranceValueContainer.appendChild(enduranceAttributeInput);
                                            
                                var enduranceSkillsContainer = document.createElement("div");
                                    enduranceSkillsContainer.setAttribute("id", "endurance-skills-container");
                                    enduranceSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                enduranceSkills.appendChild(enduranceSkillsContainer);
                                
                                    var skillTxt12 = document.createElement("p");
                                        skillTxt12.setAttribute("class", "skill-txt");
                                        skillTxt12.textContent = "Skills";
                                        
                                    enduranceSkillsContainer.appendChild(skillTxt12);
                                    
                                    var enduranceSkill1 = document.createElement("div");
                                        enduranceSkill1.setAttribute("id", "endurance-skill-1");
                                        
                                    enduranceSkillsContainer.appendChild(enduranceSkill1);
                                    
                                        var enduranceSkill1ContainerTxt = document.createElement("div");
                                            enduranceSkill1ContainerTxt.setAttribute("id", "endurance-skill1-container-txt");
                                            enduranceSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        enduranceSkill1.appendChild(enduranceSkill1ContainerTxt);
                                        
                                            var skillActualTxtEndurance1 = document.createElement("p");
                                                skillActualTxtEndurance1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtEndurance1.textContent = "Heavy armor:";
                                                
                                            enduranceSkill1ContainerTxt.appendChild(skillActualTxtEndurance1);
                                            
                                            var heavyArmorContent = document.createElement("p");
                                                heavyArmorContent.setAttribute("id", "heavy-armor-content");
                                                heavyArmorContent.setAttribute("class", "attribute-actual-value");
                                                heavyArmorContent.textContent = "null";
                                                
                                            enduranceSkill1ContainerTxt.appendChild(heavyArmorContent);
                                            
                                        var heavyArmorValueContainer = document.createElement("id");
                                            heavyArmorValueContainer.setAttribute("id", "heavy-armor-value-container");
                                            
                                        enduranceSkill1.appendChild(heavyArmorValueContainer);
                                        
                                            var heavyArmorSkillInput = document.createElement("input");
                                                heavyArmorSkillInput.setAttribute("id", "skill-heavy-armor");
                                                heavyArmorSkillInput.setAttribute("type", "number");
                                                heavyArmorSkillInput.setAttribute("name", "heavy-armor");
                                                
                                            heavyArmorValueContainer.appendChild(heavyArmorSkillInput);
                                            
                                    var enduranceSkill2 = document.createElement("div");
                                        enduranceSkill2.setAttribute("id", "endurance-skill-2");
                                        
                                    enduranceSkillsContainer.appendChild(enduranceSkill2);
                                    
                                        var enduranceSkill2ContainerTxt = document.createElement("div");
                                            enduranceSkill2ContainerTxt.setAttribute("id", "endurance-skill2-container-txt");
                                            enduranceSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        enduranceSkill2.appendChild(enduranceSkill2ContainerTxt);
                                        
                                            var skillActualTxtEndurance2 = document.createElement("p");
                                                skillActualTxtEndurance2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtEndurance2.textContent = "Medium armor:";
                                                
                                            enduranceSkill2ContainerTxt.appendChild(skillActualTxtEndurance2);
                                            
                                            var mediumArmorContent = document.createElement("p");
                                                mediumArmorContent.setAttribute("id", "medium-armor-content");
                                                mediumArmorContent.setAttribute("class", "attribute-actual-value");
                                                mediumArmorContent.textContent = "null";
                                                
                                            enduranceSkill2ContainerTxt.appendChild(mediumArmorContent);
                                            
                                        var mediumArmorValueContainer = document.createElement("id");
                                            mediumArmorValueContainer.setAttribute("id", "armorer-value-container");
                                            
                                        enduranceSkill2.appendChild(mediumArmorValueContainer);
                                        
                                            var mediumArmorSkillInput = document.createElement("input");
                                                mediumArmorSkillInput.setAttribute("id", "skill-medium-armor");
                                                mediumArmorSkillInput.setAttribute("type", "number");
                                                mediumArmorSkillInput.setAttribute("name", "medium-armor");
                                                
                                            mediumArmorValueContainer.appendChild(mediumArmorSkillInput);
                                            
                                    var enduranceSkill3 = document.createElement("div");
                                        enduranceSkill3.setAttribute("id", "endurance-skill-3");
                                        
                                    enduranceSkillsContainer.appendChild(enduranceSkill3);
                                    
                                        var enduranceSkill3ContainerTxt = document.createElement("div");
                                            enduranceSkill3ContainerTxt.setAttribute("id", "endurance-skill3-container-txt");
                                            enduranceSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        enduranceSkill3.appendChild(enduranceSkill3ContainerTxt);
                                        
                                            var skillActualTxtEndurance3 = document.createElement("p");
                                                skillActualTxtEndurance3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtEndurance3.textContent = "Spear:";
                                                
                                            enduranceSkill3ContainerTxt.appendChild(skillActualTxtEndurance3);
                                            
                                            var spearContent = document.createElement("p");
                                                spearContent.setAttribute("id", "spear-content");
                                                spearContent.setAttribute("class", "attribute-actual-value");
                                                spearContent.textContent = "null";
                                                
                                            enduranceSkill3ContainerTxt.appendChild(spearContent);
                                            
                                        var spearValueContainer = document.createElement("id");
                                            spearValueContainer.setAttribute("id", "spear-value-container");
                                            
                                        enduranceSkill3.appendChild(spearValueContainer);
                                        
                                            var spearSkillInput = document.createElement("input");
                                                spearSkillInput.setAttribute("id", "skill-spear");
                                                spearSkillInput.setAttribute("type", "number");
                                                spearSkillInput.setAttribute("name", "spear");
                                                
                                            spearValueContainer.appendChild(spearSkillInput);
                                            
                            var speedSkills = document.createElement("div");
                                speedSkills.setAttribute("id", "speed-skills");
                                speedSkills.setAttribute("class", "skill-complete");
                                
                            skillsRow2.appendChild(speedSkills);
                            
                                var speedAttributeContainer = document.createElement("div");
                                    speedAttributeContainer.setAttribute("id", "speed-attribute-container");
                                    speedAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                speedSkills.appendChild(speedAttributeContainer);
                                
                                    var attributeTxt14 = document.createElement("p");
                                        attributeTxt14.setAttribute("class", "attribute-txt");
                                        attributeTxt14.textContent = "Attribute";
                                        
                                    speedAttributeContainer.appendChild(attributeTxt14);
                                    
                                    var speedAttribute = document.createElement("div");
                                        speedAttribute.setAttribute("id", "speed-attribute");
                                        
                                    speedAttributeContainer.appendChild(speedAttribute);
                                    
                                        var speedAttributeContainerTxt = document.createElement("div");
                                            speedAttributeContainerTxt.setAttribute("id", "speed-container-txt");
                                            speedAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        speedAttribute.appendChild(speedAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt14 = document.createElement("p");
                                                attributeActualTxt14.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt14.textContent = "Speed:";
                                                
                                            speedAttributeContainerTxt.appendChild(attributeActualTxt14);
                                            
                                            var speedContent = document.createElement("p");
                                                speedContent.setAttribute("id", "speed-content");
                                                speedContent.setAttribute("class", "attribute-actual-value");
                                                speedContent.textContent = "Null:";
                                                
                                            speedAttributeContainerTxt.appendChild(speedContent);
                                            
                                        var speedValueContainer = document.createElement("div");
                                            speedValueContainer.setAttribute("id", "speed-value-container");
                                            
                                        speedAttribute.appendChild(speedValueContainer);
                                        
                                            var speedAttributeInput = document.createElement("input");
                                                speedAttributeInput.setAttribute("type", "number");
                                                speedAttributeInput.setAttribute("id", "attribute-speed");
                                                speedAttributeInput.setAttribute("name", "speed");
                                                
                                            speedValueContainer.appendChild(speedAttributeInput);
                                            
                                var speedSkillsContainer = document.createElement("div");
                                    speedSkillsContainer.setAttribute("id", "speed-skills-container");
                                    speedSkillsContainer.setAttribute("class", "attribute-container");
                                    
                                speedSkills.appendChild(speedSkillsContainer);
                                
                                    var skillTxt13 = document.createElement("p");
                                        skillTxt13.setAttribute("class", "skill-txt");
                                        skillTxt13.textContent = "Skills";
                                        
                                    speedSkillsContainer.appendChild(skillTxt13);
                                    
                                    var speedSkill1 = document.createElement("div");
                                        speedSkill1.setAttribute("id", "speed-skill-1");
                                        
                                    speedSkillsContainer.appendChild(speedSkill1);
                                    
                                        var speedSkill1ContainerTxt = document.createElement("div");
                                            speedSkill1ContainerTxt.setAttribute("id", "speed-skill1-container-txt");
                                            speedSkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        speedSkill1.appendChild(speedSkill1ContainerTxt);
                                        
                                            var skillActualTxtSpeed1 = document.createElement("p");
                                                skillActualTxtSpeed1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtSpeed1.textContent = "Athletics:";
                                                
                                            speedSkill1ContainerTxt.appendChild(skillActualTxtSpeed1);
                                            
                                            var athleticsContent = document.createElement("p");
                                                athleticsContent.setAttribute("id", "athletics-content");
                                                athleticsContent.setAttribute("class", "attribute-actual-value");
                                                athleticsContent.textContent = "null";
                                                
                                            speedSkill1ContainerTxt.appendChild(athleticsContent);
                                            
                                        var athleticsValueContainer = document.createElement("id");
                                            athleticsValueContainer.setAttribute("id", "athletics-value-container");
                                            
                                        speedSkill1.appendChild(athleticsValueContainer);
                                        
                                            var athleticsSkillInput = document.createElement("input");
                                                athleticsSkillInput.setAttribute("id", "skill-athletics");
                                                athleticsSkillInput.setAttribute("type", "number");
                                                athleticsSkillInput.setAttribute("name", "athletics");
                                                
                                            athleticsValueContainer.appendChild(athleticsSkillInput);
                                            
                                    var speedSkill2 = document.createElement("div");
                                        speedSkill2.setAttribute("id", "speed-skill-2");
                                        
                                    speedSkillsContainer.appendChild(speedSkill2);
                                    
                                        var speedSkill2ContainerTxt = document.createElement("div");
                                            speedSkill2ContainerTxt.setAttribute("id", "speed-skill2-container-txt");
                                            speedSkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        speedSkill2.appendChild(speedSkill2ContainerTxt);
                                        
                                            var skillActualTxtSpeed2 = document.createElement("p");
                                                skillActualTxtSpeed2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtSpeed2.textContent = "Hand to hand:";
                                                
                                            speedSkill2ContainerTxt.appendChild(skillActualTxtSpeed2);
                                            
                                            var handToHandContent = document.createElement("p");
                                                handToHandContent.setAttribute("id", "hand-to-hand-content");
                                                handToHandContent.setAttribute("class", "attribute-actual-value");
                                                handToHandContent.textContent = "null";
                                                
                                            speedSkill2ContainerTxt.appendChild(handToHandContent);
                                            
                                        var handToHandValueContainer = document.createElement("id");
                                            handToHandValueContainer.setAttribute("id", "hand-to-hand-value-container");
                                            
                                        speedSkill2.appendChild(handToHandValueContainer);
                                        
                                            var handToHandSkillInput = document.createElement("input");
                                                handToHandSkillInput.setAttribute("id", "skill-hand-to-hand");
                                                handToHandSkillInput.setAttribute("type", "number");
                                                handToHandSkillInput.setAttribute("name", "hand-to-hand");
                                                
                                            handToHandValueContainer.appendChild(handToHandSkillInput);
                                            
                                    var speedSkill3 = document.createElement("div");
                                        speedSkill3.setAttribute("id", "speed-skill-3");
                                        
                                    speedSkillsContainer.appendChild(speedSkill3);
                                    
                                        var speedSkill3ContainerTxt = document.createElement("div");
                                            speedSkill3ContainerTxt.setAttribute("id", "speed-skill3-container-txt");
                                            speedSkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        speedSkill3.appendChild(speedSkill3ContainerTxt);
                                        
                                            var skillActualTxtSpeed3 = document.createElement("p");
                                                skillActualTxtSpeed3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtSpeed3.textContent = "Short blade:";
                                                
                                            speedSkill3ContainerTxt.appendChild(skillActualTxtSpeed3);
                                            
                                            var shortBladeContent = document.createElement("p");
                                                shortBladeContent.setAttribute("id", "short-blade-content");
                                                shortBladeContent.setAttribute("class", "attribute-actual-value");
                                                shortBladeContent.textContent = "null";
                                                
                                            speedSkill3ContainerTxt.appendChild(shortBladeContent);
                                            
                                        var shortBladeValueContainer = document.createElement("id");
                                            shortBladeValueContainer.setAttribute("id", "short-blade-value-container");
                                            
                                        speedSkill3.appendChild(shortBladeValueContainer);
                                        
                                            var shortBladeSkillInput = document.createElement("input");
                                                shortBladeSkillInput.setAttribute("id", "skill-short-blade");
                                                shortBladeSkillInput.setAttribute("type", "number");
                                                shortBladeSkillInput.setAttribute("name", "short-blade");
                                                
                                            shortBladeValueContainer.appendChild(shortBladeSkillInput);    
                                            
                                    var speedSkill4 = document.createElement("div");
                                        speedSkill4.setAttribute("id", "speed-skill-4");
                                        
                                    speedSkillsContainer.appendChild(speedSkill4);
                                    
                                        var speedSkill4ContainerTxt = document.createElement("div");
                                            speedSkill4ContainerTxt.setAttribute("id", "speed-skill4-container-txt");
                                            speedSkill4ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        speedSkill4.appendChild(speedSkill4ContainerTxt);
                                        
                                            var skillActualTxtSpeed4 = document.createElement("p");
                                                skillActualTxtSpeed4.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtSpeed4.textContent = "Unarmored:";
                                                
                                            speedSkill4ContainerTxt.appendChild(skillActualTxtSpeed4);
                                            
                                            var unarmoredContent = document.createElement("p");
                                                unarmoredContent.setAttribute("id", "unarmored-content");
                                                unarmoredContent.setAttribute("class", "attribute-actual-value");
                                                unarmoredContent.textContent = "null";
                                                
                                            speedSkill4ContainerTxt.appendChild(unarmoredContent);
                                            
                                        var unarmoredValueContainer = document.createElement("id");
                                            unarmoredValueContainer.setAttribute("id", "unarmored-value-container");
                                            
                                        speedSkill4.appendChild(unarmoredValueContainer);
                                        
                                            var unarmoredSkillInput = document.createElement("input");
                                                unarmoredSkillInput.setAttribute("id", "skill-unarmored");
                                                unarmoredSkillInput.setAttribute("type", "number");
                                                unarmoredSkillInput.setAttribute("name", "unarmored");
                                                
                                            unarmoredValueContainer.appendChild(unarmoredSkillInput);
                                
                                var personalitySkills = document.createElement("div");
                                personalitySkills.setAttribute("id", "personality-skills");
                                personalitySkills.setAttribute("class", "skill-complete");
                                
                            skillsRow2.appendChild(personalitySkills);
                            
                                var personalityAttributeContainer = document.createElement("div");
                                    personalityAttributeContainer.setAttribute("id", "personality-attribute-container");
                                    personalityAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                personalitySkills.appendChild(personalityAttributeContainer);
                                
                                    var attributeTxt15 = document.createElement("p");
                                        attributeTxt15.setAttribute("class", "attribute-txt");
                                        attributeTxt15.textContent = "Attribute";
                                        
                                    personalityAttributeContainer.appendChild(attributeTxt15);
                                    
                                    var personalityAttribute = document.createElement("div");
                                        personalityAttribute.setAttribute("id", "personality-attribute");
                                        
                                    personalityAttributeContainer.appendChild(personalityAttribute);
                                    
                                        var personalityAttributeContainerTxt = document.createElement("div");
                                            personalityAttributeContainerTxt.setAttribute("id", "personality-container-txt");
                                            personalityAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        personalityAttribute.appendChild(personalityAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt15 = document.createElement("p");
                                                attributeActualTxt15.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt15.textContent = "Personality:";
                                                
                                            personalityAttributeContainerTxt.appendChild(attributeActualTxt15);
                                            
                                            var personalityContent = document.createElement("p");
                                                personalityContent.setAttribute("id", "personality-content");
                                                personalityContent.setAttribute("class", "attribute-actual-value");
                                                personalityContent.textContent = "Null:";
                                                
                                            personalityAttributeContainerTxt.appendChild(personalityContent);
                                            
                                        var personalityValueContainer = document.createElement("div");
                                            personalityValueContainer.setAttribute("id", "personality-value-container");
                                            
                                        personalityAttribute.appendChild(personalityValueContainer);
                                        
                                            var personalityAttributeInput = document.createElement("input");
                                                personalityAttributeInput.setAttribute("type", "number");
                                                personalityAttributeInput.setAttribute("id", "attribute-personality");
                                                personalityAttributeInput.setAttribute("name", "personality");
                                                
                                            personalityValueContainer.appendChild(personalityAttributeInput);
                                            
                                var personalitySkillsContainer = document.createElement("div");
                                    personalitySkillsContainer.setAttribute("id", "personality-skills-container");
                                    personalitySkillsContainer.setAttribute("class", "attribute-container");
                                    
                                personalitySkills.appendChild(personalitySkillsContainer);
                                
                                    var skillTxt14 = document.createElement("p");
                                        skillTxt14.setAttribute("class", "skill-txt");
                                        skillTxt14.textContent = "Skills";
                                        
                                    personalitySkillsContainer.appendChild(skillTxt14);
                                    
                                    var personalitySkill1 = document.createElement("div");
                                        personalitySkill1.setAttribute("id", "personality-skill-1");
                                        
                                    personalitySkillsContainer.appendChild(personalitySkill1);
                                    
                                        var personalitySkill1ContainerTxt = document.createElement("div");
                                            personalitySkill1ContainerTxt.setAttribute("id", "personality-skill1-container-txt");
                                            personalitySkill1ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        personalitySkill1.appendChild(personalitySkill1ContainerTxt);
                                        
                                            var skillActualTxtPersonality1 = document.createElement("p");
                                                skillActualTxtPersonality1.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtPersonality1.textContent = "Illusion:";
                                                
                                            personalitySkill1ContainerTxt.appendChild(skillActualTxtPersonality1);
                                            
                                            var illusionContent = document.createElement("p");
                                                illusionContent.setAttribute("id", "illusion-content");
                                                illusionContent.setAttribute("class", "attribute-actual-value");
                                                illusionContent.textContent = "null";
                                                
                                            personalitySkill1ContainerTxt.appendChild(illusionContent);
                                            
                                        var illusionValueContainer = document.createElement("id");
                                            illusionValueContainer.setAttribute("id", "illusion-value-container");
                                            
                                        personalitySkill1.appendChild(illusionValueContainer);
                                        
                                            var illusionSkillInput= document.createElement("input");
                                                illusionSkillInput.setAttribute("id", "skill-illusion");
                                                illusionSkillInput.setAttribute("type", "number");
                                                illusionSkillInput.setAttribute("name", "illusion");
                                                
                                            illusionValueContainer.appendChild(illusionSkillInput);
                                            
                                    var personalitySkill2 = document.createElement("div");
                                        personalitySkill2.setAttribute("id", "personality-skill-2");
                                        
                                    personalitySkillsContainer.appendChild(personalitySkill2);
                                    
                                        var personalitySkill2ContainerTxt = document.createElement("div");
                                            personalitySkill2ContainerTxt.setAttribute("id", "personality-skill2-container-txt");
                                            personalitySkill2ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        personalitySkill2.appendChild(personalitySkill2ContainerTxt);
                                        
                                            var skillActualTxtPersonality2 = document.createElement("p");
                                                skillActualTxtPersonality2.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtPersonality2.textContent = "Mercantile:";
                                                
                                            personalitySkill2ContainerTxt.appendChild(skillActualTxtPersonality2);
                                            
                                            var mercantileContent = document.createElement("p");
                                                mercantileContent.setAttribute("id", "mercantile-content");
                                                mercantileContent.setAttribute("class", "attribute-actual-value");
                                                mercantileContent.textContent = "null";
                                                
                                            personalitySkill2ContainerTxt.appendChild(mercantileContent);
                                            
                                        var mercantileValueContainer = document.createElement("id");
                                            mercantileValueContainer.setAttribute("id", "mercantile-value-container");
                                            
                                        personalitySkill2.appendChild(mercantileValueContainer);
                                        
                                            var mercantileSkillInput = document.createElement("input");
                                                mercantileSkillInput.setAttribute("id", "skill-mercantile");
                                                mercantileSkillInput.setAttribute("type", "number");
                                                mercantileSkillInput.setAttribute("name", "mercantile");
        
                                            mercantileValueContainer.appendChild(mercantileSkillInput);
                                            
                                    var personalitySkill3 = document.createElement("div");
                                        personalitySkill3.setAttribute("id", "personality-skill-3");
                                        
                                    personalitySkillsContainer.appendChild(personalitySkill3);
                                    
                                        var personalitySkill3ContainerTxt = document.createElement("div");
                                            personalitySkill3ContainerTxt.setAttribute("id", "personality-skill3-container-txt");
                                            personalitySkill3ContainerTxt.setAttribute("class", "attribute-value-container");
                                            
                                        personalitySkill3.appendChild(personalitySkill3ContainerTxt);
                                        
                                            var skillActualTxtPersonality3 = document.createElement("p");
                                                skillActualTxtPersonality3.setAttribute("class", "skill-actualTxt");
                                                skillActualTxtPersonality3.textContent = "Speechcraft:";
                                                
                                            personalitySkill3ContainerTxt.appendChild(skillActualTxtPersonality3);
                                            
                                            var speechcraftContent = document.createElement("p");
                                                speechcraftContent.setAttribute("id", "speechcraft-content");
                                                speechcraftContent.setAttribute("class", "attribute-actual-value");
                                                speechcraftContent.textContent = "null";
                                                
                                            personalitySkill3ContainerTxt.appendChild(speechcraftContent);
                                            
                                        var speechcraftValueContainer = document.createElement("id");
                                            speechcraftValueContainer.setAttribute("id", "speechcraft-value-container");
                                            
                                        personalitySkill3.appendChild(speechcraftValueContainer);
                                        
                                            var speechcraftSkillInput = document.createElement("input");
                                                speechcraftSkillInput.setAttribute("id", "skill-speechcraft");
                                                speechcraftSkillInput.setAttribute("type", "number");
                                                speechcraftSkillInput.setAttribute("name", "speechcraft");
                                                
                                            speechcraftValueContainer.appendChild(speechcraftSkillInput);  
                                            
                                var luckAttributeContainer = document.createElement("div");
                                    luckAttributeContainer.setAttribute("id", "luck-attribute-container");
                                    luckAttributeContainer.setAttribute("class", "attribute-container");
                                    
                                personalitySkills.appendChild(luckAttributeContainer);
                                
                                    var attributeTxt16 = document.createElement("p");
                                        attributeTxt16.setAttribute("class", "attribute-txt");
                                        attributeTxt16.textContent = "Attribute";
                                        
                                    luckAttributeContainer.appendChild(attributeTxt16);
                                    
                                    var luckAttribute = document.createElement("div");
                                        luckAttribute.setAttribute("id", "luck-attribute");
                                        
                                    luckAttributeContainer.appendChild(luckAttribute);
                                    
                                        var luckAttributeContainerTxt = document.createElement("div");
                                            luckAttributeContainerTxt.setAttribute("id", "luck-container-txt");
                                            luckAttributeContainerTxt.setAttribute("class", "attriubte-value-container");
                                            
                                        luckAttributeContainer.appendChild(luckAttributeContainerTxt);
                                        
                                        
                                            var attributeActualTxt16 = document.createElement("p");
                                                attributeActualTxt16.setAttribute("class", "attribute-actul-txt");
                                                attributeActualTxt16.textContent = "Luck:";
                                                
                                            luckAttributeContainerTxt.appendChild(attributeActualTxt16);
                                            
                                            var luckContent = document.createElement("p");
                                                luckContent.setAttribute("id", "luck-content");
                                                luckContent.setAttribute("class", "attribute-actual-value");
                                                luckContent.textContent = "Null:";
                                                
                                            luckAttributeContainerTxt.appendChild(luckContent);
                                            
                                        var luckValueContainer = document.createElement("div");
                                            luckValueContainer.setAttribute("id", "luck-value-container");
                                            
                                        luckAttributeContainer.appendChild(luckValueContainer);
                                        
                                            var luckAttributeInput = document.createElement("input");
                                                luckAttributeInput.setAttribute("type", "number");
                                                luckAttributeInput.setAttribute("id", "attribute-luck");
                                                luckAttributeInput.setAttribute("name", "luck");
                                                
                                            luckValueContainer.appendChild(luckAttributeInput);
                                            
                    var saveCalc = document.createElement("div");
                        saveCalc.setAttribute("id", "save-calc");
                        
                calculatorParent.appendChild(saveCalc);
                    
                        var savePOST = document.createElement("form");
                            savePOST.setAttribute("id", "savePOST");
                            savePOST.setAttribute("action", "account-api.php");
                            savePOST.setAttribute("method", "POST");
                            
                        saveCalc.appendChild(savePOST);
                        
                            var charTableInput = document.createElement("input");
                                charTableInput.setAttribute("type", "hidden");
                                charTableInput.setAttribute("name", "charTable");
                                charTableInput.setAttribute("id", "charTable");
                                
                            savePOST.appendChild(charTableInput);
                            
                            var charColumnInput = document.createElement("input");
                                charColumnInput.setAttribute("type", "hidden");
                                charColumnInput.setAttribute("name", "charColumn");
                                charColumnInput.setAttribute("id", "charColumn");
                                
                            savePOST.appendChild(charColumnInput);
                            
                            var acc_idSaveInput = document.createElement("input");
                                acc_idSaveInput.setAttribute("type", "hidden");
                                acc_idSaveInput.setAttribute("name", "acc_idSave");
                                acc_idSaveInput.setAttribute("id", "acc_idSave");
                                
                            savePOST.appendChild(acc_idSaveInput);
                            
                            var charNameInput = document.createElement("input");
                                charNameInput.setAttribute("type", "hidden");
                                charNameInput.setAttribute("name", "charName");
                                charNameInput.setAttribute("id", "charName");
                                
                            savePOST.appendChild(charNameInput);
                            
                            var healthInput = document.createElement("input");
                                healthInput.setAttribute("type", "hidden");
                                healthInput.setAttribute("name", "health");
                                healthInput.setAttribute("id", "health");
                                
                            savePOST.appendChild(healthInput);
                            
                            var magickaInput = document.createElement("input");
                                magickaInput.setAttribute("type", "hidden");
                                magickaInput.setAttribute("name", "magicka");
                                magickaInput.setAttribute("id", "magicka");
                                
                            savePOST.appendChild(magickaInput);
                            
                            var fatigueInput = document.createElement("input");
                                fatigueInput.setAttribute("type", "hidden");
                                fatigueInput.setAttribute("name", "fatigue");
                                fatigueInput.setAttribute("id", "fatigue");
                                
                            savePOST.appendChild(fatigueInput);
                            
                            var encumbranceInput = document.createElement("input");
                                encumbranceInput.setAttribute("type", "hidden");
                                encumbranceInput.setAttribute("name", "encumbrance");
                                encumbranceInput.setAttribute("id", "encumbrance");
                                
                            savePOST.appendChild(encumbranceInput);
                            
                            var strengthInput = document.createElement("input");
                                strengthInput.setAttribute("type", "hidden");
                                strengthInput.setAttribute("name", "strength");
                                strengthInput.setAttribute("id", "strength");
                                
                            savePOST.appendChild(strengthInput);
                            
                            var intelligenceInput = document.createElement("input");
                                intelligenceInput.setAttribute("type", "hidden");
                                intelligenceInput.setAttribute("name", "intelligence");
                                intelligenceInput.setAttribute("id", "intelligence");
                                
                            savePOST.appendChild(intelligenceInput);
                            
                            var willpowerInput = document.createElement("input");
                                willpowerInput.setAttribute("type", "hidden");
                                willpowerInput.setAttribute("name", "willpower");
                                willpowerInput.setAttribute("id", "willpower");
                                
                            savePOST.appendChild(willpowerInput);
                            
                            var agilityInput = document.createElement("input");
                                agilityInput.setAttribute("type", "hidden");
                                agilityInput.setAttribute("name", "agility");
                                agilityInput.setAttribute("id", "agility");
                                
                            savePOST.appendChild(agilityInput);
                            
                            var speedInput = document.createElement("input");
                                speedInput.setAttribute("type", "hidden");
                                speedInput.setAttribute("name", "speed");
                                speedInput.setAttribute("id", "speed");
                                
                            savePOST.appendChild(speedInput);
                            
                            var enduranceInput = document.createElement("input");
                                enduranceInput.setAttribute("type", "hidden");
                                enduranceInput.setAttribute("name", "endurance");
                                enduranceInput.setAttribute("id", "endurance");
                                
                            savePOST.appendChild(enduranceInput);
                            
                            var personalityInput = document.createElement("input");
                                personalityInput.setAttribute("type", "hidden");
                                personalityInput.setAttribute("name", "personality");
                                personalityInput.setAttribute("id", "personality");
                                
                            savePOST.appendChild(personalityInput);
                            
                            var luckInput = document.createElement("input");
                                luckInput.setAttribute("type", "hidden");
                                luckInput.setAttribute("name", "luck");
                                luckInput.setAttribute("id", "luck");
                                
                            savePOST.appendChild(luckInput);
                            
                            var magickaMultiplierBonusInput = document.createElement("input");
                                magickaMultiplierBonusInput.setAttribute("type", "hidden");
                                magickaMultiplierBonusInput.setAttribute("name", "magickaMultiplierBonus");
                                magickaMultiplierBonusInput.setAttribute("id", "magickaMultiplierBonus");
                                
                            savePOST.appendChild(magickaMultiplierBonusInput);
                            
                            var heavyArmorInput = document.createElement("input");
                                heavyArmorInput.setAttribute("type", "hidden");
                                heavyArmorInput.setAttribute("name", "heavyArmor");
                                heavyArmorInput.setAttribute("id", "heavyArmor");
                                
                            savePOST.appendChild(heavyArmorInput);
                            
                            var mediumArmorInput = document.createElement("input");
                                mediumArmorInput.setAttribute("type", "hidden");
                                mediumArmorInput.setAttribute("name", "mediumArmor");
                                mediumArmorInput.setAttribute("id", "mediumArmor");
                                
                            savePOST.appendChild(mediumArmorInput);
                            
                            var spearInput = document.createElement("input");
                                spearInput.setAttribute("type", "hidden");
                                spearInput.setAttribute("name", "spear");
                                spearInput.setAttribute("id", "spear");
                                
                            savePOST.appendChild(spearInput);
                            
                            var acrobaticsInput = document.createElement("input");
                                acrobaticsInput.setAttribute("type", "hidden");
                                acrobaticsInput.setAttribute("name", "acrobatics");
                                acrobaticsInput.setAttribute("id", "acrobatics");
                                
                            savePOST.appendChild(acrobaticsInput);
                            
                            var armorerInput = document.createElement("input");
                                armorerInput.setAttribute("type", "hidden");
                                armorerInput.setAttribute("name", "armorer");
                                armorerInput.setAttribute("id", "armorer");
                                
                            savePOST.appendChild(armorerInput);
                            
                            var axeInput = document.createElement("input");
                                axeInput.setAttribute("type", "hidden");
                                axeInput.setAttribute("name", "axe");
                                axeInput.setAttribute("id", "axe");
                                
                            savePOST.appendChild(axeInput);
                            
                            var bluntWeaponInput = document.createElement("input");
                                bluntWeaponInput.setAttribute("type", "hidden");
                                bluntWeaponInput.setAttribute("name", "bluntWeapon");
                                bluntWeaponInput.setAttribute("id", "bluntWeapon");
                                
                            savePOST.appendChild(bluntWeaponInput);
        
                            var longBladeInput = document.createElement("input");
                                longBladeInput.setAttribute("type", "hidden");
                                longBladeInput.setAttribute("name", "longBlade");
                                longBladeInput.setAttribute("id", "longBlade");
                                
                            savePOST.appendChild(longBladeInput);
                            
                            var blockInput = document.createElement("input");
                                blockInput.setAttribute("type", "hidden");
                                blockInput.setAttribute("name", "block");
                                blockInput.setAttribute("id", "block");
                                
                            savePOST.appendChild(blockInput);
                            
                            var lightArmorInput = document.createElement("input");
                                lightArmorInput.setAttribute("type", "hidden");
                                lightArmorInput.setAttribute("name", "lightArmor");
                                lightArmorInput.setAttribute("id", "lightArmor");
                                
                            savePOST.appendChild(lightArmorInput);
                            
                            var marksmanInput = document.createElement("input");
                                marksmanInput.setAttribute("type", "hidden");
                                marksmanInput.setAttribute("name", "marksman");
                                marksmanInput.setAttribute("id", "marksman");
                                
                            savePOST.appendChild(marksmanInput);
                            
                            var sneakInput = document.createElement("input");
                                sneakInput.setAttribute("type", "hidden");
                                sneakInput.setAttribute("name", "sneak");
                                sneakInput.setAttribute("id", "sneak");
                                
                            savePOST.appendChild(sneakInput);
                            
                            var athleticsInput = document.createElement("input");
                                athleticsInput.setAttribute("type", "hidden");
                                athleticsInput.setAttribute("name", "athletics");
                                athleticsInput.setAttribute("id", "athletics");
                                
                            savePOST.appendChild(athleticsInput);
                            
                            var handToHandInput = document.createElement("input");
                                handToHandInput.setAttribute("type", "hidden");
                                handToHandInput.setAttribute("name", "handToHand");
                                handToHandInput.setAttribute("id", "handToHand");
                                
                            savePOST.appendChild(handToHandInput);
                            
                            var shortBladeInput = document.createElement("input");
                                shortBladeInput.setAttribute("type", "hidden");
                                shortBladeInput.setAttribute("name", "shortBlade");
                                shortBladeInput.setAttribute("id", "shortBlade");
                                
                            savePOST.appendChild(shortBladeInput);
                            
                            var unarmoredInput = document.createElement("input");
                                unarmoredInput.setAttribute("type", "hidden");
                                unarmoredInput.setAttribute("name", "unarmored");
                                unarmoredInput.setAttribute("id", "unarmored");
                                
                            savePOST.appendChild(unarmoredInput);
                            
                            var illusionInput = document.createElement("input");
                                illusionInput.setAttribute("type", "hidden");
                                illusionInput.setAttribute("name", "illusion");
                                illusionInput.setAttribute("id", "illusion");
                                
                            savePOST.appendChild(illusionInput);
                            
                            var mercantileInput = document.createElement("input");
                                mercantileInput.setAttribute("type", "hidden");
                                mercantileInput.setAttribute("name", "mercantile");
                                mercantileInput.setAttribute("id", "mercantile");
                                
                            savePOST.appendChild(mercantileInput);
                            
                            var speechcraftInput = document.createElement("input");
                                speechcraftInput.setAttribute("type", "hidden");
                                speechcraftInput.setAttribute("name", "speechcraft");
                                speechcraftInput.setAttribute("id", "speechcraft");
                                
                            savePOST.appendChild(speechcraftInput);
                            
                            var alchemyInput = document.createElement("input");
                                alchemyInput.setAttribute("type", "hidden");
                                alchemyInput.setAttribute("name", "alchemy");
                                alchemyInput.setAttribute("id", "alchemy");
                                
                            savePOST.appendChild(alchemyInput);
                            
                            var conjurationInput = document.createElement("input");
                                conjurationInput.setAttribute("type", "hidden");
                                conjurationInput.setAttribute("name", "conjuration");
                                conjurationInput.setAttribute("id", "conjuration");
                                
                            savePOST.appendChild(conjurationInput);
                            
                            var enchantInput = document.createElement("input");
                                enchantInput.setAttribute("type", "hidden");
                                enchantInput.setAttribute("name", "enchant");
                                enchantInput.setAttribute("id", "enchant");
                                
                            savePOST.appendChild(enchantInput);
                            
                            var securityInput = document.createElement("input");
                                securityInput.setAttribute("type", "hidden");
                                securityInput.setAttribute("name", "xsecurity");
                                securityInput.setAttribute("id", "security");
                                
                            savePOST.appendChild(securityInput);
                            
                            var alterationInput = document.createElement("input");
                                alterationInput.setAttribute("type", "hidden");
                                alterationInput.setAttribute("name", "alteration");
                                alterationInput.setAttribute("id", "alteration");
                                
                            savePOST.appendChild(alterationInput);
                            
                            var destructionInput = document.createElement("input");
                                destructionInput.setAttribute("type", "hidden");
                                destructionInput.setAttribute("name", "destruction");
                                destructionInput.setAttribute("id", "destruction");
                                
                            savePOST.appendChild(destructionInput);
                            
                            var mysticismInput = document.createElement("input");
                                mysticismInput.setAttribute("type", "hidden");
                                mysticismInput.setAttribute("name", "mysticism");
                                mysticismInput.setAttribute("id", "mysticism");
                                
                            savePOST.appendChild(mysticismInput);
                            
                            var restorationInput = document.createElement("input");
                                restorationInput.setAttribute("type", "hidden");
                                restorationInput.setAttribute("name", "restoration");
                                restorationInput.setAttribute("id", "restoration");
                                
                            savePOST.appendChild(restorationInput);
                            
                            var genderInput = document.createElement("input");
                                genderInput.setAttribute("type", "hidden");
                                genderInput.setAttribute("name", "gender");
                                genderInput.setAttribute("id", "gender");
                                
                            savePOST.appendChild(genderInput);
                            
                            var raceInput = document.createElement("input");
                                raceInput.setAttribute("type", "hidden");
                                raceInput.setAttribute("name", "race");
                                raceInput.setAttribute("id", "race");
                                
                            savePOST.appendChild(raceInput);
                            
                            var birthsignInput = document.createElement("input");
                                birthsignInput.setAttribute("type", "hidden");
                                birthsignInput.setAttribute("name", "birthsign");
                                birthsignInput.setAttribute("id", "birthsign");
                                
                            savePOST.appendChild(birthsignInput);
                            
                            var resistMagickaInput = document.createElement("input");
                                resistMagickaInput.setAttribute("type", "hidden");
                                resistMagickaInput.setAttribute("name", "resistMagicka");
                                resistMagickaInput.setAttribute("id", "resistMagicka");
                                
                            savePOST.appendChild(resistMagickaInput);
                            
                            var resistFireInput = document.createElement("input");
                                resistFireInput.setAttribute("type", "hidden");
                                resistFireInput.setAttribute("name", "resistFire");
                                resistFireInput.setAttribute("id", "resistFire");
                                
                            savePOST.appendChild(resistFireInput);
                            
                            var resistFrostInput = document.createElement("input");
                                resistFrostInput.setAttribute("type", "hidden");
                                resistFrostInput.setAttribute("name", "resistFrost");
                                resistFrostInput.setAttribute("id", "resistFrost");
                                
                            savePOST.appendChild(resistFrostInput);
                            
                            var resistShockInput = document.createElement("input");
                                resistShockInput.setAttribute("type", "hidden");
                                resistShockInput.setAttribute("name", "resistShock");
                                resistShockInput.setAttribute("id", "resistShock");
                                
                            savePOST.appendChild(resistShockInput);
                            
                            var resistPoisonInput = document.createElement("input");
                                resistPoisonInput.setAttribute("type", "hidden");
                                resistPoisonInput.setAttribute("name", "resistPoison");
                                resistPoisonInput.setAttribute("id", "resistPoison");
                                
                            savePOST.appendChild(resistPoisonInput);
                            
                            var resistCommonDiseaseInput = document.createElement("input");
                                resistCommonDiseaseInput.setAttribute("type", "hidden");
                                resistCommonDiseaseInput.setAttribute("name", "resistCommonDisease");
                                resistCommonDiseaseInput.setAttribute("id", "resistCommonDisease");
                                
                            savePOST.appendChild(resistCommonDiseaseInput);
                            
                            var classInput = document.createElement("input");
                                classInput.setAttribute("type", "hidden");
                                classInput.setAttribute("name", "xclass");
                                classInput.setAttribute("id", "xclass");
                                
                            savePOST.appendChild(classInput);
                            
                            var submitInput = document.createElement("input");
                                submitInput.setAttribute("type", "submit");
                                submitInput.setAttribute("name", "save");
                                submitInput.setAttribute("id", "save");
                                submitInput.setAttribute("value", "save");
                                
                            savePOST.appendChild(submitInput);
                  
                  
                  
                const armorEvent = document.querySelector("#armor");
                            
                //event listeners
                weaponsSelect.addEventListener("input", RetrieveWeapon);
                conditionSelector.addEventListener("input", RetrieveCondition);
                armorEvent.addEventListener("input", ChosenArmor);
                attackButton.addEventListener("click", CalcWeaponDamage);    
                characterNameInput.addEventListener("input", SetCharName);
                    
                spellSkillRestorationInput.addEventListener("click", RestorationSelected);
                spellSkillAlterationInput.addEventListener("click", AlterationSelected);    
                spellSkillMysticismInput.addEventListener("click", MysticismSelected);
                spellSkillIllusionInput.addEventListener("click", IllusionSelected);
                spellSkillConjurationInput.addEventListener("click", ConjurationSelected);
                spellSkillDestructionInput.addEventListener("click", DestructionSelected);
                spellCostInput.addEventListener("input", ValueChangeDetected);
                acrobatClassInput.addEventListener("click", AcrobatClassSelected);
                agentClassInput.addEventListener("click", AgentClassSelected);     
                archerClassInput.addEventListener("click", ArcherClassSelected);
                assasinClassInput.addEventListener("click", AssasinClassSelected);
                barbarianClassInput.addEventListener("click", BarbarianClassSelected);
                bardClassInput.addEventListener("click", BardClassSelected);
                battlemageClassInput.addEventListener("click", BattlemageClassSelected);
                crusaderClassInput.addEventListener("click", CrusaderClassSelected);
                healerClassInput.addEventListener("click", HealerClassSelected);
                knightClassInput.addEventListener("click", KnightClassSelected);
                mageClassInput.addEventListener("click", MageClassSelected);
                monkClassInput.addEventListener("click", MonkClassSelected);
                nightbladeClassInput.addEventListener("click", NightbladeClassSelected);
                pilgrimClassInput.addEventListener("click", PilgrimClassSelected);
                rogueClassInput.addEventListener("click", RogueClassSelected);
                scoutClassInput.addEventListener("click", ScoutClassSelected);
                sorcererClassInput.addEventListener("click", SorcererClassSelected);
                spellswordClassInput.addEventListener("click", SpellswordClassSelected);
                thiefClassInput.addEventListener("click", ThiefClassSelected);
                warriorClassInput.addEventListener("click", WarriorClassSelected);
                witchhunterClassInput.addEventListener("click", WitchhunterClassSelected);
                
                
                theWarriorBirthsignInput.addEventListener("click", TriggerWarriorBirthsign);    
                theMageBirthsignInput.addEventListener("click", TriggerMageBirthsign);    
                theThiefBirthsignInput.addEventListener("click", TriggerThiefBirthsign);    
                theSerpantBirthsignInput.addEventListener("click", TriggerSerpentBirthsign);    
                theLadyBirthsignInput.addEventListener("click", TriggerLadyBirthsign);    
                theSteedBirthsignInput.addEventListener("click", TriggerSteedBirthsign);    
                theLordBirthsignInput.addEventListener("click", TriggerLordBirthsign);     
                theApprenticeBirthsignInput.addEventListener("click", TriggerApprenticeBirthsign);    
                theAntronachBirthsignInput.addEventListener("click", TriggerAntronachBirthsign);     
                theRitualBirthsignInput.addEventListener("click", TriggerRitualBirthsign); 
                theLoverBirthsignInput.addEventListener("click", TriggerLoverBirthsign); 
                theShadowBirthsignInput.addEventListener("click", TriggerShadowBirthsign); 
                theTowerBirthsignInput.addEventListener("click", TriggerTowerBirthsign);
                
                
                argonianInput.addEventListener("click", ArgonianSelected);
                bretonInput.addEventListener("click", BretonSelected);
                darkElfInput.addEventListener("click", DarkElfSelected);
                highElfInput.addEventListener("click", HighElfSelected);
                imperialInput.addEventListener("click", ImperialSelected);
                khajiitInput.addEventListener("click", KhajiitSelected);
                nordInput.addEventListener("click", NordSelected);
                orcInput.addEventListener("click", OrcSelected);    
                redguardInput.addEventListener("click", RedguardSelected);
                woodElfInput.addEventListener('click', WoodElfSelected);
                
                selectMaleInput.addEventListener("click", MaleSelectedINITIALISE);
                selectFemaleInput.addEventListener("click", FemaleSelectedINITIALISE);
                
                
                enduranceAttributeInput.addEventListener("input", ValueChangeDetected);
                heavyArmorSkillInput.addEventListener("input", ValueChangeDetected);
                mediumArmorSkillInput.addEventListener("input", ValueChangeDetected);
                spearSkillInput.addEventListener("input", ValueChangeDetected);
                strengthAttributeInput.addEventListener("input", ValueChangeDetected);
                acrobaticsSkillInput.addEventListener("input", ValueChangeDetected);
                armorerSkillInput.addEventListener("input", ValueChangeDetected);
                axeSkillInput.addEventListener("input", ValueChangeDetected);
                bluntWeaponSkillInput.addEventListener("input", ValueChangeDetected);
                longBladeSkillInput.addEventListener("input", ValueChangeDetected);
                intelligenceAttributeInput.addEventListener("input", ValueChangeDetected);
                alchemySkillInput.addEventListener("input", ValueChangeDetected);
                conjurationSkillInput.addEventListener("input", ValueChangeDetected);
                enchantSkillInput.addEventListener("input", ValueChangeDetected);
                securitySkillInput.addEventListener("input", ValueChangeDetected);
                willpowerAttributeInput.addEventListener("input", ValueChangeDetected);
                alterationSkillInput.addEventListener("input", ValueChangeDetected);
                destructionSkillInput.addEventListener("input", ValueChangeDetected);
                mysticismSkillInput.addEventListener("input", ValueChangeDetected);
                restorationSkillInput.addEventListener("input", ValueChangeDetected);
                agilityAttributeInput.addEventListener("input", ValueChangeDetected);
                blockSkillInput.addEventListener("input", ValueChangeDetected);
                lightArmorSkillInput.addEventListener("input", ValueChangeDetected);
                marksmanSkillInput.addEventListener("input", ValueChangeDetected);
                sneakSkillInput.addEventListener("input", ValueChangeDetected);
                speedAttributeInput.addEventListener("input", ValueChangeDetected);
                athleticsSkillInput.addEventListener("input", ValueChangeDetected);
                handToHandSkillInput.addEventListener("input", ValueChangeDetected);
                shortBladeSkillInput.addEventListener("input", ValueChangeDetected);
                unarmoredSkillInput.addEventListener("input", ValueChangeDetected);
                personalityAttributeInput.addEventListener("input", ValueChangeDetected);
                illusionSkillInput.addEventListener("input", ValueChangeDetected);
                mercantileSkillInput.addEventListener("input", ValueChangeDetected);
                speechcraftSkillInput.addEventListener("input", ValueChangeDetected);
                luckAttributeInput.addEventListener("input", ValueChangeDetected);
                
                
                    enduranceAttributeInput.value = baseEndurance;  
                    heavyArmorSkillInput.value = baseHeavyArmor;
                    mediumArmorSkillInput.value = baseMediumArmor;
                    spearSkillInput.value = baseSpear;
                
                
                    strengthAttributeInput.value = baseStrength;
                    acrobaticsSkillInput.value = baseAcrobatics;          
                    armorerSkillInput.value = baseArmorer;
                    axeSkillInput.value = baseAxe;
                    bluntWeaponSkillInput.value = baseBluntWeapon;
                    longBladeSkillInput.value = baseLongBlade;
                
                
                    intelligenceAttributeInput.value = baseIntelligence;
                    alchemySkillInput.value = baseAlchemy;          
                    conjurationSkillInput.value = baseConjuration;
                    enchantSkillInput.value = baseEnchant;
                    securitySkillInput.value = baseSecurity;
                    
                    willpowerAttributeInput.value = baseWillpower;
                    alterationSkillInput.value = baseAlteration;          
                    destructionSkillInput.value = baseDestruction;
                    mysticismSkillInput.value = baseMysticism;
                    restorationSkillInput.value = baseRestoration;
                
                
                    agilityAttributeInput.value = baseAgility;
                    blockSkillInput.value = baseBlock;          
                    lightArmorSkillInput.value = baseLightArmor;
                    marksmanSkillInput.value = baseMarksman;
                    sneakSkillInput.value = baseSneak;
                    
                    speedAttributeInput.value = baseSpeed;
                    athleticsSkillInput.value = baseAthletics;          
                    handToHandSkillInput.value = baseHandToHand;
                    shortBladeSkillInput.value = baseShortBlade;
                    unarmoredSkillInput.value = baseUnarmored;
                
                
                    personalityAttributeInput.value = basePersonality;
                    illusionSkillInput.value = baseIllusion;          
                    mercantileSkillInput.value = baseMercantile;
                    speechcraftSkillInput.value = baseSpeechcraft;
                
                    luckAttributeInput.value = baseLuck;
                
                
                    RetrieveRace();
                    RetrieveGender();       //charVals.gender initialises at 0 so begins as male, this checks for male or female on startup 
                    CalcWeaponDamage();     //triggers initial weapon calc function 
                
                 
                    var save = document.querySelector("#save");
                    
                    
                    save.addEventListener("click", SaveCharacter);
                            
                            
                            
            
                     
        }      
        
        
        function AccountDetails(){
            
            
                
                var accDetailsUserBtn = document.querySelector("#acc-details-user-btn");
                
                RemoveChildren(accDetailsUserBtn);
                
                var accDetailsUserLink = document.querySelector("#acc-details-user-link");
                
                RemoveChildren(accDetailsUserLink);
                
                var accDetailsUserContainer = document.querySelector("#acc-details-user-container");
                
                    
                    var accDeleteUserLink = document.createElement("p");
                        accDeleteUserLink.setAttribute("id", "acc-delete-user-link");
                        accDeleteUserLink.textContent = "To return to instructions click ";
                        
                    accDetailsUserContainer.appendChild(accDeleteUserLink);
                    
                    var accDeleteUserBtn = document.createElement("button");
                        accDeleteUserBtn.setAttribute("id", "acc-delete-user-btn");
                        accDeleteUserBtn.textContent = "here";
                        
                    accDetailsUserContainer.appendChild(accDeleteUserBtn);
                
                
                var loggedInTxtInner = document.querySelector("#logged-in-txt-inner-div");
                
                RemoveChildren(loggedInTxtInner);
                
            var loggedInTxt = document.querySelector("#logged-in-txt");
                
                    
                var deleteSelectBox = document.createElement("div");
                    deleteSelectBox.setAttribute("id", "delete-select-box");   
                    
                loggedInTxt.appendChild(deleteSelectBox);
                    
                    var usernameDisplayed = document.createElement("div");
                        usernameDisplayed.setAttribute("id", "username-displayed");
                        
                    deleteSelectBox.appendChild(usernameDisplayed);
                    
                        var usernameDisplayedTxt = document.createElement("p");
                        usernameDisplayedTxt.setAttribute("id", "username-displayed-txt");
                         usernameDisplayedTxt.textContent = "Username: " + username;
                        
                        usernameDisplayed.appendChild(usernameDisplayedTxt);
                        
                    var passwordDisplayed = document.createElement("div");
                        passwordDisplayed.setAttribute("id", "password-displayed");
                        
                    deleteSelectBox.appendChild(passwordDisplayed);
                    
                        var emailDisplayedTxt = document.createElement("p");
                        emailDisplayedTxt.setAttribute("id", "email-displayed-txt");
                        emailDisplayedTxt.textContent = "Email: " + email;
                        
                        usernameDisplayed.appendChild(emailDisplayedTxt);
                        
                    var loggedInForm = document.createElement("div");
                        loggedInForm.setAttribute("id", "logged-in-form");
                    
                    deleteSelectBox.appendChild(loggedInForm);
                    
                        var deleteAccountTitle = document.createElement("div");
                            deleteAccountTitle.setAttribute("id", "delete-account-title");
                            
                        loggedInForm.appendChild(deleteAccountTitle);
                        
                            var deleteAccountTitleTxt = document.createElement("p");
                                deleteAccountTitleTxt.setAttribute("id", "delete-account-title-txt");
                                deleteAccountTitleTxt.textContent = "Delete account:";
                                
                            deleteAccountTitle.appendChild(deleteAccountTitleTxt);
                    
                    
                        var accountDelete = document.createElement("form");
                            accountDelete.setAttribute("action", "account-api.php");
                            accountDelete.setAttribute("method", "POST");               //maybe change
                            accountDelete.setAttribute("id", "accDelete");
                            
                        loggedInForm.appendChild(accountDelete);
                        
                        
                            var pass1DeleteLabel = document.createElement("label");
                                pass1DeleteLabel.setAttribute("for", "password2");
                                pass1DeleteLabel.setAttribute("id", "password1-label");
                                pass1DeleteLabel.setAttribute("class", "create-label");
                                pass1DeleteLabel.textContent = "Password:";
                                
                            accountDelete.appendChild(pass1DeleteLabel);
                            
                            var password1 = document.createElement("input");
                                password1.setAttribute("id", "passIDConfirm");
                                password1.setAttribute("name", "passwordID");
                                password1.setAttribute("class", "create-field");
                                password1.setAttribute("type", "text");
                                
                            accountDelete.appendChild(password1);
                            
                            var passDeleteLabel2 = document.createElement("label");
                                passDeleteLabel2.setAttribute("for", "password2");
                                passDeleteLabel2.setAttribute("id", "password2-label");
                                passDeleteLabel2.setAttribute("class", "create-label");
                                passDeleteLabel2.textContent = "Confirm password:";
                                
                            accountDelete.appendChild(passDeleteLabel2);
                            
                            var password2 = document.createElement("input");
                                password2.setAttribute("id", "password2");
                                password2.setAttribute("class", "create-field");
                                password2.setAttribute("type", "text");
                                
                            accountDelete.appendChild(password2);
                            
                            var submit = document.createElement("input");
                                submit.setAttribute("id", "deleteAcc");
                                submit.setAttribute("class", "create-submit");
                                submit.setAttribute("type", "submit");
                                submit.setAttribute("name", "delAccount");
                                submit.setAttribute("value", "DELETE");
                                
                            accountDelete.appendChild(submit);
                        
                   
                        
                    
                    accDeleteUserBtn.addEventListener("click", UserLoginPage);    
                        
                    submit.addEventListener("click", DeleteAccount);
                        
                
            
        }
 
  

  
        function ClearPage(){
            
            var remove = document.querySelector("#content-anchor");
            
            var child = remove.children;
            
            
            for(var i = 0; i < child.length; i++){              //loops through content anchors children nodes and removes them 
                
                child[i].remove();
                
            
            }
            
            for(i = 0; i < child.length;){                  //removes final child node from parent content anchor
                
                child[0].remove();
                
            }
            
        }
          
        
        function RemoveChildren(e){
            
            e.parentNode.removeChild(e);
            
        }
        
        
        //----------------selection funtions [USER PAGE]--------------------------------------------------------------------
        
        
        
        function activateSELECT(){
            
            var selectSelector = document.querySelector("#user-select-txt");
            var deleteSelector = document.querySelector("#user-delete-txt");
            
            const char1DIV = document.querySelector("#char1");
            const char2DIV = document.querySelector("#char2");
            const char3DIV = document.querySelector("#char3");
            const char4DIV = document.querySelector("#char4");
            const char5DIV = document.querySelector("#char5");
            const char6DIV = document.querySelector("#char6");
            const char7DIV = document.querySelector("#char7");
            const char8DIV = document.querySelector("#char8");    
            
                
                if(selectSelector.value==="OFF"&&deleteSelector.value==="OFF"){
                
                    selectSelector.value="ON";
        
                    
                    var charOn = [];
                    
                        
                    //char1GET added    
                    
                    var char1SubmitFormDiv = document.createElement("div");
                        char1SubmitFormDiv.setAttribute("id", "char1-submit-form-div");
                        char1SubmitFormDiv.setAttribute("class", "char-submit-form-div");           //sets class for the css
                        
                    char1DIV.appendChild(char1SubmitFormDiv);
                    
                        var char1SubmitForm = document.createElement("form");
                            char1SubmitForm.setAttribute("id", "char1-submit-form");
                            char1SubmitForm.setAttribute("action", "account-api.php");
                            char1SubmitForm.setAttribute("class", "char-submit-form");
                            char1SubmitForm.setAttribute("method", "GET");
            
                        char1SubmitFormDiv.appendChild(char1SubmitForm);
                        
                            var char1SubmitHidden1 = document.createElement("input");
                                char1SubmitHidden1.setAttribute("id", "acc_id");
                                char1SubmitHidden1.setAttribute("type", "hidden");
                                char1SubmitHidden1.setAttribute("name", "acc_id");
                            
                            char1SubmitForm.appendChild(char1SubmitHidden1);
                            
                            var char1SubmitHidden2 = document.createElement("input");
                                char1SubmitHidden2.setAttribute("id", "char1GET");
                                char1SubmitHidden2.setAttribute("type", "hidden");
                                char1SubmitHidden2.setAttribute("name", "char1GET");     
                                
                            char1SubmitForm.appendChild(char1SubmitHidden2);    
                        
                            
                            
                    //char2GET added        
                                
                    var char2SubmitFormDiv = document.createElement("div");
                        char2SubmitFormDiv.setAttribute("id", "char2-submit-form-div");
                        char2SubmitFormDiv.setAttribute("class", "char-submit-form-div");           //sets class for the css
                        
                    char2DIV.appendChild(char2SubmitFormDiv);
                    
                        var char2SubmitForm = document.createElement("form");
                            char2SubmitForm.setAttribute("id", "char2-submit-form");
                            char2SubmitForm.setAttribute("action", "account-api.php");
                            char2SubmitForm.setAttribute("class", "char-submit-form");
                            char2SubmitForm.setAttribute("method", "GET");
            
                        char2SubmitFormDiv.appendChild(char2SubmitForm);
                        
                            var char2SubmitHidden1 = document.createElement("input");
                                char2SubmitHidden1.setAttribute("id", "acc_id");
                                char2SubmitHidden1.setAttribute("type", "hidden");
                                char2SubmitHidden1.setAttribute("name", "acc_id");
                            
                            char2SubmitForm.appendChild(char2SubmitHidden1);
                            
                            var char2SubmitHidden2 = document.createElement("input");
                                char2SubmitHidden2.setAttribute("id", "char2GET");
                                char2SubmitHidden2.setAttribute("type", "hidden");
                                char2SubmitHidden2.setAttribute("name", "char2GET");     
                                
                            char2SubmitForm.appendChild(char2SubmitHidden2);    
                        
                               
                    
                    //char3GET added        
                                
                    var char3SubmitFormDiv = document.createElement("div");
                        char3SubmitFormDiv.setAttribute("id", "char3-submit-form-div");
                        char3SubmitFormDiv.setAttribute("class", "char-submit-form-div");           //sets class for the css
                        
                    char3DIV.appendChild(char3SubmitFormDiv);
                    
                        var char3SubmitForm = document.createElement("form");
                            char3SubmitForm.setAttribute("id", "char3-submit-form");
                            char3SubmitForm.setAttribute("action", "account-api.php");
                            char3SubmitForm.setAttribute("class", "char-submit-form");
                            char3SubmitForm.setAttribute("method", "GET");
            
                        char3SubmitFormDiv.appendChild(char3SubmitForm);
                        
                            var char3SubmitHidden1 = document.createElement("input");
                                char3SubmitHidden1.setAttribute("id", "acc_id");
                                char3SubmitHidden1.setAttribute("type", "hidden");
                                char3SubmitHidden1.setAttribute("name", "acc_id");
                            
                            char3SubmitForm.appendChild(char3SubmitHidden1);
                            
                            var char3SubmitHidden2 = document.createElement("input");
                                char3SubmitHidden2.setAttribute("id", "char3GET");
                                char3SubmitHidden2.setAttribute("type", "hidden");
                                char3SubmitHidden2.setAttribute("name", "char3GET");     
                                
                            char3SubmitForm.appendChild(char3SubmitHidden2);    
                        
                               
                    
                    //char4GET added        
                                
                    var char4SubmitFormDiv = document.createElement("div");
                        char4SubmitFormDiv.setAttribute("id", "char4-submit-form-div");
                        char4SubmitFormDiv.setAttribute("class", "char-submit-form-div");           //sets class for the css
                        
                    char4DIV.appendChild(char4SubmitFormDiv);
                    
                        var char4SubmitForm = document.createElement("form");
                            char4SubmitForm.setAttribute("id", "char4-submit-form");
                            char4SubmitForm.setAttribute("action", "account-api.php");
                            char4SubmitForm.setAttribute("class", "char-submit-form");
                            char4SubmitForm.setAttribute("method", "GET");
            
                        char4SubmitFormDiv.appendChild(char4SubmitForm);
                        
                            var char4SubmitHidden1 = document.createElement("input");
                                char4SubmitHidden1.setAttribute("id", "acc_id");
                                char4SubmitHidden1.setAttribute("type", "hidden");
                                char4SubmitHidden1.setAttribute("name", "acc_id");
                            
                            char4SubmitForm.appendChild(char4SubmitHidden1);
                            
                            var char4SubmitHidden2 = document.createElement("input");
                                char4SubmitHidden2.setAttribute("id", "char4GET");
                                char4SubmitHidden2.setAttribute("type", "hidden");
                                char4SubmitHidden2.setAttribute("name", "char4GET");     
                                
                            char4SubmitForm.appendChild(char4SubmitHidden2);    
                        
                                
                    
                    //char5GET added        
                                
                    var char5SubmitFormDiv = document.createElement("div");
                        char5SubmitFormDiv.setAttribute("id", "char5-submit-form-div");
                        char5SubmitFormDiv.setAttribute("class", "char-submit-form-div");           //sets class for the css
                        
                    char5DIV.appendChild(char5SubmitFormDiv);
                    
                        var char5SubmitForm = document.createElement("form");
                            char5SubmitForm.setAttribute("id", "char5-submit-form");
                            char5SubmitForm.setAttribute("action", "account-api.php");
                            char5SubmitForm.setAttribute("class", "char-submit-form");
                            char5SubmitForm.setAttribute("method", "GET");
            
                        char5SubmitFormDiv.appendChild(char5SubmitForm);
                        
                            var char5SubmitHidden1 = document.createElement("input");
                                char5SubmitHidden1.setAttribute("id", "acc_id");
                                char5SubmitHidden1.setAttribute("type", "hidden");
                                char5SubmitHidden1.setAttribute("name", "acc_id");
                            
                            char5SubmitForm.appendChild(char5SubmitHidden1);
                            
                            var char5SubmitHidden2 = document.createElement("input");
                                char5SubmitHidden2.setAttribute("id", "char5GET");
                                char5SubmitHidden2.setAttribute("type", "hidden");
                                char5SubmitHidden2.setAttribute("name", "char5GET");     
                                
                            char5SubmitForm.appendChild(char5SubmitHidden2);    
                        
                               
                    
                    //char6GET added        
                                
                    var char6SubmitFormDiv = document.createElement("div");
                        char6SubmitFormDiv.setAttribute("id", "char6-submit-form-div");
                        char6SubmitFormDiv.setAttribute("class", "char-submit-form-div");           //sets class for the css
                        
                    char6DIV.appendChild(char6SubmitFormDiv);
                    
                        var char6SubmitForm = document.createElement("form");
                            char6SubmitForm.setAttribute("id", "char6-submit-form");
                            char6SubmitForm.setAttribute("action", "account-api.php");
                            char6SubmitForm.setAttribute("class", "char-submit-form");
                            char6SubmitForm.setAttribute("method", "GET");
            
                        char6SubmitFormDiv.appendChild(char6SubmitForm);
                        
                            var char6SubmitHidden1 = document.createElement("input");
                                char6SubmitHidden1.setAttribute("id", "acc_id");
                                char6SubmitHidden1.setAttribute("type", "hidden");
                                char6SubmitHidden1.setAttribute("name", "acc_id");
                            
                            char6SubmitForm.appendChild(char6SubmitHidden1);
                            
                            var char6SubmitHidden2 = document.createElement("input");
                                char6SubmitHidden2.setAttribute("id", "char6GET");
                                char6SubmitHidden2.setAttribute("type", "hidden");
                                char6SubmitHidden2.setAttribute("name", "char6GET");     
                                
                            char6SubmitForm.appendChild(char6SubmitHidden2);    
                        
                              
                    
                    //char7GET added        
                                
                    var char7SubmitFormDiv = document.createElement("div");
                        char7SubmitFormDiv.setAttribute("id", "char7-submit-form-div");
                        char7SubmitFormDiv.setAttribute("class", "char-submit-form-div");           //sets class for the css
                        
                    char7DIV.appendChild(char7SubmitFormDiv);
                    
                        var char7SubmitForm = document.createElement("form");
                            char7SubmitForm.setAttribute("id", "char7-submit-form");
                            char7SubmitForm.setAttribute("action", "account-api.php");
                            char7SubmitForm.setAttribute("class", "char-submit-form");
                            char7SubmitForm.setAttribute("method", "GET");
            
                        char7SubmitFormDiv.appendChild(char7SubmitForm);
                        
                            var char7SubmitHidden1 = document.createElement("input");
                                char7SubmitHidden1.setAttribute("id", "acc_id");
                                char7SubmitHidden1.setAttribute("type", "hidden");
                                char7SubmitHidden1.setAttribute("name", "acc_id");
                            
                            char7SubmitForm.appendChild(char7SubmitHidden1);
                            
                            var char7SubmitHidden2 = document.createElement("input");
                                char7SubmitHidden2.setAttribute("id", "char7GET");
                                char7SubmitHidden2.setAttribute("type", "hidden");
                                char7SubmitHidden2.setAttribute("name", "char7GET");     
                                
                            char7SubmitForm.appendChild(char7SubmitHidden2);    
                        
                              
                    
                    //char8GET added        
                                
                    var char8SubmitFormDiv = document.createElement("div");
                        char8SubmitFormDiv.setAttribute("id", "char8-submit-form-div");
                        char8SubmitFormDiv.setAttribute("class", "char-submit-form-div");           //sets class for the css
                        
                    char8DIV.appendChild(char8SubmitFormDiv);
                    
                        var char8SubmitForm = document.createElement("form");
                            char8SubmitForm.setAttribute("id", "char8-submit-form");
                            char8SubmitForm.setAttribute("action", "account-api.php");
                            char8SubmitForm.setAttribute("class", "char-submit-form");
                            char8SubmitForm.setAttribute("method", "GET");
            
                        char8SubmitFormDiv.appendChild(char8SubmitForm);
                        
                            var char8SubmitHidden1 = document.createElement("input");
                                char8SubmitHidden1.setAttribute("id", "acc_id");
                                char8SubmitHidden1.setAttribute("type", "hidden");
                                char8SubmitHidden1.setAttribute("name", "acc_id");
                            
                            char8SubmitForm.appendChild(char8SubmitHidden1);
                            
                            var char8SubmitHidden2 = document.createElement("input");
                                char8SubmitHidden2.setAttribute("id", "char8GET");
                                char8SubmitHidden2.setAttribute("type", "hidden");
                                char8SubmitHidden2.setAttribute("name", "char8GET");     
                                
                            char8SubmitForm.appendChild(char8SubmitHidden2);    
                        
                              
                    
                    
                    
                    for(var i = 1; i <= 8; i++){
                
                    charOn[i] = document.querySelector("#char"+i);
                    
                    var char1Select = document.querySelector("#char1");
                    var char2Select = document.querySelector("#char2");
                    var char3Select = document.querySelector("#char3");
                    var char4Select = document.querySelector("#char4");            
                    var char5Select = document.querySelector("#char5");
                    var char6Select = document.querySelector("#char6");        
                    var char7Select = document.querySelector("#char7");
                    var char8Select = document.querySelector("#char8");
                    
                    
                     charOn[i].addEventListener("mouseover", hoverTrue);
                     charOn[i].addEventListener("mouseout", hoverFalse);
                     
                     char1Select.addEventListener("click", char1Selected);
                     char2Select.addEventListener("click", char2Selected);
                     char3Select.addEventListener("click", char3Selected);
                     char4Select.addEventListener("click", char4Selected);
                     char5Select.addEventListener("click", char5Selected);
                     char6Select.addEventListener("click", char6Selected);
                     char7Select.addEventListener("click", char7Selected);
                     char8Select.addEventListener("click", char8Selected);
                     
                     //add event listeners to select character save to load 
                     
                     
                    
                    }
            
                } else if (selectSelector.value==="ON"&&deleteSelector.value==="OFF"){
                    
                    selectSelector.value="OFF";
                    
                    var charOff = [];
                    
                    
                    var char1REMOVE = document.querySelector("#char1-submit-form-div");
                    var char2REMOVE = document.querySelector('#char2-submit-form-div');
                    var char3REMOVE = document.querySelector('#char3-submit-form-div');
                    var char4REMOVE = document.querySelector('#char4-submit-form-div');
                    var char5REMOVE = document.querySelector('#char5-submit-form-div');
                    var char6REMOVE = document.querySelector('#char6-submit-form-div');
                    var char7REMOVE = document.querySelector('#char7-submit-form-div');
                    var char8REMOVE = document.querySelector('#char8-submit-form-div');            
                    
                    RemoveChildren(char1REMOVE);
                    RemoveChildren(char2REMOVE);
                    RemoveChildren(char3REMOVE);
                    RemoveChildren(char4REMOVE);
                    RemoveChildren(char5REMOVE);
                    RemoveChildren(char6REMOVE);
                    RemoveChildren(char7REMOVE);
                    RemoveChildren(char8REMOVE);         
                    
                    
                    for(var o = 1; o <= 8; o++){
                    
                    charOff[o] = document.querySelector("#char"+o);
                    
                    let char1Select = document.querySelector("#char1");
                    let char2Select = document.querySelector("#char2");
                    let char3Select = document.querySelector("#char3");
                    let char4Select = document.querySelector("#char4");            
                    let char5Select = document.querySelector("#char5");
                    let char6Select = document.querySelector("#char6");        
                    let char7Select = document.querySelector("#char7");
                    let char8Select = document.querySelector("#char8");
                    
                    charOff[o].removeEventListener("mouseover", hoverTrue);
                    charOff[o].removeEventListener("mouseout", hoverFalse);
                    
                     char1Select.removeEventListener("click", char1Selected);
                     char2Select.removeEventListener("click", char2Selected);
                     char3Select.removeEventListener("click", char3Selected);
                     char4Select.removeEventListener("click", char4Selected);
                     char5Select.removeEventListener("click", char5Selected);
                     char6Select.removeEventListener("click", char6Selected);
                     char7Select.removeEventListener("click", char7Selected);
                     char8Select.removeEventListener("click", char8Selected);
        
                    }
                    

                    
                }
        
            
                
            }
        
        
        
        function activateDELETE(){
            
            var deleteSelector = document.querySelector("#user-delete-txt");
            var selectSelector = document.querySelector("#user-select-txt");
            
            const char1DIV = document.querySelector("#char1");
            const char2DIV = document.querySelector("#char2");
            const char3DIV = document.querySelector("#char3");
            const char4DIV = document.querySelector("#char4");
            const char5DIV = document.querySelector("#char5");
            const char6DIV = document.querySelector("#char6");
            const char7DIV = document.querySelector("#char7");
            const char8DIV = document.querySelector("#char8");
            
            //const char1DeleteInputSubmit = document.querySelector("#char1-delete-input");
            
            
                if(deleteSelector.value==="OFF"&&selectSelector.value==="OFF"){
                
                    deleteSelector.value="ON";
                    
                    
                    var charOn = [];
                    
                    
        //-----adds delete form and input + relevant submit event listeners 
        
                     
                    var char1DeleteFormDiv = document.createElement("div");
                        char1DeleteFormDiv.setAttribute("id", "char1-delete-form-div");
                        char1DeleteFormDiv.setAttribute("class", "char-delete-form-div");           //sets class for the css
                        
                    char1DIV.appendChild(char1DeleteFormDiv);
                    
                        var char1DeleteForm = document.createElement("form");
                            char1DeleteForm.setAttribute("id", "char1-delete-form");
                            char1DeleteForm.setAttribute("class", "char-delete-form");
                            char1DeleteForm.setAttribute("action", "account-api.php");
                            char1DeleteForm.setAttribute("method", "POST");
            
                        char1DeleteFormDiv.appendChild(char1DeleteForm);
                        
                    var char2DeleteFormDiv = document.createElement("div");
                        char2DeleteFormDiv.setAttribute("id", "char2-delete-form-div");
                        char2DeleteFormDiv.setAttribute("class", "char-delete-form-div");           //sets class for the css
                        
                    char2DIV.appendChild(char2DeleteFormDiv);
                    
                        var char2DeleteForm = document.createElement("form");
                            char2DeleteForm.setAttribute("id", "char2-delete-form");
                            char2DeleteForm.setAttribute("class", "char-delete-form");
                            char2DeleteForm.setAttribute("action", "account-api.php");
                            char2DeleteForm.setAttribute("method", "POST");
            
                        char2DeleteFormDiv.appendChild(char2DeleteForm);                  
                    
                    var char3DeleteFormDiv = document.createElement("div");
                        char3DeleteFormDiv.setAttribute("id", "char3-delete-form-div");
                        char3DeleteFormDiv.setAttribute("class", "char-delete-form-div");           //sets class for the css
                        
                    char3DIV.appendChild(char3DeleteFormDiv);
                    
                        var char3DeleteForm = document.createElement("form");
                            char3DeleteForm.setAttribute("id", "char3-delete-form");
                            char3DeleteForm.setAttribute("class", "char-delete-form");
                            char3DeleteForm.setAttribute("action", "account-api.php");
                            char3DeleteForm.setAttribute("method", "POST");
            
                        char3DeleteFormDiv.appendChild(char3DeleteForm);            
                    
                    var char4DeleteFormDiv = document.createElement("div");
                        char4DeleteFormDiv.setAttribute("id", "char4-delete-form-div");
                        char4DeleteFormDiv.setAttribute("class", "char-delete-form-div");           //sets class for the css
                        
                    char4DIV.appendChild(char4DeleteFormDiv);
                    
                        var char4DeleteForm = document.createElement("form");
                            char4DeleteForm.setAttribute("id", "char4-delete-form");
                            char4DeleteForm.setAttribute("class", "char-delete-form");
                            char4DeleteForm.setAttribute("action", "account-api.php");
                            char4DeleteForm.setAttribute("method", "POST");
            
                        char4DeleteFormDiv.appendChild(char4DeleteForm);
        
                    var char5DeleteFormDiv = document.createElement("div");
                        char5DeleteFormDiv.setAttribute("id", "char5-delete-form-div");
                        char5DeleteFormDiv.setAttribute("class", "char-delete-form-div");           //sets class for the css
                        
                    char5DIV.appendChild(char5DeleteFormDiv);
                    
                        var char5DeleteForm = document.createElement("form");
                            char5DeleteForm.setAttribute("id", "char5-delete-form");
                            char5DeleteForm.setAttribute("class", "char-delete-form");
                            char5DeleteForm.setAttribute("action", "account-api.php");
                            char5DeleteForm.setAttribute("method", "POST");
            
                        char5DeleteFormDiv.appendChild(char5DeleteForm);
                        
                    var char6DeleteFormDiv = document.createElement("div");
                        char6DeleteFormDiv.setAttribute("id", "char6-delete-form-div");
                        char6DeleteFormDiv.setAttribute("class", "char-delete-form-div");           //sets class for the css
                        
                    char6DIV.appendChild(char6DeleteFormDiv);
                    
                        var char6DeleteForm = document.createElement("form");
                            char6DeleteForm.setAttribute("id", "char6-delete-form");
                            char6DeleteForm.setAttribute("class", "char-delete-form");
                            char6DeleteForm.setAttribute("action", "account-api.php");
                            char6DeleteForm.setAttribute("method", "POST");
            
                        char6DeleteFormDiv.appendChild(char6DeleteForm); 
                        
                    var char7DeleteFormDiv = document.createElement("div");
                        char7DeleteFormDiv.setAttribute("id", "char7-delete-form-div");
                        char7DeleteFormDiv.setAttribute("class", "char-delete-form-div");           //sets class for the css
                        
                    char7DIV.appendChild(char7DeleteFormDiv);
                    
                        var char7DeleteForm = document.createElement("form");
                            char7DeleteForm.setAttribute("id", "char7-delete-form");
                            char7DeleteForm.setAttribute("class", "char-delete-form");
                            char7DeleteForm.setAttribute("action", "account-api.php");
                            char7DeleteForm.setAttribute("method", "POST");
            
                        char7DeleteFormDiv.appendChild(char7DeleteForm);     
                        
                    var char8DeleteFormDiv = document.createElement("div");
                        char8DeleteFormDiv.setAttribute("id", "char8-delete-form-div");
                        char8DeleteFormDiv.setAttribute("class", "char-delete-form-div");           //sets class for the css
                        
                    char8DIV.appendChild(char8DeleteFormDiv);
                    
                        var char8DeleteForm = document.createElement("form");
                            char8DeleteForm.setAttribute("id", "char8-delete-form");
                            char8DeleteForm.setAttribute("class", "char-delete-form");
                            char8DeleteForm.setAttribute("action", "account-api.php");
                            char8DeleteForm.setAttribute("method", "POST");
            
                        char8DeleteFormDiv.appendChild(char8DeleteForm);                
        
        
        
                    for(var i = 1; i <= 8; i++){
                
                    charOn[i] = document.querySelector("#char"+i);
                    
                    var char1Delete = document.querySelector("#char1");
                    var char2Delete = document.querySelector("#char2");
                    var char3Delete = document.querySelector("#char3");
                    var char4Delete = document.querySelector("#char4");            
                    var char5Delete = document.querySelector("#char5");
                    var char6Delete = document.querySelector("#char6");        
                    var char7Delete = document.querySelector("#char7");
                    var char8Delete = document.querySelector("#char8");
                
                
                     charOn[i].addEventListener("mouseover", hoverTrue);
                     charOn[i].addEventListener("mouseout", hoverFalse);
                    
                     char1Delete.addEventListener("click", char1Deleted);
                     char2Delete.addEventListener("click", char2Deleted);
                     char3Delete.addEventListener("click", char3Deleted);
                     char4Delete.addEventListener("click", char4Deleted);
                     char5Delete.addEventListener("click", char5Deleted);
                     char6Delete.addEventListener("click", char6Deleted);
                     char7Delete.addEventListener("click", char7Deleted);
                     char8Delete.addEventListener("click", char8Deleted); 
                     
        
                    }
        
        
                            
        
        
            
                } else if (deleteSelector.value==="ON"&&selectSelector.value==="OFF"){
                    
                    deleteSelector.value="OFF";
                  
                  
                    var char1REMOVE = document.querySelector("#char1-delete-form-div");
                    var char2REMOVE = document.querySelector('#char2-delete-form-div');
                    var char3REMOVE = document.querySelector('#char3-delete-form-div');
                    var char4REMOVE = document.querySelector('#char4-delete-form-div');
                    var char5REMOVE = document.querySelector('#char5-delete-form-div');
                    var char6REMOVE = document.querySelector('#char6-delete-form-div');
                    var char7REMOVE = document.querySelector('#char7-delete-form-div');
                    var char8REMOVE = document.querySelector('#char8-delete-form-div');
                    
                    
                    RemoveChildren(char1REMOVE);
                    RemoveChildren(char2REMOVE);
                    RemoveChildren(char3REMOVE);
                    RemoveChildren(char4REMOVE);
                    RemoveChildren(char5REMOVE);
                    RemoveChildren(char6REMOVE);
                    RemoveChildren(char7REMOVE);
                    RemoveChildren(char8REMOVE);
                    
                    var charOff = [];
                    
                    for(var o = 1; o <= 8; o++){
                    
                    charOff[o] = document.querySelector("#char"+o);
                    
                    let char1Delete = document.querySelector("#char1");
                    let char2Delete = document.querySelector("#char2");
                    let char3Delete = document.querySelector("#char3");
                    let char4Delete = document.querySelector("#char4");            
                    let char5Delete = document.querySelector("#char5");
                    let char6Delete = document.querySelector("#char6");        
                    let char7Delete = document.querySelector("#char7");
                    let char8Delete = document.querySelector("#char8");            
                    
                    charOff[o].removeEventListener("mouseover", hoverTrue);
                    charOff[o].removeEventListener("mouseout", hoverFalse);
                    
                     char1Delete.removeEventListener("click", char1Deleted);
                     char2Delete.removeEventListener("click", char2Deleted);
                     char3Delete.removeEventListener("click", char3Deleted);
                     char4Delete.removeEventListener("click", char4Deleted);
                     char5Delete.removeEventListener("click", char5Deleted);
                     char6Delete.removeEventListener("click", char6Deleted);
                     char7Delete.removeEventListener("click", char7Deleted);
                     char8Delete.removeEventListener("click", char8Deleted);
                    
        
                    }
                    

         
                }
        
            
                
            }
        
        
        function hoverTrue() {
        
        
        this.style.backgroundColor = "#F5F5F5";
        }
        
        function hoverFalse() {
        
            this.style.backgroundColor = "white";
        }
        
        
        
        
        function char1Selected() {
            //add char setter 
            //add selected char function
        
            Character1Chosen();
        
        
        
        }
        
        
        
        
        function char2Selected() {
        
            Character2Chosen();
        
        }
        
        function char3Selected() {
            Character3Chosen();
        }
        
        function char4Selected() {
            Character4Chosen();
        }
        
        function char5Selected() {
            Character5Chosen();
        }
        
        function char6Selected() {
            Character6Chosen();
        }
        
        function char7Selected() {
            Character7Chosen();
        }
        
        function char8Selected() {
            Character8Chosen();
        }
        
        //------ ------ ------- -----------
        
        function char1Deleted() {
        
            var char1Txt = document.querySelector("#char1-txt");
        
            //sets relevent values
            charTable = "CHARACTER1";
            charColumn = "CHAR1";
        
        
            DeleteCharacter();
        
            char1Txt.textContent = "CHARNAME";
        
        
        }
        
        
        function char2Deleted() {
        
            var char2Txt = document.querySelector("#char2-txt");
        
            charTable = "CHARACTER2";
            charColumn = "CHAR2";
        
            DeleteCharacter();
        
            char2Txt.textContent = "CHARNAME";
        
        }
        
        function char3Deleted() {
        
            var char3Txt = document.querySelector("#char3-txt");
        
            charTable = "CHARACTER3";
            charColumn = "CHAR3";
        
            DeleteCharacter();
        
            char3Txt.textContent = "CHARNAME";
        }
        
        function char4Deleted() {
        
            var char4Txt = document.querySelector("#char4-txt");
        
            charTable = "CHARACTER4";
            charColumn = "CHAR4";
        
            DeleteCharacter();
        
            char4Txt.textContent = "CHARNAME";
        }
        
        function char5Deleted() {
        
            var char5Txt = document.querySelector("#char5-txt");
        
            charTable = "CHARACTER5";
            charColumn = "CHAR5";
        
            DeleteCharacter();
        
            char5Txt.textContent = "CHARNAME";
        }
        
        function char6Deleted() {
        
            var char6Txt = document.querySelector("#char6-txt");
        
            charTable = "CHARACTER6";
            charColumn = "CHAR6";
        
            DeleteCharacter();
        
            char6Txt.textContent = "CHARNAME";
        }
        
        function char7Deleted() {
        
            var char7Txt = document.querySelector("#char7-txt");
        
            charTable = "CHARACTER7";
            charColumn = "CHAR7";
        
            DeleteCharacter();
        
            char7Txt.textContent = "CHARNAME";
        }
        
        function char8Deleted() {
        
            var char8Txt = document.querySelector("#char8-txt");
        
            charTable = "CHARACTER8";
            charColumn = "CHAR8";
        
            DeleteCharacter();
        
            char8Txt.textContent = "CHARNAME";
        }
        
        
        
        
        function EmptyClassArray() {
        
            while (classSkillsArray.length) {
        
                classSkillsArray.pop();
        
            }
        
        
        }
        
        //-----OBSERVER IMPLEMENTATION---------------------------------------------------------------------------
        
        
        //observer code from "https://github.com/pkellz/devsage/blob/master/DesignPatterns/Observer.js"
        
        
        
        function Subject() {
            this.observers = []; // array of observer functions
        }
        
        Subject.prototype = {
            subscribe: function(fn) {
                this.observers.push(fn);
            },
            unsubscribe: function(fnToRemove) {
                this.observers = this.observers.filter(fn => {
                    if (fn != fnToRemove)
                        return fn;
                });
            },
            fire: function() {
                this.observers.forEach(fn => {
                    fn.call();
                });
            }
        };
        
        const subject = new Subject(); //subject set which will be used to trigger observed functions when appropriate time during health check arises 
        
        //set observer functions for each skill (only needs to be skills as attributes are not involved in level up calculations)
        
        function HeavyArmorObserver() {
        
            classInputFinals += heavyArmorInputFinal; //adds final value of observed skill to value of classInputsFinal
        
        }
        
        
        
        function MediumArmorObserver() {
        
            classInputFinals += mediumArmorInputFinal;
        }
        
        
        
        function SpearObserver() {
        
            classInputFinals += spearInputFinal;
        }
        
        
        
        function AcrobaticsObserver() {
        
            classInputFinals += acrobaticsInputFinal;
        }
        
        
        
        function ArmorerObserver() {
        
            classInputFinals += armorerInputFinal;
        }
        
        
        
        function AxeObserver() {
        
            classInputFinals += axeInputFinal;
        }
        
        
        
        function BluntWeaponObserver() {
        
            classInputFinals += bluntWeaponInputFinal;
        }
        
        
        
        function LongBladeObserver() {
        
            classInputFinals += longBladeInputFinal;
        }
        
        
        
        function BlockObserver() {
        
            classInputFinals += blockInputFinal;
        }
        
        
        
        function LightArmorObserver() {
        
            classInputFinals += lightArmorInputFinal;
        }
        
        
        
        function MarksmanObserver() {
        
            classInputFinals += marksmanInputFinal;
        }
        
        
        
        
        function SneakObserver() {
        
            classInputFinals += sneakInputFinal;
        }
        
        
        
        function AthleticsObserver() {
        
            classInputFinals += athleticsInputFinal;
        }
        
        
        
        function HandToHandObserver() {
        
            classInputFinals += handToHandInputFinal;
        }
        
        
        
        function ShortBladeObserver() {
        
            classInputFinals += shortBladeInputFinal;
        }
        
        
        
        function UnarmoredObserver() {
        
            classInputFinals += unarmoredInputFinal;
        }
        
        
        
        function IllusionObserver() {
        
            classInputFinals += illusionInputFinal;
        }
        
        
        
        function MercantileObserver() {
        
            classInputFinals += mercantileInputFinal;
        }
        
        
        
        function SpeechcraftObserver() {
        
            classInputFinals += speechcraftInputFinal;
        }
        
        
        
        function AlchemyObserver() {
        
            classInputFinals += alchemyInputFinal;
        }
        
        
        
        function ConjurationObserver() {
        
            classInputFinals += conjurationInputFinal;
        }
        
        
        
        function EnchantObserver() {
        
            classInputFinals += enchantInputFinal;
        }
        
        
        
        function SecurityObserver() {
        
            classInputFinals += securityInputFinal;
        }
        
        
        
        function AlterationObserver() {
        
            classInputFinals += alterationInputFinal;
        }
        
        
        
        function DestructionObserver() {
        
            classInputFinals += destructionInputFinal;
        }
        
        
        
        function MysticismObserver() {
        
            classInputFinals += mysticismInputFinal;
        }
        
        
        
        function RestorationObserver() {
        
            classInputFinals += restorationInputFinal;
        }
        
        
        
        
        //------------DISPLAY STATISTICS------------------------------------------------------------------------
        
        
        
        function DisplayStats() {
        
        
            let raceDisplay = document.querySelector("#race-display");
            let genderDisplay = document.querySelector("#gender-display");
            let birthsignDisplay = document.querySelector("#birthsign-display");
            let classDisplay = document.querySelector("#class-display");
            let healthDisplay = document.querySelector("#health-display");
            let magickaDisplay = document.querySelector("#magicka-display");
            let fatigueDisplay = document.querySelector("#fatigue-display");
            let levelDisplay = document.querySelector("#level-display");
        
            let armorProtectionDisplay = document.querySelector("#armor-protection-display");
            let attackDamageDisplay = document.querySelector("#attack-damage-display");
            let chanceToCastDisplay = document.querySelector("#chance-to-cast-display");
            let encumbranceDisplay = document.querySelector("#encumbrance-display");
            let chanceToHitDisplay = document.querySelector("#chance-to-hit-display");
        
            let resistMagickaDisplay = document.querySelector("#resist-magicka-display");
            let resistFireDisplay = document.querySelector("#resist-fire-display");
            let resistFrostDisplay = document.querySelector("#resist-frost-display");
            let resistShockDisplay = document.querySelector("#resist-shock-display");
            let resistPoisonDisplay = document.querySelector("#resist-poison-display");
            let resistCommonDiseaseDisplay = document.querySelector("#resist-common-disease-display");
        
        
        
        
            cName = document.querySelector("#cName");
            cName.textContent = "Character Name:  " + characterName;
        
        
        
            if (charVals.race === 1) {
        
                raceDisplay.textContent = "Character's race is Argonian";
        
            } else if (charVals.race === 2) {
        
                raceDisplay.textContent = "Character's race is Breton";
        
            } else if (charVals.race === 3) {
        
                raceDisplay.textContent = "Character's race is Dark Elf";
        
            } else if (charVals.race === 4) {
        
                raceDisplay.textContent = "Character's race is High Elf";
        
            } else if (charVals.race === 5) {
        
                raceDisplay.textContent = "Character's race is Imperial";
        
            } else if (charVals.race === 6) {
        
                raceDisplay.textContent = "Character's race is Khajiit";
        
            } else if (charVals.race === 7) {
        
                raceDisplay.textContent = "Character's race is Nord";
        
            } else if (charVals.race === 8) {
        
                raceDisplay.textContent = "Character's race is Orc";
        
            } else if (charVals.race === 9) {
        
                raceDisplay.textContent = "Character's race is Redguard";
        
            } else if (charVals.race === 10) {
        
                raceDisplay.textContent = "Character's race is Woodelf";
        
            } else if (charVals.race > 10) {
        
                raceDisplay.textContent = "Character's race is not selected";
            }
        
        
        
            if (charVals.gender === 0) {
        
                genderDisplay.textContent = "Character's gender is male";
        
            } else if (charVals.gender === 1) {
        
                genderDisplay.textContent = "Character's gender is female";
        
            } else if (charVals.gender > 1) {
        
        
                genderDisplay.textContent = "Character's gender is not selected";
            }
        
        
            if (charVals.birthsign === 1) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Warrior";
        
            } else if (charVals.birthsign === 2) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Mage";
        
            } else if (charVals.birthsign === 3) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Thief";
        
            } else if (charVals.birthsign === 4) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Serpent";
        
            } else if (charVals.birthsign === 5) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Lady";
        
            } else if (charVals.birthsign === 6) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Steed";
        
            } else if (charVals.birthsign === 7) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Lord";
        
            } else if (charVals.birthsign === 8) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Apprentice";
        
            } else if (charVals.birthsign === 9) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Antronach";
        
            } else if (charVals.birthsign === 10) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Ritual";
        
            } else if (charVals.birthsign === 11) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Lover";
        
            } else if (charVals.birthsign === 12) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Shadow";
        
            } else if (charVals.birthsign === 13) {
        
                birthsignDisplay.textContent = "Character's birthsign is The Tower";
        
            } else if (charVals.birthsign > 13) {
        
                birthsignDisplay.textContent = "Character's birthsign is not selected";
        
            }
        
        
        
            if (charVals.xclass === 1) {
        
                classDisplay.textContent = "Class is the acrobat";
        
            } else if (charVals.xclass === 2) {
        
                classDisplay.textContent = "Class is the agent";
        
        
            } else if (charVals.xclass === 3) {
        
                classDisplay.textContent = "Class is the archer";
        
        
            } else if (charVals.xclass === 4) {
        
                classDisplay.textContent = "Class is the assasin";
        
            } else if (charVals.xclass === 5) {
        
                classDisplay.textContent = "Class is the barbarian";
        
            } else if (charVals.xclass === 6) {
        
                classDisplay.textContent = "Class is the bard";
        
            } else if (charVals.xclass === 7) {
        
                classDisplay.textContent = "Class is the battlemage";
        
        
            } else if (charVals.xclass === 8) {
        
                classDisplay.textContent = "Class is the crusader";
        
            } else if (charVals.xclass === 9) {
        
                classDisplay.textContent = "Class is the healer";
        
            } else if (charVals.xclass === 10) {
        
                classDisplay.textContent = "Class is the knight";
        
            } else if (charVals.xclass === 11) {
        
                classDisplay.textContent = "Class is the mage";
        
            } else if (charVals.xclass === 12) {
        
                classDisplay.textContent = "Class is the monk";
        
            } else if (charVals.xclass === 13) {
        
                classDisplay.textContent = "Class is the nightblade";
        
            } else if (charVals.xclass === 14) {
        
                classDisplay.textContent = "Class is the pilgrim";
        
            } else if (charVals.xclass === 15) {
        
                classDisplay.textContent = "Class is the rogue";
        
            } else if (charVals.xclass === 16) {
        
                classDisplay.textContent = "Class is the scout";
        
            } else if (charVals.xclass === 17) {
        
                classDisplay.textContent = "Class is the sorcerer";
        
            } else if (charVals.xclass === 18) {
        
                classDisplay.textContent = "Class is the spellsword";
        
            } else if (charVals.xclass === 19) {
        
                classDisplay.textContent = "Class is the thief";
        
            } else if (charVals.xclass === 20) {
        
                classDisplay.textContent = "Class is the warrior";
        
            } else if (charVals.xclass === 21) {
        
                classDisplay.textContent = "Class is the witchhunter";
        
            } else {
        
                classDisplay.textContent = "Class is not selected";
            }
        
            healthDisplay.textContent = "Health: " + Math.floor(charVals.health);
            magickaDisplay.textContent = "Magicka: " + charVals.magicka;
            fatigueDisplay.textContent = "Fatigue: " + charVals.fatigue;
            levelDisplay.textContent = "level: " + charVals.level;
        
            encumbranceDisplay.textContent = "Carry weight is: " + charVals.encumbrance;
            armorProtectionDisplay.textContent = "Armor protection value is: " + Math.floor(selectedArmor);
            attackDamageDisplay.textContent = "Weapon attack damage is: " + Math.floor(attackDamageWeapon);
            chanceToHitDisplay.textContent = "Chance to hit is: " + Math.floor(chanceToHit) + "%";
            chanceToCastDisplay.textContent = "Chance to cast is: " + Math.floor(chanceToCast) + "%";
        
        
        
        
            resistMagickaDisplay.textContent = "Magicka resistance is: " + charVals.resistMagicka;
            resistFireDisplay.textContent = "Fire resistance is: " + charVals.resistFire;
            resistFrostDisplay.textContent = "Frost resistance is: " + charVals.resistFrost;
            resistShockDisplay.textContent = "Shock resistance is: " + charVals.resistShock;
            resistPoisonDisplay.textContent = "Poison resistance is: " + charVals.resistPoison;
            resistCommonDiseaseDisplay.textContent = "Disease resistance is: " + charVals.resistCommonDisease;
        
        }
        
        
        
        
        //----------------------------------------------------------------------------------------------------  
        //------RESPONSIVE VALUE CHANGE FUNCTION----------------------------------------
        
        //function attatch to "input" event listener and watch for user changes in input values 
        
        //set value change to respective event listeners on input.
        
        
        
        
        function ValueChangeDetected() {
        
        
            //set major attributes 
            EnduranceUserInput();
            StrengthUserInput();
            IntelligenceUserInput();
            WillpowerUserInput();
            AgilityUserInput();
            SpeedUserInput();
            PersonalityUserInput();
            LuckUserInput();
        
            //set minor attributes 
            HeavyArmorUserInput();
            MediumArmorUserInput();
            SpearUserInput();
            AcrobaticsUserInput();
            ArmorerUserInput();
            AxeUserInput();
            BluntWeaponUserInput();
            LongBladeUserInput();
            AlchemyUserInput();
            ConjurationUserInput();
            EnchantUserInput();
            SecurityUserInput();
            AlterationUserInput();
            DestructionUserInput();
            MysticismUserInput();
            RestorationUserInput();
            BlockUserInput();
            LightArmorUserInput();
            MarksmanUserInput();
            SneakUserInput();
            AthleticsUserInput();
            HandToHandUserInput();
            ShortBladeUserInput();
            UnarmoredUserInput();
            IllusionUserInput();
            MercantileUserInput();
            SpeechcraftUserInput();
        
            //set other    --> set after major and minor attributes as these calculations rely on the previous values being accurate     
            CalcHealth();
            CalcMagicka();
            CalcFatigue();
        
            CalcEncumbrance();
            //CalcWeaponDamage(); <-- have seperate attack event for this 
            ChanceToHit();
            ChanceToCast();
        
            RetrieveArmor();
        
            DisplayStats();
        
        }
        
        
        function LoadDetected() {
        
        
            const enduranceAttributeInput = document.querySelector("#attribute-endurance");
            const heavyArmorSkillInput = document.querySelector("#skill-heavy-armor");
            const mediumArmorSkillInput = document.querySelector("#skill-medium-armor");
            const spearSkillInput = document.querySelector("#skill-spear");
            const strengthAttributeInput = document.querySelector("#attribute-strength");
            const acrobaticsSkillInput = document.querySelector("#skill-acrobatics");
            const armorerSkillInput = document.querySelector("#skill-armorer");
            const axeSkillInput = document.querySelector("#skill-axe");
            const bluntWeaponSkillInput = document.querySelector("#skill-blunt-weapon");
            const longBladeSkillInput = document.querySelector("#skill-long-blade");
            const intelligenceAttributeInput = document.querySelector("#attribute-intelligence");
            const alchemySkillInput = document.querySelector("#skill-alchemy");
            const conjurationSkillInput = document.querySelector("#skill-conjuration");
            const enchantSkillInput = document.querySelector("#skill-enchant");
            const securitySkillInput = document.querySelector("#skill-security");
            const willpowerAttributeInput = document.querySelector("#attribute-willpower");
            const alterationSkillInput = document.querySelector("#skill-alteration");
            const destructionSkillInput = document.querySelector("#skill-destruction");
            const mysticismSkillInput = document.querySelector("#skill-mysticism");
            const restorationSkillInput = document.querySelector("#skill-restoration");
            const agilityAttributeInput = document.querySelector("#attribute-agility");
            const blockSkillInput = document.querySelector("#skill-block");
            const lightArmorSkillInput = document.querySelector("#skill-light-armor");
            const marksmanSkillInput = document.querySelector("#skill-marksman");
            const sneakSkillInput = document.querySelector("#skill-sneak");
            const speedAttributeInput = document.querySelector("#attribute-speed");
            const athleticsSkillInput = document.querySelector("#skill-athletics");
            const handToHandSkillInput = document.querySelector("#skill-hand-to-hand");
            const shortBladeSkillInput = document.querySelector("#skill-short-blade");
            const unarmoredSkillInput = document.querySelector("#skill-unarmored");
            const personalityAttributeInput = document.querySelector("#attribute-personality");
            const illusionSkillInput = document.querySelector("#skill-illusion");
            const mercantileSkillInput = document.querySelector("#skill-mercantile");
            const speechcraftSkillInput = document.querySelector("#skill-speechcraft");
            const luckAttributeInput = document.querySelector("#attribute-luck");
        
        
        
        
            RetrieveRace();
        
            RetrieveGenderLOAD();
        
            RetrieveBirthsign();
        
            GetClass();
        
        
        
            //trigger level up function to set init level variables then trigger genuine calc health function later 
        
        
            //set all attribute input values 
            enduranceAttributeInput.value = (baseEndurance + enduranceAttributeInputFinal);
            strengthAttributeInput.value = (baseStrength + strengthAttributeInputFinal);
            intelligenceAttributeInput.value = (baseIntelligence + intelligenceAttributeInputFinal);
            willpowerAttributeInput.value = (baseWillpower + willpowerAttributeInputFinal);
            agilityAttributeInput.value = (baseAgility + agilityAttributeInputFinal);
            speedAttributeInput.value = (baseSpeed + speedAttributeInputFinal);
            personalityAttributeInput.value = (basePersonality + personalityAttributeInputFinal);
            luckAttributeInput.value = (baseLuck + luckAttributeInputFinal);
        
        
            //set all skill input values here --> still need to tweak birthsign to check for load 
            heavyArmorSkillInput.value = (baseHeavyArmor + heavyArmorInputFinal);
            mediumArmorSkillInput.value = (baseMediumArmor + mediumArmorInputFinal);
            spearSkillInput.value = (baseSpear + spearInputFinal);
            acrobaticsSkillInput.value = (baseAcrobatics + acrobaticsInputFinal);
            armorerSkillInput.value = (baseArmorer + armorerInputFinal);
            axeSkillInput.value = (baseAxe + axeInputFinal);
            bluntWeaponSkillInput.value = (baseBluntWeapon + bluntWeaponInputFinal);
            longBladeSkillInput.value = (baseLongBlade + longBladeInputFinal);
            alchemySkillInput.value = (baseAlchemy + alchemyInputFinal);
            conjurationSkillInput.value = (baseConjuration + conjurationInputFinal);
            enchantSkillInput.value = (baseEnchant + enchantInputFinal);
            securitySkillInput.value = (baseSecurity + securityInputFinal);
            alterationSkillInput.value = (baseAlteration + alterationInputFinal);
            destructionSkillInput.value = (baseDestruction + destructionInputFinal);
            mysticismSkillInput.value = (baseMysticism + mysticismInputFinal);
            restorationSkillInput.value = (baseRestoration + restorationInputFinal);
            blockSkillInput.value = (baseBlock + blockInputFinal);
            lightArmorSkillInput.value = (baseLightArmor + lightArmorInputFinal);
            marksmanSkillInput.value = (baseMarksman + marksmanInputFinal);
            sneakSkillInput.value = (baseSneak + sneakInputFinal);
            athleticsSkillInput.value = (baseAthletics + athleticsInputFinal);
            handToHandSkillInput.value = (baseHandToHand + handToHandInputFinal);
            shortBladeSkillInput.value = (baseShortBlade + shortBladeInputFinal);
            unarmoredSkillInput.value = (baseUnarmored + unarmoredInputFinal);
            illusionSkillInput.value = (baseIllusion + illusionInputFinal);
            mercantileSkillInput.value = (baseMercantile + mercantileInputFinal);
            speechcraftSkillInput.value = (baseSpeechcraft + speechcraftInputFinal);
        
        
        
        
            //INITIALIZE calculator functions after values are set             
            EnduranceUserInput();
            StrengthUserInput();
            IntelligenceUserInput();
            WillpowerUserInput();
            AgilityUserInput();
            SpeedUserInput();
            PersonalityUserInput();
            LuckUserInput();
        
        
            HeavyArmorUserInput();
            MediumArmorUserInput();
            SpearUserInput();
            AcrobaticsUserInput();
            ArmorerUserInput();
            AxeUserInput();
            BluntWeaponUserInput();
            LongBladeUserInput();
            AlchemyUserInput();
            ConjurationUserInput();
            EnchantUserInput();
            SecurityUserInput();
            AlterationUserInput();
            DestructionUserInput();
            MysticismUserInput();
            RestorationUserInput();
            BlockUserInput();
            LightArmorUserInput();
            MarksmanUserInput();
            SneakUserInput();
            AthleticsUserInput();
            HandToHandUserInput();
            ShortBladeUserInput();
            UnarmoredUserInput();
            IllusionUserInput();
            MercantileUserInput();
            SpeechcraftUserInput();
        
        
        
        
            LevelUp(1); //init level at lvl 1 before calc health in order to initialise level variables 
        
            CalcHealth(); //then triggers actual health calc function to get true health value 
            CalcMagicka();
            CalcFatigue();
        
            CalcEncumbrance();
        
        
        
            ChanceToHit();
            ChanceToCast();
        
            RetrieveArmor();
        
            DisplayStats();
        
            checkLoad = 0; //resets load variable on load completion 
        
        
        }
        
        //-----weapon stat functions 
        
        function SelectWeapon() { //may need to update calc damage when weapon changed 
        
        
            switch (weaponInput) {
        
                case "iron-longsword": //selected weapon (default is iron sword)
                    var ironLongsword = randomIntFromInterval(2, 13); //chooses from random interval between base values
                    selectedWeapon = ironLongsword; //selects weapon damage (randomised) to be used in CalcWeaponDamage()   
                    weaponSkill = 1; //set weapon skill for use in hit chance calculation 
        
                    break;
        
                case "steel-longsword":
                    let steelLongsword = randomIntFromInterval(2, 14);
                    selectedWeapon = steelLongsword;
                    weaponSkill = 1;
        
        
                    break;
        
                case "glass-longsword":
                    let glassLongsword = randomIntFromInterval(2, 24);
                    selectedWeapon = glassLongsword;
                    weaponSkill = 1;
        
                    break;
        
                case "ebony-longsword":
                    let ebonyLongsword = randomIntFromInterval(2, 27);
                    selectedWeapon = ebonyLongsword;
                    weaponSkill = 1;
        
        
                    break;
        
                case "daedric-longsword":
                    let daedricLongsword = randomIntFromInterval(2, 32);
                    selectedWeapon = daedricLongsword;
                    weaponSkill = 1;
        
        
        
        
                    break;
        
                case "iron-mace":
                    let ironMace = randomIntFromInterval(1, 12);
                    selectedWeapon = ironMace;
                    weaponSkill = 2;
        
        
                    break;
        
                case "steel-mace":
                    let steelMace = randomIntFromInterval(3, 14);
                    selectedWeapon = steelMace;
                    weaponSkill = 2;
        
        
        
                    break;
        
                case "dwarven-mace":
                    let dwarvenMace = randomIntFromInterval(5, 17);
                    selectedWeapon = dwarvenMace;
                    weaponSkill = 2;
        
        
        
                    break;
        
                case "ebony-mace":
                    let ebonyMace = randomIntFromInterval(7, 26);
                    selectedWeapon = ebonyMace;
                    weaponSkill = 2;
        
        
        
                    break;
        
                case "daedric-mace":
                    let daedricMace = randomIntFromInterval(3, 30);
                    selectedWeapon = daedricMace;
                    weaponSkill = 2;
        
        
        
        
                    break;
        
                case "iron-spear":
                    let ironSpear = randomIntFromInterval(5, 13);
                    selectedWeapon = ironSpear;
                    weaponSkill = 3;
        
        
        
                    break;
        
                case "steel-spear":
                    let steelSpear = randomIntFromInterval(6, 17);
                    selectedWeapon = steelSpear;
                    weaponSkill = 3;
        
        
                    break;
        
                case "dwarven-spear":
                    let dwarvenSpear = randomIntFromInterval(5, 21);
                    selectedWeapon = dwarvenSpear;
                    weaponSkill = 3;
        
        
                    break;
        
                case "ebony-spear":
                    let ebonySpear = randomIntFromInterval(5, 32);
                    selectedWeapon = ebonySpear;
                    weaponSkill = 3;
        
        
        
                    break;
        
                case "daedric-spear":
                    let daedricSpear = randomIntFromInterval(6, 40);
                    selectedWeapon = daedricSpear;
                    weaponSkill = 3;
        
        
        
        
                    break;
        
                case "iron-war-axe":
                    let ironWarAxe = randomIntFromInterval(1, 18);
                    selectedWeapon = ironWarAxe;
                    weaponSkill = 4;
        
        
        
                    break;
        
                case "steel-war-axe":
                    let steelWarAxe = randomIntFromInterval(1, 20);
                    selectedWeapon = steelWarAxe;
                    weaponSkill = 4;
        
        
        
                    break;
        
                case "dwarven-war-axe":
                    let dwarvenWarAxe = randomIntFromInterval(1, 24);
                    selectedWeapon = dwarvenWarAxe;
                    weaponSkill = 4;
        
        
        
                    break;
        
                case "ebony-war-axe":
                    let ebonyWarAxe = randomIntFromInterval(1, 37);
                    selectedWeapon = ebonyWarAxe;
                    weaponSkill = 4;
        
        
        
        
                    break;
        
                case "daedric-war-axe":
                    let daedricWarAxe = randomIntFromInterval(1, 44);
                    selectedWeapon = daedricWarAxe;
                    weaponSkill = 4;
        
        
        
        
                    break;
        
        
                case "iron-shortsword":
                    let ironShortsword = randomIntFromInterval(4, 9);
                    selectedWeapon = ironShortsword;
                    weaponSkill = 5;
        
        
        
                    break;
        
                case "steel-shortsword":
                    let steelShortsword = randomIntFromInterval(5, 12);
                    selectedWeapon = steelShortsword;
                    weaponSkill = 5;
        
        
        
                    break;
        
                case "dwarven-shortsword":
                    let dwarvenShortsword = randomIntFromInterval(7, 14);
                    selectedWeapon = dwarvenShortsword;
                    weaponSkill = 5;
        
        
        
                    break;
        
                case "ebony-shortsword":
                    let ebonyShortsword = randomIntFromInterval(10, 20);
                    selectedWeapon = ebonyShortsword;
                    weaponSkill = 5;
        
        
                    break;
        
                case "daedric-shortsword":
                    let daedricShortsword = randomIntFromInterval(10, 26);
                    selectedWeapon = daedricShortsword;
                    weaponSkill = 5;
        
        
        
        
                    break;
        
                default:
                    weaponInput = "iron-longsword";
                    ironLongsword = randomIntFromInterval(2, 13);
                    selectedWeapon = ironLongsword;
                    weaponSkill = 1;
        
        
        
        
            }
        
        
            //attackDamageWeapon = (ironLongsword * charVals.strength)// * condition modifer * 1) / armor reduction;
        
        }
        
        
        
        function RetrieveWeapon(event) {
        
        
        
            weaponInput = event.target.value; //selects weapon in dropdown menu 
        
            SelectWeapon();
            CalcWeaponDamage();
        
        }
        
        
        
        function SelectCondition() { //selects condition    
        
            switch (conditionInput) {
        
                case "max":
                    conditionModifier = 1.00; //condition modifier used within damage calculaton 
        
                    break;
        
                case "high":
                    conditionModifier = 0.75;
        
                    break;
        
                case "medium":
                    conditionModifier = 0.50;
        
                    break;
        
                case "low":
                    conditionModifier = 0.25;
        
                    break;
        
                default:
                    conditionInput = "max";
        
                    conditionModifier = 1.00;
        
        
        
            }
        
        }
        
        function RetrieveCondition(event) { //gets condition from drop down menu 
        
            conditionInput = event.target.value;
        
        
            SelectCondition();
            CalcWeaponDamage();
        
        }
        
        //-----------ARMOR VALS-----------------
        
        
        //armor peices value calculations 
        
        //chest            ((Math.floor(15*(charVals.heavyArmor/30))) * 0.3) +
        //torso            ((Math.floor(15*(charVals.heavyArmor/30))) + (Math.floor(15*(charVals.heavyArmor/30))) + (Math.floor(15*(charVals.heavyArmor/30))) +  (Math.floor(15*(charVals.heavyArmor/30))) + (Math.floor(15*(charVals.heavyArmor/30))) + (Math.floor(15*(charVals.heavyArmor/30))) + (Math.floor(15*(charVals.heavyArmor/30))) + (Math.floor(15*(charVals.heavyArmor/30))) * 0.1) +
        //hands            ((Math.floor(15*(charVals.heavyArmor/30))) + (Math.floor(15*(charVals.heavyArmor/30))) * 0.05) 
        
        
        
        
        function SelectArmor() { //calculates value of whole armor based on user armor selection for use within the calc damage function 
        
            switch (armorInput) {
        
                case "iron-armor":
                    var ironChest = 10 * (charVals.heavyArmor / 30);
                    ironChest *= 0.3;
                    var ironBody = (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30));
                    ironBody *= 0.1;
                    var ironHands = (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30));
                    ironHands *= 0.05;
                    var ironArmor = ironChest + ironBody + ironHands;
                    selectedArmor = ironArmor;
                    DisplayStats();
        
                    break;
        
                case "steel-armor":
                    let steelChest = 15 * (charVals.heavyArmor / 30);
                    steelChest *= 0.3;
                    let steelBody = (15 * (charVals.heavyArmor / 30)) + (15 * (charVals.heavyArmor / 30)) + (15 * (charVals.heavyArmor / 30)) + (15 * (charVals.heavyArmor / 30)) + (15 * (charVals.heavyArmor / 30)) + (15 * (charVals.heavyArmor / 30));
                    steelBody *= 0.1;
                    let steelHands = (15 * (charVals.heavyArmor / 30)) + (15 * (charVals.heavyArmor / 30));
                    steelHands *= 0.05;
                    let steelArmor = steelChest + steelBody + steelHands;
                    selectedArmor = steelArmor;
                    DisplayStats();
        
                    break;
        
                case "dwemer-armor":
                    let dwemerChest = 20 * (charVals.heavyArmor / 30);
                    dwemerChest *= 0.3;
                    let dwemerBody = (20 * (charVals.heavyArmor / 30)) + (20 * (charVals.heavyArmor / 30)) + (20 * (charVals.heavyArmor / 30)) + (20 * (charVals.heavyArmor / 30)) + (20 * (charVals.heavyArmor / 30)) + (20 * (charVals.heavyArmor / 30));
                    dwemerBody *= 0.1;
                    let dwemerHands = (20 * (charVals.heavyArmor / 30)) + (20 * (charVals.heavyArmor / 30));
                    dwemerHands *= 0.05;
                    let dwemerArmor = dwemerChest + dwemerBody + dwemerHands;
                    selectedArmor = dwemerArmor;
                    DisplayStats();
        
                    break;
        
                case "ebony-armor":
                    let ebonyChest = 60 * (charVals.heavyArmor / 30);
                    ebonyChest *= 0.3;
                    let ebonyBody = (60 * (charVals.heavyArmor / 30)) + (60 * (charVals.heavyArmor / 30)) + (60 * (charVals.heavyArmor / 30)) + (60 * (charVals.heavyArmor / 30)) + (60 * (charVals.heavyArmor / 30)) + (60 * (charVals.heavyArmor / 30));
                    ebonyBody *= 0.1;
                    let ebonyHands = (60 * (charVals.heavyArmor / 30)) + (60 * (charVals.heavyArmor / 30));
                    ebonyHands *= 0.05;
                    let ebonyArmor = ebonyChest + ebonyBody + ebonyHands;
                    selectedArmor = ebonyArmor;
                    DisplayStats();
        
                    break;
        
                case "daedric-armor":
                    let daedricChest = 80 * (charVals.heavyArmor / 30);
                    daedricChest *= 0.3;
                    let daedricBody = (80 * (charVals.heavyArmor / 30)) + (80 * (charVals.heavyArmor / 30)) + (80 * (charVals.heavyArmor / 30)) + (80 * (charVals.heavyArmor / 30)) + (80 * (charVals.heavyArmor / 30)) + (80 * (charVals.heavyArmor / 30));
                    daedricBody *= 0.1;
                    let daedricHands = (80 * (charVals.heavyArmor / 30)) + (80 * (charVals.heavyArmor / 30));
                    daedricHands *= 0.05;
                    let daedricArmor = daedricChest + daedricBody + daedricHands;
                    selectedArmor = daedricArmor;
                    DisplayStats();
        
                    break;
        
                case "bonemold-armor":
                    let bonemoldChest = 16 * (charVals.mediumArmor / 30);
                    bonemoldChest *= 0.3;
                    let bonemoldBody = (18 * (charVals.mediumArmor / 30)) + (15 * (charVals.mediumArmor / 30)) + (15 * (charVals.mediumArmor / 30)) + (15 * (charVals.mediumArmor / 30)) + (15 * (charVals.mediumArmor / 30)) + (15 * (charVals.mediumArmor / 30));
                    bonemoldBody *= 0.1;
                    let bonemoldHands = (15 * (charVals.mediumArmor / 30)) + (15 * (charVals.mediumArmor / 30));
                    bonemoldHands *= 0.05;
                    let bonemoldArmor = bonemoldChest + bonemoldBody + bonemoldHands;
                    selectedArmor = bonemoldArmor;
                    DisplayStats();
        
                    break;
        
                case "orcish-armor":
                    let orcishChest = 30 * (charVals.mediumArmor / 30);
                    orcishChest *= 0.3;
                    let orcishBody = (30 * (charVals.mediumArmor / 30)) + (30 * (charVals.mediumArmor / 30)) + (30 * (charVals.mediumArmor / 30)) + (30 * (charVals.mediumArmor / 30)) + (30 * (charVals.mediumArmor / 30)) + (30 * (charVals.mediumArmor / 30));
                    orcishBody *= 0.1;
                    let orcishHands = (30 * (charVals.mediumArmor / 30)) + (30 * (charVals.mediumArmor / 30));
                    orcishHands *= 0.05;
                    let orcishArmor = orcishChest + orcishBody + orcishHands;
                    selectedArmor = orcishArmor;
                    DisplayStats();
        
                    break;
        
                case "adamantium-armor":
                    let adamantiumChest = 40 * (charVals.mediumArmor / 30);
                    adamantiumChest *= 0.3;
                    let adamantiumBody = (40 * (charVals.mediumArmor / 30)) + (40 * (charVals.mediumArmor / 30)) + (40 * (charVals.mediumArmor / 30)) + (40 * (charVals.mediumArmor / 30)) + (40 * (charVals.mediumArmor / 30)); //adamantium armor has no shield
                    adamantiumBody *= 0.1;
                    let adamantiumHands = (40 * (charVals.mediumArmor / 30)) + (40 * (charVals.mediumArmor / 30));
                    adamantiumHands *= 0.05;
                    let adamantiumArmor = adamantiumChest + adamantiumBody + adamantiumHands;
                    selectedArmor = adamantiumArmor;
                    DisplayStats();
        
                    break;
        
                case "ice-armor":
                    let iceChest = 50 * (charVals.mediumArmor / 30);
                    iceChest *= 0.3;
                    let iceBody = (50 * (charVals.mediumArmor / 30)) + (50 * (charVals.mediumArmor / 30)) + (50 * (charVals.mediumArmor / 30)) + (50 * (charVals.mediumArmor / 30)) + (50 * (charVals.mediumArmor / 30)) + (50 * (charVals.mediumArmor / 30));
                    iceBody *= 0.1;
                    let iceHands = (50 * (charVals.mediumArmor / 30)) + (50 * (charVals.mediumArmor / 30));
                    iceHands *= 0.05;
                    let iceArmor = iceChest + iceBody + iceHands;
                    selectedArmor = iceArmor;
                    DisplayStats();
        
                    break;
        
                case "royal-guard-armor":
                    let royalGuardChest = 55 * (charVals.mediumArmor / 30);
                    royalGuardChest *= 0.3;
                    let royalGuardBody = (55 * (charVals.mediumArmor / 30)) + (55 * (charVals.mediumArmor / 30)) + (55 * (charVals.mediumArmor / 30)) + (55 * (charVals.mediumArmor / 30)) + (55 * (charVals.mediumArmor / 30)) + (55 * (charVals.mediumArmor / 30));
                    royalGuardBody *= 0.1;
                    let royalGuardHands = (55 * (charVals.mediumArmor / 30)) + (55 * (charVals.mediumArmor / 30));
                    royalGuardHands *= 0.05;
                    let royalGuardArmor = royalGuardChest + royalGuardBody + royalGuardHands;
                    selectedArmor = royalGuardArmor;
                    DisplayStats();
        
                    break;
        
                case "nordic-fur-armor":
                    let nordicFurChest = 5 * (charVals.lightArmor / 30);
                    nordicFurChest *= 0.3;
                    let nordicFurBody = (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30));
                    nordicFurBody *= 0.1;
                    let nordicFurHands = (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30));
                    nordicFurHands *= 0.05;
                    let nordicFurArmor = nordicFurChest + nordicFurBody + nordicFurHands;
                    selectedArmor = nordicFurArmor;
                    DisplayStats();
        
                    break;
        
                case "netch-leather-armor":
                    let netchLeatherChest = 5 * (charVals.lightArmor / 30);
                    netchLeatherChest *= 0.3;
                    let netchLeatherBody = (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30));
                    netchLeatherBody *= 0.1;
                    let netchLeatherHands = (5 * (charVals.lightArmor / 30)) + (5 * (charVals.lightArmor / 30));
                    netchLeatherHands *= 0.05;
                    let netchLeatherArmor = netchLeatherChest + netchLeatherBody + netchLeatherHands;
                    selectedArmor = netchLeatherArmor;
                    DisplayStats();
        
                    break;
        
                case "chitin-armor":
                    let chitinChest = 10 * (charVals.lightArmor / 30);
                    chitinChest *= 0.3;
                    let chitinBody = (10 * (charVals.lightArmor / 30)) + (10 * (charVals.lightArmor / 30)) + (10 * (charVals.lightArmor / 30)) + (10 * (charVals.lightArmor / 30)) + (10 * (charVals.lightArmor / 30)) + (10 * (charVals.lightArmor / 30));
                    chitinBody *= 0.1;
                    let chitinHands = (10 * (charVals.lightArmor / 30)) + (10 * (charVals.lightArmor / 30));
                    chitinHands *= 0.05;
                    let chitinArmor = chitinChest + chitinBody + chitinHands;
                    selectedArmor = chitinArmor;
                    DisplayStats();
        
                    break;
        
                case "dark-brotherhood-armor":
                    let darkBrotherhoodChest = 30 * (charVals.lightArmor / 30);
                    darkBrotherhoodChest *= 0.3;
                    let darkBrotherhoodBody = (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30));
                    darkBrotherhoodBody *= 0.1;
                    let darkBrotherhoodHands = (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30));
                    darkBrotherhoodHands *= 0.05;
                    let darkBrotherhoodArmor = darkBrotherhoodChest + darkBrotherhoodBody + darkBrotherhoodHands;
                    selectedArmor = darkBrotherhoodArmor;
                    DisplayStats();
        
                    break;
        
                case "glass-armor":
                    let glassChest = 30 * (charVals.lightArmor / 30);
                    glassChest *= 0.3;
                    let glassBody = (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30));
                    glassBody *= 0.1;
                    let glassHands = (30 * (charVals.lightArmor / 30)) + (30 * (charVals.lightArmor / 30));
                    glassHands *= 0.05;
                    let glassArmor = glassChest + glassBody + glassHands;
                    selectedArmor = glassArmor;
                    DisplayStats();
        
                    break;
        
                default:
                    ironChest = 10 * (charVals.heavyArmor / 30);
                    ironChest *= 0.3;
                    ironBody = (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30));
                    ironBody *= 0.1;
                    ironHands = (10 * (charVals.heavyArmor / 30)) + (10 * (charVals.heavyArmor / 30));
                    ironHands *= 0.05;
                    ironArmor = ironChest + ironBody + ironHands;
        
                    selectedArmor = ironArmor;
                    DisplayStats();
        
        
        
        
            }
        
        }
        
        
        function ChosenArmor(event) { //sets selected armor 
        
            event.preventDefault();
        
        
            armorInput = event.target.value;
            RetrieveArmor();
        
        }
        
        
        
        function RetrieveArmor() { //triggers armor calc
        
            SelectArmor();
            CalcWeaponDamage();
        
        }
        
        //----------CALC WEAPON DAMAGE -----------------------------------           
        
        
        
        function CalcWeaponDamage() {
        
        
            //trigger calcs for necessary values 
            SelectWeapon();
            SelectCondition();
            SelectArmor();
        
            var strengthModifier = (charVals.strength + 50) / 100;
            var damageWithMods = (selectedWeapon * strengthModifier * conditionModifier * 1);
            var mitigatedDamage = damageWithMods / (damageWithMods + selectedArmor);
            var attackDamage = damageWithMods * mitigatedDamage;
        
        
        
            //if mitigatedDamage < 0.001 then damage is 0
            //if weaponDamage < 1 then 1
            if (mitigatedDamage < 0.001) {
        
                attackDamageWeapon = 0;
        
        
            } else {
        
                if (attackDamage < 1) {
        
                    attackDamage = 1;
                    attackDamageWeapon = attackDamage;
        
        
                } else {
        
                    attackDamageWeapon = attackDamage;
        
        
                }
            }
        
            DisplayStats(); //displays weapon damage 
        
        }
        
        //---------CHARACTER NAME INPUT SETTER------------------------------------------
        
        
        
        
        function SetCharName() {
        
            const characterNameInput = document.querySelector("#characterNameInput");
        
            characterName = characterNameInput.value;
        
        
        }
        
        
        
        
        //----------MAIN VALUES CALCULATIONS--------------------------------------------
        
        
        
        function CalcMagicka() {
        
            charVals.magicka = (charVals.intelligence * (1.00 + baseMagickaMultiplierBonus));
        
        
        }
        
        
        function CalcFatigue() {
        
            charVals.fatigue = (charVals.strength + charVals.willpower + charVals.agility + charVals.endurance);
        
        
        }
        
        
        function CalcEncumbrance() {
        
            charVals.encumbrance = (charVals.strength * 5);
        
        
        }
        
        
        //health and level calculator function 
        
        function CalcHealth() {
        
        
            let finalSkillInputs;
        
            let level;
        
            classInputFinals = 0; //set to 0 here so when called calls from observers is called from a 0 value so does not stack with prev set value 
        
        
            if (classSkillsArray.length > 0) {
        
        
                classInputFinals = 0;
        
        
                subject.fire(); //trigger observers 
        
                finalSkillInputs = classInputFinals;
        
        
                level = finalSkillInputs / 10; //takes final inputs divides by 10 as each 10 skill levels = 1 level 
        
        
                level = Math.floor(level) + 1;
        
        
        
                charVals.level = level; //save level in charVals for use in display 
        
                LevelUp(level); //push level to level function 
        
        
            } else { //mostly unused side of health function built for if user used calculator without selecting class --> likely to be removed entirely in future iteration when class selection railroading is implemented
        
                console.log("===================!!!!!!==================");
        
                finalSkillInputs = (strengthAttributeInputFinal + intelligenceAttributeInputFinal + willpowerAttributeInputFinal + agilityAttributeInputFinal + speedAttributeInputFinal + enduranceAttributeInputFinal + personalityAttributeInputFinal + luckAttributeInputFinal + heavyArmorInputFinal + mediumArmorInputFinal + spearInputFinal + acrobaticsInputFinal + armorerInputFinal + axeInputFinal + bluntWeaponInputFinal + longBladeInputFinal + blockInputFinal + lightArmorInputFinal + marksmanInputFinal + sneakInputFinal + athleticsInputFinal + handToHandInputFinal + shortBladeInputFinal + unarmoredInputFinal + illusionInputFinal + mercantileInputFinal + speechcraftInputFinal + alchemyInputFinal + conjurationInputFinal + enchantInputFinal + securityInputFinal + alterationInputFinal + destructionInputFinal + mysticismInputFinal + restorationInputFinal);
        
        
        
                level = finalSkillInputs / 10;
        
                level = Math.floor(level) + 1;
        
        
                charVals.level = level;
        
                LevelUp(level);
        
        
            }
        
        
        
        
        }
        
        
        function LevelUp(lvl) { //calculates true health from the level passed to it 
        
            let level = lvl;
        
        
        
            window.healthRepo = 0;
        
            window.initLevel;
            window.lastLevel;
            window.nextLevel;
            window.oldLevel;
        
        
        
            if (level == 1) { //health calc for base level (inital health is calculated differently to subsequent levels)
        
                initLevel = 0; //sets intialised level, previous level and next level values for use throughout function 
                lastLevel = initLevel;
                nextLevel = initLevel + 2;
        
        
                charVals.health = (charVals.health - healthRepo);
                charVals.health = (baseStrength + (baseEndurance - classValueEndurance)) / 2; //removes classValueEndurance as that value should not affect base health calc
        
                window.oldLevel = level;
        
        
        
            } else if (level >= nextLevel) {
        
        
                for (var i = window.oldLevel; i < level; i++) { //i starts from two as secondary health gain method starts from lvl 1 
        
        
        
                    var healthRepoIterationPositive = charVals.endurance / 10; //performs health gain per level calc in an interation saves in repo
                    window.healthRepo = window.healthRepo + healthRepoIterationPositive;
        
                }
        
        
                charVals.health = (charVals.health + window.healthRepo);
        
        
        
                window.lastLevel = level - 1;
                window.nextLevel = level + 1;
                window.oldLevel = level;
        
        
        
        
            } else if (level <= lastLevel) {
        
        
        
        
                for (var i = window.oldLevel; i > level; i--) {
        
                    var healthRepoIterationNegative = charVals.endurance / 10;
                    window.healthRepo = window.healthRepo - healthRepoIterationNegative;
        
                }
        
        
        
                charVals.health = (charVals.health + window.healthRepo);
        
        
        
                window.lastLevel = level - 1;
        
                window.nextLevel = level + 1;
        
                window.oldLevel = level;
        
        
        
        
            } else {
        
        
        
            }
        
        }
        
        
        
        //-------CHANCE TO HIT FUNCITON----------------------------------------------------
        
        
        
        
        function ChanceToHit() {
        
        
            var weaponSkillSelect = 0;
            //var chanceToDodgeBaseAttacker = ((60/5)+(40/10))*(0.75+0.5*0)+0;        //future iterations would include selection of enemies currently base enemy stat
        
        
        
            switch (weaponSkill) {
        
                case 1:
        
                    weaponSkillSelect = charVals.longBlade;
                    break;
        
                case 2:
        
                    weaponSkillSelect = charVals.bluntWeapon;
                    break;
        
                case 3:
        
                    weaponSkillSelect = charVals.spear;
                    break;
        
                case 4:
                    weaponSkillSelect = charVals.axe;
                    break;
        
                case 5:
                    weaponSkillSelect = charVals.shortBlade;
                    break;
        
                default:
        
                    weaponSkillSelect = charVals.longBlade; //set default case to long blade as default weapon is long blade type 
                    break;
        
            }
        
        
            chanceToHit = (weaponSkillSelect + (charVals.agility / 5) + (charVals.luck / 10)) * (0.75 + 0.5 * 0) + fortifyAttack + 0;
        
        
        
        
        }
        
        
        //--------------CHANCE FOR SUCCESSFULL SPELL CAST FUNCTIONALITY---------------------------------
        
        
        
        
        function RestorationSelected(event) {
        
            event.preventDefault();
        
        
            spellSkillSelected = 1; //sets spellSkillSelection which is used within chanceToCast 
            ChanceToCast();
        
        
        }
        
        function AlterationSelected(event) {
        
            event.preventDefault();
        
        
            spellSkillSelected = 2;
            ChanceToCast();
        
        }
        
        function MysticismSelected(event) {
        
            event.preventDefault();
        
        
            spellSkillSelected = 3;
            ChanceToCast();
        
        }
        
        function IllusionSelected(event) {
        
            event.preventDefault();
        
        
            spellSkillSelected = 4;
            ChanceToCast();
        
        }
        
        function ConjurationSelected(event) {
        
            event.preventDefault();
        
        
            spellSkillSelected = 5;
            ChanceToCast();
        
        }
        
        function DestructionSelected(event) {
        
            event.preventDefault();
        
            spellSkillSelected = 6;
            ChanceToCast();
        
        }
        
        
        
        function ChanceToCast() {
        
            const spellCostInput = document.querySelector("#spell-cost");
        
            if (spellCostInput.value < 0) {
                spellCostInput.value = 0;
            }
        
            var spellSkillValue = 0;
            var spellCostValue = 0;
        
            spellCostValue = spellCostInput.value;
        
            if (spellCostValue < 0) {
                spellCostInput.value = 1;
            }
        
            if (spellSkillSelected === 1) { //retrieves appropriate spell skill value for use in calc
                spellSkillValue = charVals.restoration;
            } else if (spellSkillSelected === 2) {
                spellSkillValue = charVals.alteration;
            } else if (spellSkillSelected === 3) {
                spellSkillValue = charVals.mysticism;
            } else if (spellSkillSelected === 4) {
                spellSkillValue = charVals.illusion;
            } else if (spellSkillSelected === 5) {
                spellSkillValue = charVals.conjuration;
            } else if (spellSkillSelected === 6) {
                spellSkillValue = charVals.destruction;
            } else {
        
                spellSkillValue = 0;
        
            }
        
        
        
        
            //spell skill must be dependent on the skill attribute associated with whatever particular spell is being cast 
        
            chanceToCast = (spellSkillValue * 2 + charVals.willpower / 5 + charVals.luck / 10 - spellCostValue) * (0.75 + 0.5 * 1);
        
            if (chanceToCast > 100) {
        
                chanceToCast = 100; //sets chance to cast to 100 as wont exceed 100% 
        
            } else if (chanceToCast < 0) {
        
                chanceToCast = 0; //sets chance to cast to 0 as wont exceed 0%
        
            }
        
            //chance to cast assumes no blindness and max fatigue
        
            DisplayStats();
        
        }
        
        //-------- CLASSES ---------------------------------------------------------------------------------------------   
        
        function PurifyClassValues() {
        
        
            classValueEndurance = 0;
        
        }
        
        
        
        
        //set class value based on selection 
        
        function AcrobatClassSelected(event) { //1
        
            event.preventDefault();
            classSelect = 1;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function AgentClassSelected(event) { //2
        
            event.preventDefault();
            classSelect = 2;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function ArcherClassSelected(event) { //3
        
            event.preventDefault();
            classSelect = 3;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function AssasinClassSelected(event) { //4
        
            event.preventDefault();
            classSelect = 4;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function BarbarianClassSelected(event) { //5
        
            event.preventDefault();
            classSelect = 5;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function BardClassSelected(event) { //6
        
            event.preventDefault();
            classSelect = 6;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function BattlemageClassSelected(event) { //7
        
            event.preventDefault();
            classSelect = 7;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function CrusaderClassSelected(event) { //8
        
            event.preventDefault();
            classSelect = 8;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function HealerClassSelected(event) { //9
        
            event.preventDefault();
            classSelect = 9;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function KnightClassSelected(event) { //10
        
            event.preventDefault();
            classSelect = 10;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function MageClassSelected(event) { //11
        
            event.preventDefault();
            classSelect = 11;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function MonkClassSelected(event) { //12
        
            event.preventDefault();
            classSelect = 12;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function NightbladeClassSelected(event) { //13
        
            event.preventDefault();
            classSelect = 13;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function PilgrimClassSelected(event) { //14
        
            event.preventDefault();
            classSelect = 14;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function RogueClassSelected(event) { //15
        
            event.preventDefault();
            classSelect = 15;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function ScoutClassSelected(event) { //16
        
            event.preventDefault();
            classSelect = 16;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function SorcererClassSelected(event) { //17
        
            event.preventDefault();
            classSelect = 17;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function SpellswordClassSelected(event) { //18
        
            event.preventDefault();
            classSelect = 18;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function ThiefClassSelected(event) { //19
        
            event.preventDefault();
            classSelect = 19;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function WarriorClassSelected(event) { //20
        
            event.preventDefault();
            classSelect = 20;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        function WitchhunterClassSelected(event) { //21
        
            event.preventDefault();
            classSelect = 21;
            charVals.xclass = classSelect;
            GetClass();
        
        }
        
        
        
        
        function GetClass() {
        
        
        
            if (classSelect === 0) {
        
                console.log("ERROR NO CLASS SELECTED");
        
            } else if (classSelect == 1) { //acrobat
        
                PurifyClassValues(); //resets class values to baseline 
        
        
                EmptyClassArray(); //removes class checker for reset
        
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 10;
        
        
                classValuesArray.push("agility"); //position 0;
                classValuesArray.push("endurance"); //position 1;
                classValuesArray.push("acrobatics"); //position 2;
                classValuesArray.push("athletics"); //position 3;            
                classValuesArray.push("marksman"); //position 4;
                classValuesArray.push("sneak"); //position 5;
                classValuesArray.push("unarmored"); //position 6;
                classValuesArray.push("speechcraft"); //position 7;
                classValuesArray.push("alteration"); //position 8;
                classValuesArray.push("spear"); //position 9;
                classValuesArray.push("hand-to-hand"); //position 10;
                classValuesArray.push("light-armor"); //position 11;
        
                //specialities [sneak]
                classValuesArray.push("speechcraftSpeciality"); //position 12;
                classValuesArray.push("mercantileSpeciality"); //position 13;
                classValuesArray.push("hand-to-handSpeciality"); //position 14;
                classValuesArray.push("short-bladeSpeciality"); //position 15;
                classValuesArray.push("marksmanSpeciality"); //position 16;
                classValuesArray.push("light-armorSpeciality"); //position 17;
                classValuesArray.push("sneakSpeciality"); //position 18;
                classValuesArray.push("securitySpeciality"); //position 19;
                classValuesArray.push("acrobaticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("medium-armorMisc"); //position 22;
                classValuesArray.push("armorerMisc"); //position 23;
                classValuesArray.push("axeMisc"); //position 24;
                classValuesArray.push("blunt-weaponMisc"); //position 25;
                classValuesArray.push("long-bladeMisc"); //position 26;
                classValuesArray.push("blockMisc"); //position 27;
                classValuesArray.push("short-bladeMisc"); //position 28;
                classValuesArray.push("illusionMisc"); //position 29;
                classValuesArray.push("mercantileMisc"); //position 30;
                classValuesArray.push("alchemyMisc"); //position 31;
                classValuesArray.push("conjurationMisc"); //position 32;
                classValuesArray.push("enchantMisc"); //position 33;
                classValuesArray.push("securityMisc"); //position 34;
                classValuesArray.push("destructionMisc"); //position 35;
                classValuesArray.push("mysticismMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values 
        
        
            } else if (classSelect == 2) { //agent
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("personality"); //position 0;
                classValuesArray.push("agility"); //position 1;
                classValuesArray.push("speechcraft"); //position 2;
                classValuesArray.push("sneak"); //position 3;            
                classValuesArray.push("acrobatics"); //position 4;
                classValuesArray.push("light-armor"); //position 5;
                classValuesArray.push("short-blade"); //position 6;
                classValuesArray.push("mercantile"); //position 7;
                classValuesArray.push("conjuration"); //position 8;
                classValuesArray.push("block"); //position 9;
                classValuesArray.push("unarmored"); //position 10;
                classValuesArray.push("illusion"); //position 11;
        
                //specialities [sneak]
                classValuesArray.push("speechcraftSpeciality"); //position 12;     !
                classValuesArray.push("mercantileSpeciality"); //position 13;      ! 
                classValuesArray.push("hand-to-handSpeciality"); //position 14;     o
                classValuesArray.push("short-bladeSpeciality"); //position 15;        !
                classValuesArray.push("marksmanSpeciality"); //position 16;     o
                classValuesArray.push("light-armorSpeciality"); //position 17;    !
                classValuesArray.push("sneakSpeciality"); //position 18;    !
                classValuesArray.push("securitySpeciality"); //position 19;    o
                classValuesArray.push("acrobaticsSpeciality"); //position 20;    !
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc");
                classValuesArray.push("medium-armorMisc");
                classValuesArray.push("spearMisc");
                classValuesArray.push("armorerMisc");
                classValuesArray.push("axeMisc");
                classValuesArray.push("blunt-weaponMisc");
                classValuesArray.push("long-bladeMisc");
                classValuesArray.push("marksmanMisc");
                classValuesArray.push("athleticsMisc");
                classValuesArray.push("hand-to-handMisc");
                classValuesArray.push("alchemyMisc");
                classValuesArray.push("enchantMisc");
                classValuesArray.push("securityMisc");
                classValuesArray.push("alterationMisc");
                classValuesArray.push("destructionMisc");
                classValuesArray.push("mysticismMisc");
                classValuesArray.push("restorationMisc");
        
        
                SetClass(); //triggers SetClass() to send and set class values         
        
        
        
            } else if (classSelect == 3) { //archer
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("agility"); //position 0;
                classValuesArray.push("strength"); //position 1;
                classValuesArray.push("marksman"); //position 2;
                classValuesArray.push("long-blade"); //position 3;          
                classValuesArray.push("block"); //position 4;
                classValuesArray.push("athletics"); //position 5;
                classValuesArray.push("light-armor"); //position 6;
                classValuesArray.push("unarmored"); //position 7;
                classValuesArray.push("spear"); //position 8;
                classValuesArray.push("restoration"); //position 9;
                classValuesArray.push("sneak"); //position 10;
                classValuesArray.push("medium-armor"); //position 11;
        
                //specialities[combat]
                classValuesArray.push("long-bladeSpeciality"); //position 12;
                classValuesArray.push("blunt-weaponSpeciality"); //position 13;
                classValuesArray.push("axeSpeciality"); //position 14;
                classValuesArray.push("armorerSpeciality"); //position 15;
                classValuesArray.push("medium-armorSpeciality"); //position 16;
                classValuesArray.push("heavy-armorSpeciality"); //position 17;
                classValuesArray.push("spearSpeciality"); //position 18;
                classValuesArray.push("blockSpeciality"); //position 19;
                classValuesArray.push("athleticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc");
                classValuesArray.push("acrobaticsMisc");
                classValuesArray.push("armorerMisc");
                classValuesArray.push("axeMisc");
                classValuesArray.push("blunt-weaponMisc");
                classValuesArray.push("hand-to-handMisc");
                classValuesArray.push("illusionMisc");
                classValuesArray.push("mercantileMisc");
                classValuesArray.push("speechcraftMisc");
                classValuesArray.push("alchemyMisc");
                classValuesArray.push("conjurationMisc");
                classValuesArray.push("enchantMisc");
                classValuesArray.push("securityMisc");
                classValuesArray.push("alterationMisc");
                classValuesArray.push("destructionMisc");
                classValuesArray.push("mysticismMisc");
                classValuesArray.push("restorationMisc");
        
                SetClass(); //triggers SetClass() to send and set class values
        
        
            } else if (classSelect == 4) { //assasin
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("speed"); //position 0;
                classValuesArray.push("intelligence"); //position 1;
                classValuesArray.push("sneak"); //position 2;
                classValuesArray.push("marksman"); //position 3;            
                classValuesArray.push("light-armor"); //position 4;
                classValuesArray.push("short-blade"); //position 5;
                classValuesArray.push("acrobatics"); //position 6;
                classValuesArray.push("security"); //position 7;
                classValuesArray.push("long-blade"); //position 8;
                classValuesArray.push("alchemy"); //position 9;
                classValuesArray.push("block"); //position 10;
                classValuesArray.push("athletics"); //position 11;
        
                //specialities [sneak]
                classValuesArray.push("speechcraftSpeciality"); //position 12;
                classValuesArray.push("mercantileSpeciality"); //position 13;
                classValuesArray.push("hand-to-handSpeciality"); //position 14;
                classValuesArray.push("short-bladeSpeciality"); //position 15;
                classValuesArray.push("marksmanSpeciality"); //position 16;
                classValuesArray.push("light-armorSpeciality"); //position 17;
                classValuesArray.push("sneakSpeciality"); //position 18;
                classValuesArray.push("securitySpeciality"); //position 19;
                classValuesArray.push("acrobaticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("medium-armorMisc"); //position 22;
                classValuesArray.push("spearMisc"); //position 23;
                classValuesArray.push("axeMisc"); //position 24;
                classValuesArray.push("blunt-weaponMisc"); //position 25;
                classValuesArray.push("hand-to-handMisc"); //position 26;
                classValuesArray.push("unarmoredMisc"); //position 27;
                classValuesArray.push("illusionMisc"); //position 28;
                classValuesArray.push("mercantileMisc"); //position 29;
                classValuesArray.push("speechcraftMisc"); //position 30;
                classValuesArray.push("conjurationMisc"); //position 31;
                classValuesArray.push("enchantMisc"); //position 32;
                classValuesArray.push("alterationMisc"); //position 33;
                classValuesArray.push("destructionMisc"); //position 34;
                classValuesArray.push("mysticismMisc"); //position 35;
                classValuesArray.push("restorationMisc"); //position 36;
                classValuesArray.push("armorerMisc"); //position 37;            
        
                SetClass(); //triggers SetClass() to send and set class values
        
        
            } else if (classSelect == 5) { //barbarian
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("strength"); //position 0;
                classValuesArray.push("speed"); //position 1;
                classValuesArray.push("axe"); //position 2;
                classValuesArray.push("medium-armor"); //position 3;            
                classValuesArray.push("blunt-weapon"); //position 4;
                classValuesArray.push("athletics"); //position 5;
                classValuesArray.push("block"); //position 6;
                classValuesArray.push("acrobatics"); //position 7;
                classValuesArray.push("light-armor"); //position 8;
                classValuesArray.push("armorer"); //position 9;
                classValuesArray.push("marksman"); //position 10;
                classValuesArray.push("unarmored"); //position 11;
        
                //specialities[combat]
                classValuesArray.push("long-bladeSpeciality"); //position 12;
                classValuesArray.push("blunt-weaponSpeciality"); //position 13;
                classValuesArray.push("axeSpeciality"); //position 14;
                classValuesArray.push("armorerSpeciality"); //position 15;
                classValuesArray.push("medium-armorSpeciality"); //position 16;
                classValuesArray.push("heavy-armorSpeciality"); //position 17;
                classValuesArray.push("spearSpeciality"); //position 18;
                classValuesArray.push("blockSpeciality"); //position 19;
                classValuesArray.push("athleticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("spearMisc"); //position 22;
                classValuesArray.push("long-bladeMisc"); //position 23;
                classValuesArray.push("sneakMisc"); //position 24;
                classValuesArray.push("hand-to-handMisc"); //position 25;
                classValuesArray.push("short-bladeMisc"); //position 26;
                classValuesArray.push("illusionMisc"); //position 27;
                classValuesArray.push("mercantileMisc"); //position 28;
                classValuesArray.push("speechcraftMisc"); //position 29;
                classValuesArray.push("alchemyMisc"); //position 30;
                classValuesArray.push("conjurationMisc"); //position 31;
                classValuesArray.push("enchantMisc"); //position 32;
                classValuesArray.push("securityMisc"); //position 33;
                classValuesArray.push("alterationMisc"); //position 34;
                classValuesArray.push("destructionMisc"); //position 35;
                classValuesArray.push("mysticismMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;                              
        
                SetClass(); //triggers SetClass() to send and set class values
        
        
            } else if (classSelect == 6) { //bard
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("personality"); //position 0;
                classValuesArray.push("intelligence"); //position 1;
                classValuesArray.push("speechcraft"); //position 2;
                classValuesArray.push("alchemy"); //position 3;            
                classValuesArray.push("acrobatics"); //position 4;
                classValuesArray.push("long-blade"); //position 5;
                classValuesArray.push("block"); //position 6;
                classValuesArray.push("mercantile"); //position 7;
                classValuesArray.push("illusion"); //position 8;
                classValuesArray.push("medium-armor"); //position 9;
                classValuesArray.push("enchant"); //position 10;
                classValuesArray.push("security"); //position 11;
        
                //specialities [sneak]
                classValuesArray.push("speechcraftSpeciality"); //position 12;
                classValuesArray.push("mercantileSpeciality"); //position 13;
                classValuesArray.push("hand-to-handSpeciality"); //position 14;
                classValuesArray.push("short-bladeSpeciality"); //position 15;
                classValuesArray.push("marksmanSpeciality"); //position 16;
                classValuesArray.push("light-armorSpeciality"); //position 17;
                classValuesArray.push("sneakSpeciality"); //position 18;
                classValuesArray.push("securitySpeciality"); //position 19;
                classValuesArray.push("acrobaticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("spearMisc"); //position 22;
                classValuesArray.push("armorerMisc"); //position 23;
                classValuesArray.push("axeMisc"); //position 24;
                classValuesArray.push("blunt-weaponMisc"); //position 25;
                classValuesArray.push("light-armorMisc"); //position 26;
                classValuesArray.push("marksmanMisc"); //position 27;
                classValuesArray.push("sneakMisc"); //position 28;
                classValuesArray.push("athleticsMisc"); //position 29;
                classValuesArray.push("hand-to-handMisc"); //position 30;
                classValuesArray.push("short-bladeMisc"); //position 31;
                classValuesArray.push("unarmoredMisc"); //position 32;
                classValuesArray.push("conjurationMisc"); //position 33;
                classValuesArray.push("alterationMisc"); //position 34;
                classValuesArray.push("destructionMisc"); //position 35;
                classValuesArray.push("mysticismMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;                  
        
                SetClass(); //triggers SetClass() to send and set class values   
        
        
            } else if (classSelect == 7) { //battlemage
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
                classValueEndurance = 0;
        
        
                classValuesArray.push("intelligence"); //position 0;
                classValuesArray.push("strength"); //position 1;
                classValuesArray.push("alteration"); //position 2;
                classValuesArray.push("destruction"); //position 3;            
                classValuesArray.push("conjuration"); //position 4;
                classValuesArray.push("axe"); //position 5;
                classValuesArray.push("heavy-armor"); //position 6;
                classValuesArray.push("mysticism"); //position 7;
                classValuesArray.push("long-blade"); //position 8;
                classValuesArray.push("marksman"); //position 9;
                classValuesArray.push("enchant"); //position 10;
                classValuesArray.push("alchemy"); //position 11;            
        
                //specialities [magic]
                classValuesArray.push("alchemySpeciality"); //position 12;
                classValuesArray.push("enchantSpeciality"); //position 13;
                classValuesArray.push("conjurationSpeciality"); //position 14;
                classValuesArray.push("alterationSpeciality"); //position 15;
                classValuesArray.push("destructionSpeciality"); //position 16;
                classValuesArray.push("mysticismSpeciality"); //position 17;
                classValuesArray.push("restorationSpeciality"); //position 18;
                classValuesArray.push("illusionSpeciality"); //position 19;
                classValuesArray.push("unarmoredSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("medium-armorMisc"); //position 21;     
                classValuesArray.push("spearMisc"); //position 22;
                classValuesArray.push("acrobaticsMisc"); //position 23;
                classValuesArray.push("armorerMisc"); //position 24;
                classValuesArray.push("blunt-weaponMisc"); //position 25;
                classValuesArray.push("blockMisc"); //position 26;
                classValuesArray.push("light-armorMisc"); //position 27;
                classValuesArray.push("sneakMisc"); //position 28;
                classValuesArray.push("athleticsMisc"); //position 29;
                classValuesArray.push("hand-to-handMisc"); //position 30;
                classValuesArray.push("short-bladeMisc"); //position 31;
                classValuesArray.push("unarmoredMisc"); //position 32;
                classValuesArray.push("illusionMisc"); //position 33;
                classValuesArray.push("mercantileMisc"); //position 34;
                classValuesArray.push("speechcraftMisc"); //position 35;
                classValuesArray.push("securityMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;                  
        
                SetClass(); //triggers SetClass() to send and set class values               
        
        
        
            } else if (classSelect == 8) { //crusader
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("agility"); //position 0;
                classValuesArray.push("strength"); //position 1;
                classValuesArray.push("blunt-weapon"); //position 2;
                classValuesArray.push("long-blade"); //position 3;          
                classValuesArray.push("destruction"); //position 4;
                classValuesArray.push("heavy-armor"); //position 5;
                classValuesArray.push("block"); //position 6;
                classValuesArray.push("restoration"); //position 7;
                classValuesArray.push("armorer"); //position 8;
                classValuesArray.push("hand-to-hand"); //position 9;
                classValuesArray.push("medium-armor"); //position 10;
                classValuesArray.push("alchemy"); //position 11;
        
                //specialities[combat]
                classValuesArray.push("long-bladeSpeciality"); //position 12;
                classValuesArray.push("blunt-weaponSpeciality"); //position 13;
                classValuesArray.push("axeSpeciality"); //position 14;
                classValuesArray.push("armorerSpeciality"); //position 15;
                classValuesArray.push("medium-armorSpeciality"); //position 16;
                classValuesArray.push("heavy-armorSpeciality"); //position 17;
                classValuesArray.push("spearSpeciality"); //position 18;
                classValuesArray.push("blockSpeciality"); //position 19;
                classValuesArray.push("athleticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("spearMisc"); //position 21;     
                classValuesArray.push("acrobaticsMisc"); //position 22;
                classValuesArray.push("mysticismMisc"); //position 23;
                classValuesArray.push("axeMisc"); //position 24;
                classValuesArray.push("light-armorMisc"); //position 25;
                classValuesArray.push("marksmanMisc"); //position 26;
                classValuesArray.push("sneakMisc"); //position 27;
                classValuesArray.push("athleticsMisc"); //position 28;
                classValuesArray.push("alterationMisc"); //position 29;
                classValuesArray.push("short-bladeMisc"); //position 30;
                classValuesArray.push("unarmoredMisc"); //position 31;
                classValuesArray.push("illusionMisc"); //position 32;
                classValuesArray.push("mercantileMisc"); //position 33;
                classValuesArray.push("speechcraftMisc"); //position 34;
                classValuesArray.push("conjurationMisc"); //position 35;
                classValuesArray.push("enchantMisc"); //position 36;
                classValuesArray.push("securityMisc"); //position 37;                  
        
                SetClass(); //triggers SetClass() to send and set class values               
        
        
            } else if (classSelect == 9) { //healer
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("willpower"); //position 0;
                classValuesArray.push("personality"); //position 1;
                classValuesArray.push("restoration"); //position 2;
                classValuesArray.push("mysticism"); //position 3;            
                classValuesArray.push("alteration"); //position 4;
                classValuesArray.push("hand-to-hand"); //position 5;
                classValuesArray.push("speechcraft"); //position 6;
                classValuesArray.push("illusion"); //position 7;
                classValuesArray.push("alchemy"); //position 8;
                classValuesArray.push("unarmored"); //position 9;
                classValuesArray.push("light-armor"); //position 10;
                classValuesArray.push("blunt-weapon"); //position 11;          
        
                //specialities [magic]
                classValuesArray.push("alchemySpeciality"); //position 12;
                classValuesArray.push("enchantSpeciality"); //position 13;
                classValuesArray.push("conjurationSpeciality"); //position 14;
                classValuesArray.push("alterationSpeciality"); //position 15;
                classValuesArray.push("destructionSpeciality"); //position 16;
                classValuesArray.push("mysticismSpeciality"); //position 17;
                classValuesArray.push("restorationSpeciality"); //position 18;
                classValuesArray.push("illusionSpeciality"); //position 19;
                classValuesArray.push("unarmoredSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("medium-armorMisc"); //position 22;
                classValuesArray.push("spearMisc"); //position 23;
                classValuesArray.push("acrobaticsMisc"); //position 24;
                classValuesArray.push("armorerMisc"); //position 25;
                classValuesArray.push("axeMisc"); //position 26;
                classValuesArray.push("long-bladeMisc"); //position 27;
                classValuesArray.push("blockMisc"); //position 28;
                classValuesArray.push("marksmanMisc"); //position 29;
                classValuesArray.push("sneakMisc"); //position 30;
                classValuesArray.push("athleticsMisc"); //position 31;
                classValuesArray.push("securityMisc"); //position 32;
                classValuesArray.push("short-bladeMisc"); //position 33;
                classValuesArray.push("mercantileMisc"); //position 34;
                classValuesArray.push("conjurationMisc"); //position 35;
                classValuesArray.push("enchantMisc"); //position 36;
                classValuesArray.push("destructionMisc"); //position 37;      
        
                SetClass(); //triggers SetClass() to send and set class values       
        
        
            } else if (classSelect == 10) { //knight
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("strength"); //position 0;
                classValuesArray.push("personality"); //position 1;
                classValuesArray.push("long-blade"); //position 2;
                classValuesArray.push("axe"); //position 3;            
                classValuesArray.push("speechcraft"); //position 4;
                classValuesArray.push("heavy-armor"); //position 5;
                classValuesArray.push("block"); //position 6;
                classValuesArray.push("restoration"); //position 7;
                classValuesArray.push("mercantile"); //position 8;
                classValuesArray.push("medium-armor"); //position 9;
                classValuesArray.push("enchant"); //position 10;
                classValuesArray.push("armorer"); //position 11;
        
                //specialities[combat]
                classValuesArray.push("long-bladeSpeciality"); //position 12;
                classValuesArray.push("blunt-weaponSpeciality"); //position 13;
                classValuesArray.push("axeSpeciality"); //position 14;
                classValuesArray.push("armorerSpeciality"); //position 15;
                classValuesArray.push("medium-armorSpeciality"); //position 16;
                classValuesArray.push("heavy-armorSpeciality"); //position 17;
                classValuesArray.push("spearSpeciality"); //position 18;
                classValuesArray.push("blockSpeciality"); //position 19;
                classValuesArray.push("athleticsSpeciality"); //position 20;     
        
                //misc skills 
                classValuesArray.push("spearMisc"); //position 21;     
                classValuesArray.push("acrobaticsMisc"); //position 22;
                classValuesArray.push("blunt-weaponMisc"); //position 23;
                classValuesArray.push("light-armorMisc"); //position 24;
                classValuesArray.push("marksmanMisc"); //position 25;
                classValuesArray.push("sneakMisc"); //position 26;
                classValuesArray.push("athleticsMisc"); //position 27;
                classValuesArray.push("hand-to-handMisc"); //position 28;
                classValuesArray.push("short-bladeMisc"); //position 29;
                classValuesArray.push("unarmoredMisc"); //position 30;
                classValuesArray.push("illusionMisc"); //position 31;
                classValuesArray.push("alchemyMisc"); //position 32;
                classValuesArray.push("conjurationMisc"); //position 33;
                classValuesArray.push("securityMisc"); //position 34;
                classValuesArray.push("alterationMisc"); //position 35;
                classValuesArray.push("destructionMisc"); //position 36;
                classValuesArray.push("mysticismMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values 
        
        
            } else if (classSelect == 11) { //mage
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("intelligence"); //position 0;
                classValuesArray.push("willpower"); //position 1;
                classValuesArray.push("mysticism"); //position 2;
                classValuesArray.push("destruction"); //position 3;            
                classValuesArray.push("alteration"); //position 4;
                classValuesArray.push("illusion"); //position 5;
                classValuesArray.push("restoration"); //position 6;
                classValuesArray.push("enchant"); //position 7;
                classValuesArray.push("alchemy"); //position 8;
                classValuesArray.push("unarmored"); //position 9;
                classValuesArray.push("short-blade"); //position 10;
                classValuesArray.push("conjuration"); //position 11;          
        
                //specialities [magic]
                classValuesArray.push("alchemySpeciality"); //position 12;
                classValuesArray.push("enchantSpeciality"); //position 13;
                classValuesArray.push("conjurationSpeciality"); //position 14;
                classValuesArray.push("alterationSpeciality"); //position 15;
                classValuesArray.push("destructionSpeciality"); //position 16;
                classValuesArray.push("mysticismSpeciality"); //position 17;
                classValuesArray.push("restorationSpeciality"); //position 18;
                classValuesArray.push("illusionSpeciality"); //position 19;
                classValuesArray.push("unarmoredSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("medium-armorMisc"); //position 22;
                classValuesArray.push("spearMisc"); //position 23;
                classValuesArray.push("acrobaticsMisc"); //position 24;
                classValuesArray.push("armorerMisc"); //position 25;
                classValuesArray.push("axeMisc"); //position 26;
                classValuesArray.push("blunt-weaponMisc"); //position 27;
                classValuesArray.push("long-bladeMisc"); //position 28;
                classValuesArray.push("blockMisc"); //position 29;
                classValuesArray.push("light-armorMisc"); //position 30;
                classValuesArray.push("marksmanMisc"); //position 31;
                classValuesArray.push("sneakMisc"); //position 32;
                classValuesArray.push("athleticsMisc"); //position 33;
                classValuesArray.push("hand-to-handMisc"); //position 34;
                classValuesArray.push("mercantileMisc"); //position 35;
                classValuesArray.push("speechcraftMisc"); //position 36;
                classValuesArray.push("securityMisc"); //position 37;            
        
                SetClass(); //triggers SetClass() to send and set class values  
        
        
            } else if (classSelect == 12) { //monk
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("agility"); //position 0;
                classValuesArray.push("willpower"); //position 1;
                classValuesArray.push("hand-to-hand"); //position 2;
                classValuesArray.push("unarmored"); //position 3;          
                classValuesArray.push("athletics"); //position 4;
                classValuesArray.push("acrobatics"); //position 5;
                classValuesArray.push("sneak"); //position 6;
                classValuesArray.push("block"); //position 7;
                classValuesArray.push("marksman"); //position 8;
                classValuesArray.push("light-armor"); //position 9;
                classValuesArray.push("restoration"); //position 10;
                classValuesArray.push("blunt-weapon"); //position 11;
        
                //specialities [sneak]
                classValuesArray.push("speechcraftSpeciality"); //position 12;
                classValuesArray.push("mercantileSpeciality"); //position 13;
                classValuesArray.push("hand-to-handSpeciality"); //position 14;
                classValuesArray.push("short-bladeSpeciality"); //position 15;
                classValuesArray.push("marksmanSpeciality"); //position 16;
                classValuesArray.push("light-armorSpeciality"); //position 17;
                classValuesArray.push("sneakSpeciality"); //position 18;
                classValuesArray.push("securitySpeciality"); //position 19;
                classValuesArray.push("acrobaticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("medium-armorMisc"); //position 22;
                classValuesArray.push("spearMisc"); //position 23;
                classValuesArray.push("armorerMisc"); //position 24;
                classValuesArray.push("axeMisc"); //position 25;
                classValuesArray.push("long-bladeMisc"); //position 26;
                classValuesArray.push("mysticismMisc"); //position 27;
                classValuesArray.push("short-bladeMisc"); //position 28;
                classValuesArray.push("illusionMisc"); //position 29;
                classValuesArray.push("mercantileMisc"); //position 30;
                classValuesArray.push("speechcraftMisc"); //position 31;
                classValuesArray.push("alchemyMisc"); //position 32;
                classValuesArray.push("conjurationMisc"); //position 33;
                classValuesArray.push("enchantMisc"); //position 34;
                classValuesArray.push("securityMisc"); //position 35;
                classValuesArray.push("alterationMisc"); //position 36;
                classValuesArray.push("destructionMisc"); //position 37; 
        
                SetClass(); //triggers SetClass() to send and set class values          
        
        
            } else if (classSelect == 13) { //nightblade
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("willpower"); //position 0;
                classValuesArray.push("speed"); //position 1;
                classValuesArray.push("mysticism"); //position 2;
                classValuesArray.push("illusion"); //position 3;            
                classValuesArray.push("alteration"); //position 4;
                classValuesArray.push("sneak"); //position 5;
                classValuesArray.push("short-blade"); //position 6;
                classValuesArray.push("light-armor"); //position 7;
                classValuesArray.push("unarmored"); //position 8;
                classValuesArray.push("destruction"); //position 9;
                classValuesArray.push("marksman"); //position 10;
                classValuesArray.push("security"); //position 11;
        
                //specialities [magic]
                classValuesArray.push("alchemySpeciality"); //position 12;
                classValuesArray.push("enchantSpeciality"); //position 13;
                classValuesArray.push("conjurationSpeciality"); //position 14;
                classValuesArray.push("alterationSpeciality"); //position 15;
                classValuesArray.push("destructionSpeciality"); //position 16;
                classValuesArray.push("mysticismSpeciality"); //position 17;
                classValuesArray.push("restorationSpeciality"); //position 18;
                classValuesArray.push("illusionSpeciality"); //position 19;
                classValuesArray.push("unarmoredSpeciality"); //position 20; 
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("medium-armorMisc"); //position 22;
                classValuesArray.push("spearMisc"); //position 23;
                classValuesArray.push("acrobaticsMisc"); //position 24;
                classValuesArray.push("armorerMisc"); //position 25;
                classValuesArray.push("axeMisc"); //position 26;
                classValuesArray.push("blunt-weaponMisc"); //position 27;
                classValuesArray.push("long-bladeMisc"); //position 28;
                classValuesArray.push("blockMisc"); //position 29;
                classValuesArray.push("athleticsMisc"); //position 30;
                classValuesArray.push("hand-to-handMisc"); //position 31;
                classValuesArray.push("mercantileMisc"); //position 32;
                classValuesArray.push("speechcraftMisc"); //position 33;
                classValuesArray.push("alchemyMisc"); //position 34;
                classValuesArray.push("conjurationMisc"); //position 35;
                classValuesArray.push("enchantMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values          
        
        
            } else if (classSelect == 14) { //pilgrim
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 10;
        
        
                classValuesArray.push("personality"); //position 0;
                classValuesArray.push("endurance"); //position 1;
                classValuesArray.push("speechcraft"); //position 2;
                classValuesArray.push("mercantile"); //position 3;          
                classValuesArray.push("marksman"); //position 4;
                classValuesArray.push("restoration"); //position 5;
                classValuesArray.push("medium-armor"); //position 6;
                classValuesArray.push("illusion"); //position 7;
                classValuesArray.push("hand-to-hand"); //position 8;
                classValuesArray.push("short-blade"); //position 9;
                classValuesArray.push("block"); //position 10;
                classValuesArray.push("alchemy"); //position 11;
        
                //specialities [sneak]
                classValuesArray.push("speechcraftSpeciality"); //position 12;
                classValuesArray.push("mercantileSpeciality"); //position 13;
                classValuesArray.push("hand-to-handSpeciality"); //position 14;
                classValuesArray.push("short-bladeSpeciality"); //position 15;
                classValuesArray.push("marksmanSpeciality"); //position 16;
                classValuesArray.push("light-armorSpeciality"); //position 17;
                classValuesArray.push("sneakSpeciality"); //position 18;
                classValuesArray.push("securitySpeciality"); //position 19;
                classValuesArray.push("acrobaticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("spearMisc"); //position 22;
                classValuesArray.push("acrobaticsMisc"); //position 23;
                classValuesArray.push("armorerMisc"); //position 24;
                classValuesArray.push("axeMisc"); //position 25;
                classValuesArray.push("blunt-weaponMisc"); //position 26;
                classValuesArray.push("long-bladeMisc"); //position 27;
                classValuesArray.push("light-armorMisc"); //position 28;
                classValuesArray.push("sneakMisc"); //position 29;
                classValuesArray.push("athleticsMisc"); //position 30;
                classValuesArray.push("unarmoredMisc"); //position 31;
                classValuesArray.push("conjurationMisc"); //position 32;
                classValuesArray.push("enchantMisc"); //position 33;
                classValuesArray.push("securityMisc"); //position 34;
                classValuesArray.push("alterationMisc"); //position 35;
                classValuesArray.push("destructionMisc"); //position 36;
                classValuesArray.push("mysticismMisc"); //position 37; 
        
                SetClass(); //triggers SetClass() to send and set class values            
        
        
            } else if (classSelect == 15) { //rogue
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("speed"); //position 0;
                classValuesArray.push("personality"); //position 1;
                classValuesArray.push("short-blade"); //position 2;
                classValuesArray.push("mercantile"); //position 3;          
                classValuesArray.push("axe"); //position 4;
                classValuesArray.push("light-armor"); //position 5;
                classValuesArray.push("hand-to-hand"); //position 6;
                classValuesArray.push("block"); //position 7;
                classValuesArray.push("medium-armor"); //position 8;
                classValuesArray.push("speechcraft"); //position 9;
                classValuesArray.push("athletics"); //position 10;
                classValuesArray.push("long-blade"); //position 11;
        
                //specialities[combat]
                classValuesArray.push("long-bladeSpeciality"); //position 12;
                classValuesArray.push("blunt-weaponSpeciality"); //position 13;
                classValuesArray.push("axeSpeciality"); //position 14;
                classValuesArray.push("armorerSpeciality"); //position 15;
                classValuesArray.push("medium-armorSpeciality"); //position 16;
                classValuesArray.push("heavy-armorSpeciality"); //position 17;
                classValuesArray.push("spearSpeciality"); //position 18;
                classValuesArray.push("blockSpeciality"); //position 19;
                classValuesArray.push("athleticsSpeciality"); //position 20;     
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("spearMisc"); //position 22;
                classValuesArray.push("acrobaticsMisc"); //position 23;
                classValuesArray.push("armorerMisc"); //position 24;
                classValuesArray.push("blunt-weaponMisc"); //position 25;
                classValuesArray.push("marksmanMisc"); //position 26;
                classValuesArray.push("sneakMisc"); //position 27;
                classValuesArray.push("unarmoredMisc"); //position 28;
                classValuesArray.push("illusionMisc"); //position 29;
                classValuesArray.push("alchemyMisc"); //position 30;
                classValuesArray.push("conjurationMisc"); //position 31;
                classValuesArray.push("enchantMisc"); //position 32;
                classValuesArray.push("securityMisc"); //position 33;
                classValuesArray.push("alterationMisc"); //position 34;
                classValuesArray.push("destructionMisc"); //position 35;
                classValuesArray.push("mysticismMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values      
        
        
            } else if (classSelect == 16) { //scout
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 10;
        
        
                classValuesArray.push("speed"); //position 0;
                classValuesArray.push("endurance"); //position 1;
                classValuesArray.push("sneak"); //position 2;
                classValuesArray.push("long-blade"); //position 3;          
                classValuesArray.push("medium-armor"); //position 4;
                classValuesArray.push("athletics"); //position 5;
                classValuesArray.push("block"); //position 6;
                classValuesArray.push("marksman"); //position 7;
                classValuesArray.push("alchemy"); //position 8;
                classValuesArray.push("alteration"); //position 9;
                classValuesArray.push("light-armor"); //position 10;
                classValuesArray.push("unarmored"); //position 11;
        
                //specialities[combat]
                classValuesArray.push("long-bladeSpeciality"); //position 12;
                classValuesArray.push("blunt-weaponSpeciality"); //position 13;
                classValuesArray.push("axeSpeciality"); //position 14;
                classValuesArray.push("armorerSpeciality"); //position 15;
                classValuesArray.push("medium-armorSpeciality"); //position 16;
                classValuesArray.push("heavy-armorSpeciality"); //position 17;
                classValuesArray.push("spearSpeciality"); //position 18;
                classValuesArray.push("blockSpeciality"); //position 19;
                classValuesArray.push("athleticsSpeciality"); //position 20;     
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("spearMisc"); //position 22;
                classValuesArray.push("acrobaticsMisc"); //position 23;
                classValuesArray.push("armorerMisc"); //position 24;
                classValuesArray.push("axeMisc"); //position 25;
                classValuesArray.push("blunt-weaponMisc"); //position 26;
                classValuesArray.push("hand-to-handMisc"); //position 27;
                classValuesArray.push("short-bladeMisc"); //position 28;
                classValuesArray.push("restorationMisc"); //position 29;
                classValuesArray.push("illusionMisc"); //position 30;
                classValuesArray.push("mercantileMisc"); //position 31;
                classValuesArray.push("speechcraftMisc"); //position 32;
                classValuesArray.push("conjurationMisc"); //position 33;
                classValuesArray.push("enchantMisc"); //position 34;
                classValuesArray.push("securityMisc"); //position 35;
                classValuesArray.push("destructionMisc"); //position 36;
                classValuesArray.push("mysticismMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values            
        
        
            } else if (classSelect == 17) { //sorcerer
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 10;
        
        
                classValuesArray.push("intelligence"); //position 0;
                classValuesArray.push("endurance"); //position 1;
                classValuesArray.push("enchant"); //position 2;
                classValuesArray.push("conjuration"); //position 3;            
                classValuesArray.push("mysticism"); //position 4;
                classValuesArray.push("destruction"); //position 5;
                classValuesArray.push("alteration"); //position 6;
                classValuesArray.push("illusion"); //position 7;
                classValuesArray.push("medium-armor"); //position 8;
                classValuesArray.push("heavy-armor"); //position 9;
                classValuesArray.push("marksman"); //position 10;
                classValuesArray.push("short-blade"); //position 11;
        
                //specialities [magic]
                classValuesArray.push("alchemySpeciality"); //position 12;
                classValuesArray.push("enchantSpeciality"); //position 13;
                classValuesArray.push("conjurationSpeciality"); //position 14;
                classValuesArray.push("alterationSpeciality"); //position 15;
                classValuesArray.push("destructionSpeciality"); //position 16;
                classValuesArray.push("mysticismSpeciality"); //position 17;
                classValuesArray.push("restorationSpeciality"); //position 18;
                classValuesArray.push("illusionSpeciality"); //position 19;
                classValuesArray.push("unarmoredSpeciality"); //position 20; 
        
                //misc skills 
                classValuesArray.push("spearMisc"); //position 21;     
                classValuesArray.push("acrobaticsMisc"); //position 22;
                classValuesArray.push("armorerMisc"); //position 23;
                classValuesArray.push("axeMisc"); //position 24;
                classValuesArray.push("blunt-weaponMisc"); //position 25;
                classValuesArray.push("long-bladeMisc"); //position 26;
                classValuesArray.push("blockMisc"); //position 27;
                classValuesArray.push("light-armorMisc"); //position 28;
                classValuesArray.push("sneakMisc"); //position 29;
                classValuesArray.push("athleticsMisc"); //position 30;
                classValuesArray.push("hand-to-handMisc"); //position 31;
                classValuesArray.push("unarmoredMisc"); //position 32;
                classValuesArray.push("mercantileMisc"); //position 33;
                classValuesArray.push("speechcraftMisc"); //position 34;
                classValuesArray.push("alchemyMisc"); //position 35;
                classValuesArray.push("securityMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values           
        
        
            } else if (classSelect == 18) { //spellsword
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 10;
        
        
                classValuesArray.push("willpower"); //position 0;
                classValuesArray.push("endurance"); //position 1;
                classValuesArray.push("block"); //position 2;
                classValuesArray.push("restoration"); //position 3;          
                classValuesArray.push("long-blade"); //position 4;
                classValuesArray.push("destruction"); //position 5;
                classValuesArray.push("alteration"); //position 6;
                classValuesArray.push("blunt-weapon"); //position 7;
                classValuesArray.push("enchant"); //position 8;
                classValuesArray.push("alchemy"); //position 9;
                classValuesArray.push("medium-armor"); //position 10;
                classValuesArray.push("axe"); //position 11;
        
                //specialities [magic]
                classValuesArray.push("alchemySpeciality"); //position 12;
                classValuesArray.push("enchantSpeciality"); //position 13;
                classValuesArray.push("conjurationSpeciality"); //position 14;
                classValuesArray.push("alterationSpeciality"); //position 15;
                classValuesArray.push("destructionSpeciality"); //position 16;
                classValuesArray.push("mysticismSpeciality"); //position 17;
                classValuesArray.push("restorationSpeciality"); //position 18;
                classValuesArray.push("illusionSpeciality"); //position 19;
                classValuesArray.push("unarmoredSpeciality"); //position 20; 
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("spearMisc"); //position 22;
                classValuesArray.push("acrobaticsMisc"); //position 23;
                classValuesArray.push("armorerMisc"); //position 24;
                classValuesArray.push("light-armorMisc"); //position 25;
                classValuesArray.push("marksmanMisc"); //position 26;
                classValuesArray.push("sneakMisc"); //position 27;
                classValuesArray.push("athleticsMisc"); //position 28;
                classValuesArray.push("hand-to-handMisc"); //position 29;
                classValuesArray.push("short-bladeMisc"); //position 30;
                classValuesArray.push("unarmoredMisc"); //position 31;
                classValuesArray.push("illusionMisc"); //position 32;
                classValuesArray.push("mercantileMisc"); //position 33;
                classValuesArray.push("speechcraftMisc"); //position 34;
                classValuesArray.push("conjurationMisc"); //position 35;
                classValuesArray.push("securityMisc"); //position 36;
                classValuesArray.push("mysticismMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values         
        
        
            } else if (classSelect == 19) { //thief
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("speed"); //position 0;
                classValuesArray.push("agility"); //position 1;
                classValuesArray.push("security"); //position 2;
                classValuesArray.push("sneak"); //position 3;            
                classValuesArray.push("acrobatics"); //position 4;
                classValuesArray.push("light-armor"); //position 5;
                classValuesArray.push("short-blade"); //position 6;
                classValuesArray.push("marksman"); //position 7;
                classValuesArray.push("speechcraft"); //position 8;
                classValuesArray.push("hand-to-hand"); //position 9;
                classValuesArray.push("mercantile"); //position 10;
                classValuesArray.push("athletics"); //position 11;
        
                //specialities [sneak]
                classValuesArray.push("speechcraftSpeciality"); //position 12;
                classValuesArray.push("mercantileSpeciality"); //position 13;
                classValuesArray.push("hand-to-handSpeciality"); //position 14;
                classValuesArray.push("short-bladeSpeciality"); //position 15;
                classValuesArray.push("marksmanSpeciality"); //position 16;
                classValuesArray.push("light-armorSpeciality"); //position 17;
                classValuesArray.push("sneakSpeciality"); //position 18;
                classValuesArray.push("securitySpeciality"); //position 19;
                classValuesArray.push("acrobaticsSpeciality"); //position 20;
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("medium-armorMisc"); //position 22;
                classValuesArray.push("spearMisc"); //position 23;
                classValuesArray.push("armorerMisc"); //position 24;
                classValuesArray.push("axeMisc"); //position 25;
                classValuesArray.push("blunt-weaponMisc"); //position 26;
                classValuesArray.push("long-bladeMisc"); //position 27;
                classValuesArray.push("blockMisc"); //position 28;
                classValuesArray.push("unarmoredMisc"); //position 29;
                classValuesArray.push("illusionMisc"); //position 30;
                classValuesArray.push("alchemyMisc"); //position 31;
                classValuesArray.push("conjurationMisc"); //position 32;
                classValuesArray.push("enchantMisc"); //position 33;
                classValuesArray.push("alterationMisc"); //position 34;
                classValuesArray.push("destructionMisc"); //position 35;
                classValuesArray.push("mysticismMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values           
        
        
            } else if (classSelect == 20) { //warrior
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 10;
        
        
                classValuesArray.push("strength"); //position 0;
                classValuesArray.push("endurance"); //position 1;
                classValuesArray.push("long-blade"); //position 2;
                classValuesArray.push("medium-armor"); //position 3;            
                classValuesArray.push("heavy-armor"); //position 4;
                classValuesArray.push("athletics"); //position 5;
                classValuesArray.push("block"); //position 6;
                classValuesArray.push("armorer"); //position 7;
                classValuesArray.push("spear"); //position 8;
                classValuesArray.push("marksman"); //position 9;
                classValuesArray.push("axe"); //position 10;
                classValuesArray.push("blunt-weapon"); //position 11;
        
                //specialities[combat]
                classValuesArray.push("long-bladeSpeciality"); //position 12;
                classValuesArray.push("blunt-weaponSpeciality"); //position 13;
                classValuesArray.push("axeSpeciality"); //position 14;
                classValuesArray.push("armorerSpeciality"); //position 15;
                classValuesArray.push("medium-armorSpeciality"); //position 16;
                classValuesArray.push("heavy-armorSpeciality"); //position 17;
                classValuesArray.push("spearSpeciality"); //position 18;
                classValuesArray.push("blockSpeciality"); //position 19;
                classValuesArray.push("athleticsSpeciality"); //position 20;     
        
                //misc skills 
                classValuesArray.push("acrobaticsMisc"); //position 21;     
                classValuesArray.push("light-armorMisc"); //position 22;
                classValuesArray.push("sneakMisc"); //position 23;
                classValuesArray.push("hand-to-handMisc"); //position 24;
                classValuesArray.push("short-bladeMisc"); //position 25;
                classValuesArray.push("unarmoredMisc"); //position 26;
                classValuesArray.push("illusionMisc"); //position 27;
                classValuesArray.push("mercantileMisc"); //position 28;
                classValuesArray.push("speechcraftMisc"); //position 29;
                classValuesArray.push("alchemyMisc"); //position 30;
                classValuesArray.push("conjurationMisc"); //position 31;
                classValuesArray.push("enchantMisc"); //position 32;
                classValuesArray.push("securityMisc"); //position 33;
                classValuesArray.push("alterationMisc"); //position 34;
                classValuesArray.push("destructionMisc"); //position 35;
                classValuesArray.push("mysticismMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values             
        
            } else if (classSelect == 21) { //witchhunter
        
                PurifyClassValues();
        
                EmptyClassArray();
        
                checkValue = "checked";
                classSkillsArray.push(checkValue);
        
                classValueEndurance = 0;
        
        
                classValuesArray.push("intelligence"); //position 0;
                classValuesArray.push("agility"); //position 1;
                classValuesArray.push("conjuration"); //position 2;
                classValuesArray.push("enchant"); //position 3;            
                classValuesArray.push("alchemy"); //position 4;
                classValuesArray.push("light-armor"); //position 5;
                classValuesArray.push("marksman"); //position 6;
                classValuesArray.push("unarmored"); //position 7;
                classValuesArray.push("block"); //position 8;
                classValuesArray.push("blunt-weapon"); //position 9;
                classValuesArray.push("sneak"); //position 10;
                classValuesArray.push("mysticism"); //position 11;
        
                //specialities [magic]
                classValuesArray.push("alchemySpeciality"); //position 12;
                classValuesArray.push("enchantSpeciality"); //position 13;
                classValuesArray.push("conjurationSpeciality"); //position 14;
                classValuesArray.push("alterationSpeciality"); //position 15;
                classValuesArray.push("destructionSpeciality"); //position 16;
                classValuesArray.push("mysticismSpeciality"); //position 17;
                classValuesArray.push("restorationSpeciality"); //position 18;
                classValuesArray.push("illusionSpeciality"); //position 19;
                classValuesArray.push("unarmoredSpeciality"); //position 20; 
        
                //misc skills 
                classValuesArray.push("heavy-armorMisc"); //position 21;     
                classValuesArray.push("medium-armorMisc"); //position 22;
                classValuesArray.push("spearMisc"); //position 23;
                classValuesArray.push("acrobaticsMisc"); //position 24;
                classValuesArray.push("armorerMisc"); //position 25;
                classValuesArray.push("axeMisc"); //position 26;
                classValuesArray.push("long-bladeMisc"); //position 27;
                classValuesArray.push("athleticsMisc"); //position 28;
                classValuesArray.push("hand-to-handMisc"); //position 29;
                classValuesArray.push("short-bladeMisc"); //position 30;
                classValuesArray.push("illusionMisc"); //position 31;
                classValuesArray.push("mercantileMisc"); //position 32;
                classValuesArray.push("speechcraftMisc"); //position 33;
                classValuesArray.push("securityMisc"); //position 34;
                classValuesArray.push("alterationMisc"); //position 35;
                classValuesArray.push("destructionMisc"); //position 36;
                classValuesArray.push("restorationMisc"); //position 37;
        
                SetClass(); //triggers SetClass() to send and set class values  
        
        
            }
        
        }
        
        
        
        
        function SetClass() {
        
            const localArr = []; //array to store local results from optimised array  
        
        
            for (var i = 0; i < classValuesArray.length; i++) { //iterates through classValueArray to push values into localArr
        
                localArr.push(classValuesArray[i]);
        
            }
        
        
            while (classValuesArray.length) { //clear classValueArray
        
                classValuesArray.shift();
        
            }
        
        
        
            if (splicedArr.length > 0) { //iterate through shifted array if values exist within it 
        
                for (var s = 0; s < splicedArr.length; s++) {
        
                    if (splicedArr[s] === "strength") { //checks against values to see which are selected 
        
                        baseStrength = baseStrength - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "intelligence") {
        
                        baseIntelligence = baseIntelligence - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "willpower") {
        
                        baseWillpower = baseWillpower - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "agility") {
        
                        baseAgility = baseAgility - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "speed") {
        
                        baseSpeed = baseSpeed - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "endurance") {
        
                        baseEndurance = baseEndurance - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "personality") {
        
                        basePersonality = basePersonality - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "heavy-armor") {
        
                        baseHeavyArmor = baseHeavyArmor - oldLocalArr[s];
                        subject.unsubscribe(HeavyArmorObserver);
        
                    } else if (splicedArr[s] === "medium-armor") {
        
                        baseMediumArmor = baseMediumArmor - oldLocalArr[s];
                        subject.unsubscribe(MediumArmorObserver);
        
                    } else if (splicedArr[s] === "spear") {
        
                        baseSpear = baseSpear - oldLocalArr[s];
                        subject.unsubscribe(SpearObserver);
        
                    } else if (splicedArr[s] === "acrobatics") {
        
                        baseAcrobatics = baseAcrobatics - oldLocalArr[s];
                        subject.unsubscribe(AcrobaticsObserver);
        
                    } else if (splicedArr[s] === "armorer") {
        
                        baseArmorer = baseArmorer - oldLocalArr[s];
                        subject.unsubscribe(ArmorerObserver);
        
                    } else if (splicedArr[s] === "axe") {
        
                        baseAxe = baseAxe - oldLocalArr[s];
                        subject.unsubscribe(AxeObserver);
        
                    } else if (splicedArr[s] === "blunt-weapon") {
        
                        baseBluntWeapon = baseBluntWeapon - oldLocalArr[s];
                        subject.unsubscribe(BluntWeaponObserver);
        
                    } else if (splicedArr[s] === "long-blade") {
        
                        baseLongBlade = baseLongBlade - oldLocalArr[s];
                        subject.unsubscribe(LongBladeObserver);
        
                    } else if (splicedArr[s] === "block") {
        
                        baseBlock = baseBlock - oldLocalArr[s];
                        subject.unsubscribe(BlockObserver);
        
                    } else if (splicedArr[s] === "light-armor") {
        
                        baseLightArmor = baseLightArmor - oldLocalArr[s];
                        subject.unsubscribe(LightArmorObserver);
        
                    } else if (splicedArr[s] === "marksman") {
        
                        baseMarksman = baseMarksman - oldLocalArr[s];
                        subject.unsubscribe(MarksmanObserver);
        
                    } else if (splicedArr[s] === "sneak") {
        
                        baseSneak = baseSneak - oldLocalArr[s];
                        subject.unsubscribe(SneakObserver);
        
                    } else if (splicedArr[s] === "athletics") {
        
                        baseAthletics = baseAthletics - oldLocalArr[s];
                        subject.unsubscribe(AthleticsObserver);
        
                    } else if (splicedArr[s] === "hand-to-hand") {
        
                        baseHandToHand = baseHandToHand - oldLocalArr[s];
                        subject.unsubscribe(HandToHandObserver);
        
                    } else if (splicedArr[s] === "short-blade") {
        
                        baseShortBlade = baseShortBlade - oldLocalArr[s];
                        subject.unsubscribe(ShortBladeObserver);
        
                    } else if (splicedArr[s] === "unarmored") {
        
                        baseUnarmored = baseUnarmored - oldLocalArr[s];
                        subject.unsubscribe(UnarmoredObserver);
        
                    } else if (splicedArr[s] === "illusion") {
        
                        baseIllusion = baseIllusion - oldLocalArr[s];
                        subject.unsubscribe(IllusionObserver);
        
                    } else if (splicedArr[s] === "mercantile") {
        
                        baseMercantile = baseMercantile - oldLocalArr[s];
                        subject.unsubscribe(MercantileObserver);
        
                    } else if (splicedArr[s] === "speechcraft") {
        
                        baseSpeechcraft = baseSpeechcraft - oldLocalArr[s];
                        subject.unsubscribe(SpeechcraftObserver);
        
                    } else if (splicedArr[s] === "alchemy") {
        
                        baseAlchemy = baseAlchemy - oldLocalArr[s];
                        subject.unsubscribe(AlchemyObserver);
        
                    } else if (splicedArr[s] === "conjuration") {
        
                        baseConjuration = baseConjuration - oldLocalArr[s];
                        subject.unsubscribe(ConjurationObserver);
        
                    } else if (splicedArr[s] === "enchant") {
        
                        baseEnchant = baseEnchant - oldLocalArr[s];
                        subject.unsubscribe(EnchantObserver);
        
                    } else if (splicedArr[s] === "security") {
        
                        baseSecurity = baseSecurity - oldLocalArr[s];
                        subject.unsubscribe(SecurityObserver);
        
                    } else if (splicedArr[s] === "alteration") {
        
                        baseAlteration = baseAlteration - oldLocalArr[s];
                        subject.unsubscribe(AlterationObserver);
        
                    } else if (splicedArr[s] === "destruction") {
        
                        baseDestruction = baseDestruction - oldLocalArr[s];
                        subject.unsubscribe(DestructionObserver);
        
                    } else if (splicedArr[s] === "mysticism") {
        
                        baseMysticism = baseMysticism - oldLocalArr[s];
                        subject.unsubscribe(MysticismObserver);
        
                    } else if (splicedArr[s] === "restoration") {
        
                        baseRestoration = baseRestoration - oldLocalArr[s];
                        subject.unsubscribe(RestorationObserver);
        
                    } else if (splicedArr[s] === "heavy-armorSpeciality") {
        
                        baseHeavyArmor = baseHeavyArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "medium-armorSpeciality") {
        
                        baseMediumArmor = baseMediumArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "spearSpeciality") {
        
                        baseSpear = baseSpear - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "acrobaticsSpeciality") {
        
                        baseAcrobatics = baseAcrobatics - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "armorerSpeciality") {
        
                        baseArmorer = baseArmorer - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "axeSpeciality") {
        
                        baseAxe = baseAxe - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "blunt-weaponSpeciality") {
        
                        baseBluntWeapon = baseBluntWeapon - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "long-bladeSpeciality") {
        
                        baseLongBlade = baseLongBlade - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "blockSpeciality") {
        
                        baseBlock = baseBlock - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "light-armorSpeciality") {
        
                        baseLightArmor = baseLightArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "marksmanSpeciality") {
        
                        baseMarksman = baseMarksman - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "sneakSpeciality") {
        
                        baseSneak = baseSneak - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "athleticsSpeciality") {
        
                        baseAthletics = baseAthletics - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "hand-to-handSpeciality") {
        
                        baseHandToHand = baseHandToHand - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "short-bladeSpeciality") {
        
                        baseShortBlade = baseShortBlade - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "unarmoredSpeciality") {
        
                        baseUnarmored = baseUnarmored - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "illusionSpeciality") {
        
                        baseIllusion = baseIllusion - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "mercantileSpeciality") {
        
                        baseMercantile = baseMercantile - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "speechcraftSpeciality") {
        
                        baseSpeechcraft = baseSpeechcraft - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "alchemySpeciality") {
        
                        baseAlchemy = baseAlchemy - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "conjurationSpeciality") {
        
                        baseConjuration = baseConjuration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "enchantSpeciality") {
        
                        baseEnchant = baseEnchant - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "securitySpeciality") {
        
                        baseSecurity = baseSecurity - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "alterationSpeciality") {
        
                        baseAlteration = baseAlteration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "destructionSpeciality") {
        
                        baseDestruction = baseDestruction - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "mysticismSpeciality") {
        
                        baseMysticism = baseMysticism - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "restorationSpeciality") {
        
                        baseRestoration = baseRestoration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "heavy-armorMisc") {
        
                        baseHeavyArmor = baseHeavyArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "medium-armorMisc") {
        
                        baseMediumArmor = baseMediumArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "spearMisc") {
        
                        baseSpear = baseSpear - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "acrobaticsMisc") {
        
        
                        baseAcrobatics = baseAcrobatics - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "armorerMisc") {
        
        
                        baseArmorer = baseArmorer - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "axeMisc") {
        
                        baseAxe = baseAxe - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "blunt-weaponMisc") {
        
                        baseBluntWeapon = baseBluntWeapon - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "long-bladeMisc") {
        
                        baseLongBlade = baseLongBlade - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "blockMisc") {
        
                        baseBlock = baseBlock - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "light-armorMisc") {
        
                        baseLightArmor = baseLightArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "marksmanMisc") {
        
                        baseMarksman = baseMarksman - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "sneakMisc") {
        
                        baseSneak = baseSneak - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "athleticsMisc") {
        
                        baseAthletics = baseAthletics - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "hand-to-handMisc") {
        
                        baseHandToHand = baseHandToHand - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "short-bladeMisc") {
        
                        baseShortBlade = baseShortBlade - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "unarmoredMisc") {
        
                        baseUnarmored = baseUnarmored - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "illusionMisc") {
        
                        baseIllusion = baseIllusion - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "mercantileMisc") {
        
                        baseMercantile = baseMercantile - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "speechcraftMisc") {
        
                        baseSpeechcraft = baseSpeechcraft - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "alchemyMisc") {
        
                        baseAlchemy = baseAlchemy - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "conjurationMisc") {
        
                        baseConjuration = baseConjuration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "enchantMisc") {
        
                        baseEnchant = baseEnchant - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "securityMisc") {
        
                        baseSecurity = baseSecurity - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "alterationMisc") {
        
                        baseAlteration = baseAlteration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "destructionMisc") {
        
                        baseDestruction = baseDestruction - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "mysticismMisc") {
        
                        baseMysticism = baseMysticism - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "restorationMisc") {
        
                        baseRestoration = baseRestoration - oldLocalArr[s];
        
                    }
        
                } //end of for loop (spliced)
        
            }
        
            for (var n = 0; n < localArr.length; n++) { //iterate through local array
        
                if (localArr[n] === "strength") { //wont need to subscribe to observer as is a attribute 
        
                    //set new base value with class value added 
                    baseStrength = baseStrength + 10; //values are set so attributes are 10, skills can be 30 or 15, specializations are 5 
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(10); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "intelligence") {
        
                    baseIntelligence = baseIntelligence + 10;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(10); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "willpower") {
        
                    baseWillpower = baseWillpower + 10;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(10); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "agility") {
        
                    baseAgility = baseAgility + 10;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(10); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "speed") {
        
                    baseSpeed = baseSpeed + 10;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(10); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "endurance") {
        
                    baseEndurance = baseEndurance + 10;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(10); //number represents the final value used which will be inputted
        
                } else if (localArr[n] === "personality") {
        
                    basePersonality = basePersonality + 10;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(10); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "heavy-armor") {
        
                    subject.subscribe(HeavyArmorObserver);
        
                    if (n <= 6) { //skills position in array determines whether is a minor or major skill and therefore determines its value
        
                        baseHeavyArmor = baseHeavyArmor + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseHeavyArmor = baseHeavyArmor + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
        
                } else if (localArr[n] === "medium-armor") {
        
                    subject.subscribe(MediumArmorObserver);
        
                    if (n <= 6) {
        
                        baseMediumArmor = baseMediumArmor + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseMediumArmor = baseMediumArmor + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "spear") {
        
                    subject.subscribe(SpearObserver);
        
                    if (n <= 6) {
        
                        baseSpear = baseSpear + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseSpear = baseSpear + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "acrobatics") {
        
                    subject.subscribe(AcrobaticsObserver);
        
                    if (localArr[n] <= localArr[6]) {
        
                        baseAcrobatics = baseAcrobatics + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseAcrobatics = baseAcrobatics + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "armorer") {
        
                    subject.subscribe(ArmorerObserver);
        
                    if (n <= 6) {
        
                        baseArmorer = baseArmorer + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseArmorer = baseArmorer + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "axe") {
        
                    subject.subscribe(AxeObserver);
        
                    if (n <= 6) {
        
                        baseAxe = baseAxe + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseAxe = baseAxe + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "blunt-weapon") {
        
                    subject.subscribe(BluntWeaponObserver);
        
                    if (n <= 6) {
        
                        baseBluntWeapon = baseBluntWeapon + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseBluntWeapon = baseBluntWeapon + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "long-blade") {
        
                    subject.subscribe(LongBladeObserver);
        
                    if (n <= 6) {
        
                        baseLongBlade = baseLongBlade + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseLongBlade = baseLongBlade + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "block") {
        
                    subject.subscribe(BlockObserver);
        
                    if (n <= 6) {
        
                        baseBlock = baseBlock + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseBlock = baseBlock + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "light-armor") {
        
                    subject.subscribe(LightArmorObserver);
        
                    if (n <= 6) {
        
                        baseLightArmor = baseLightArmor + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseLightArmor = baseLightArmor + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "marksman") {
        
                    subject.subscribe(MarksmanObserver);
        
                    if (n <= 6) {
        
                        baseMarksman = baseMarksman + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseMarksman = baseMarksman + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "sneak") {
        
                    subject.subscribe(SneakObserver);
        
                    if (n <= 6) {
        
                        baseSneak = baseSneak + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseSneak = baseSneak + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "athletics") {
        
                    subject.subscribe(AthleticsObserver);
        
                    if (n <= 6) {
        
                        baseAthletics = baseAthletics + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseAthletics = baseAthletics + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "hand-to-hand") {
        
                    subject.subscribe(HandToHandObserver);
        
                    if (n <= 6) {
        
                        baseHandToHand = baseHandToHand + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseHandToHand = baseHandToHand + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "short-blade") {
        
                    subject.subscribe(ShortBladeObserver);
        
                    if (n <= 6) {
        
                        baseShortBlade = baseShortBlade + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseShortBlade = baseShortBlade + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "unarmored") {
        
                    subject.subscribe(UnarmoredObserver);
        
                    if (n <= 6) {
        
                        baseUnarmored = baseUnarmored + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseUnarmored = baseUnarmored + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "illusion") {
        
                    subject.subscribe(IllusionObserver);
        
                    if (n <= 6) {
        
                        baseIllusion = baseIllusion + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseIllusion = baseIllusion + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "mercantile") {
        
                    subject.subscribe(MercantileObserver);
        
                    if (n <= 6) {
        
                        baseMercantile = baseMercantile + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseMercantile = baseMercantile + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "speechcraft") {
        
                    subject.subscribe(SpeechcraftObserver);
        
                    if (n <= 6) {
        
                        baseSpeechcraft = baseSpeechcraft + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseSpeechcraft = baseSpeechcraft + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "alchemy") {
        
                    subject.subscribe(AlchemyObserver);
        
                    if (n <= 6) {
        
                        baseAlchemy = baseAlchemy + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseAlchemy = baseAlchemy + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "conjuration") {
        
                    subject.subscribe(ConjurationObserver);
        
                    if (n <= 6) {
        
                        baseConjuration = baseConjuration + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseConjuration = baseConjuration + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "enchant") {
        
                    subject.subscribe(EnchantObserver);
        
                    if (n <= 6) {
        
                        baseEnchant = baseEnchant + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseEnchant = baseEnchant + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "security") {
        
                    subject.subscribe(SecurityObserver);
        
                    if (n <= 6) {
        
                        baseSecurity = baseSecurity + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseSecurity = baseSecurity + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "alteration") {
        
                    subject.subscribe(AlterationObserver);
        
                    if (n <= 6) {
        
                        baseAlteration = baseAlteration + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseAlteration = baseAlteration + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "destruction") {
        
                    subject.subscribe(DestructionObserver);
        
                    if (n <= 6) {
        
                        baseDestruction = baseDestruction + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseDestruction = baseDestruction + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "mysticism") {
        
                    subject.subscribe(MysticismObserver);
        
                    if (n <= 6) {
        
                        baseMysticism = baseMysticism + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseMysticism = baseMysticism + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "restoration") {
        
                    subject.subscribe(RestorationObserver);
        
                    if (n <= 6) {
        
                        baseRestoration = baseRestoration + 30;
        
                        oldLocalArr.push(30); //oldLocalArr.push(30);
        
                    } else {
        
                        baseRestoration = baseRestoration + 15;
        
                        oldLocalArr.push(15); //oldLocalArr.push(15);
        
                    }
        
                } else if (localArr[n] === "heavy-armorSpeciality") {
        
                    baseHeavyArmor = baseHeavyArmor + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "medium-armorSpeciality") {
        
                    baseMediumArmor = baseMediumArmor + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "spearSpeciality") {
        
                    baseSpear = baseSpear + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "acrobaticsSpeciality") {
        
                    baseAcrobatics = baseAcrobatics + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "armorerSpeciality") {
        
                    baseArmorer = baseArmorer + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "axeSpeciality") {
        
                    baseAxe = baseAxe + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "blunt-weaponSpeciality") {
        
                    baseBluntWeapon = baseBluntWeapon + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "long-bladeSpeciality") {
        
                    baseLongBlade = baseLongBlade + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
                } else if (localArr[n] === "blockSpeciality") {
        
                    baseBlock = baseBlock + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                    baseLightArmor = baseLightArmor + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
                } else if (localArr[n] === "marksmanSpeciality") {
        
                    baseMarksman = baseMarksman + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "sneakSpeciality") {
        
                    baseSneak = baseSneak + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
                } else if (localArr[n] === "athleticsSpeciality") {
        
                    baseAthletics = baseAthletics + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "hand-to-handSpeciality") {
        
                    baseHandToHand = baseHandToHand + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
                } else if (localArr[n] === "short-bladeSpeciality") {
        
                    baseShortBlade = baseShortBlade + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "unarmoredSpeciality") {
        
                    baseUnarmored = baseUnarmored + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "illusionSpeciality") {
        
                    baseIllusion = baseIllusion + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "mercantileSpeciality") {
        
                    baseMercantile = baseMercantile + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
                } else if (localArr[n] === "speechcraftSpeciality") {
        
                    baseSpeechcraft = baseSpeechcraft + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "alchemySpeciality") {
        
                    baseAlchemy = baseAlchemy + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "conjurationSpeciality") {
        
                    baseConjuration = baseConjuration + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "enchantSpeciality") {
        
                    baseEnchant = baseEnchant + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "securitySpeciality") {
        
                    baseSecurity = baseSecurity + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "alterationSpeciality") {
        
                    baseAlteration = baseAlteration + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "destructionSpeciality") {
        
                    baseDestruction = baseDestruction + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "mysticismSpeciality") {
        
                    baseMysticism = baseMysticism + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "restorationSpeciality") {
        
                    baseRestoration = baseRestoration + 5;
        
                    //FOR SETTING OLD VAR 
                    oldLocalArr.push(5); //number represents the final value used which will be inputted 
        
                } else if (localArr[n] === "heavy-armorMisc") {
        
                    baseHeavyArmor = baseHeavyArmor + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "medium-armorMisc") {
        
                    baseMediumArmor = baseMediumArmor + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "spearMisc") {
        
                    baseSpear = baseSpear + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "acrobaticsMisc") {
        
                    baseAcrobatics = baseAcrobatics + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "armorerMisc") {
        
                    baseArmorer = baseArmorer + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "axeMisc") {
        
                    baseAxe = baseAxe + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "blunt-weaponMisc") {
        
                    baseBluntWeapon = baseBluntWeapon + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "long-bladeMisc") {
        
                    baseLongBlade = baseLongBlade + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "blockMisc") {
        
                    baseBlock = baseBlock + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "light-armorMisc") {
        
                    baseLightArmor = baseLightArmor + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "marksmanMisc") {
        
                    baseMarksman = baseMarksman + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "sneakMisc") {
        
                    baseSneak = baseSneak + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "athleticsMisc") {
        
                    baseAthletics = baseAthletics + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "hand-to-handMisc") {
        
                    baseHandToHand = baseHandToHand + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "short-bladeMisc") {
        
                    baseShortBlade = baseShortBlade + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "unarmoredMisc") {
        
                    baseUnarmored = baseUnarmored + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "illusionMisc") {
        
                    baseIllusion = baseIllusion + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "mercantileMisc") {
        
                    baseMercantile = baseMercantile + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "speechcraftMisc") {
        
                    baseSpeechcraft = baseSpeechcraft + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "alchemyMisc") {
        
                    baseAlchemy = baseAlchemy + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "conjurationMisc") {
        
                    baseConjuration = baseConjuration + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "enchantMisc") {
        
                    baseEnchant = baseEnchant + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "securityMisc") {
        
                    baseSecurity = baseSecurity + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "alterationMisc") {
        
                    baseAlteration = baseAlteration + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "destructionMisc") {
        
                    baseDestruction = baseDestruction + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "mysticismMisc") {
        
                    baseMysticism = baseMysticism + 5;
                    oldLocalArr.push(5);
        
                } else if (localArr[n] === "restorationMisc") {
        
                    baseRestoration = baseRestoration + 5;
                    oldLocalArr.push(5);
        
                }
        
        
            }
        
            splicedArr = localArr.splice(0, 38); //sets spliced array as local array values to iterate through 
        
        
            while (localArr.length) {
        
                localArr.shift(); //clears local array 
        
            }
        
            //splice down here and use for statement at top if spliced length greater than 0
        
        
            if (oldLocalArr.length > 38) { //removes unneeded oldLocal values 
        
                oldLocalArr.splice(0, 38);
        
            }
        
        
            if (splicedArr.length > 38) {
        
                splicedArr.splice(0, 38);
        
            }
        
        
        
            if (checkLoad === 0) { //check load determines if load is currently running or not, should not be called if is apart of loading sequence 
        
        
                ValueChangeDetected(); //subject to change --> should reupdate values thorughout calc showing new vals after class set
        
            }
        
        }
        
        
        function AlterClass() { //used to iterate through and clear for new initialisation on load (if needed)
        
        
            if (splicedArr.length > 0) {
        
                for (var s = 0; s < splicedArr.length; s++) {
        
                    if (splicedArr[s] === "strength") { //checks against values to see which are selected 
        
                        baseStrength = baseStrength - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "intelligence") {
        
                        baseIntelligence = baseIntelligence - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "willpower") {
        
                        baseWillpower = baseWillpower - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "agility") {
        
                        baseAgility = baseAgility - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "speed") {
        
                        baseSpeed = baseSpeed - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "endurance") {
        
                        baseEndurance = baseEndurance - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "personality") {
        
                        basePersonality = basePersonality - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "heavy-armor") {
        
                        baseHeavyArmor = baseHeavyArmor - oldLocalArr[s];
                        subject.unsubscribe(HeavyArmorObserver);
        
        
                    } else if (splicedArr[s] === "medium-armor") {
        
                        baseMediumArmor = baseMediumArmor - oldLocalArr[s];
                        subject.unsubscribe(MediumArmorObserver);
        
                    } else if (splicedArr[s] === "spear") {
        
                        baseSpear = baseSpear - oldLocalArr[s];
                        subject.unsubscribe(SpearObserver);
        
                    } else if (splicedArr[s] === "acrobatics") {
        
                        baseAcrobatics = baseAcrobatics - oldLocalArr[s];
                        subject.unsubscribe(AcrobaticsObserver);
        
                    } else if (splicedArr[s] === "armorer") {
        
                        baseArmorer = baseArmorer - oldLocalArr[s];
                        subject.unsubscribe(ArmorerObserver);
        
                    } else if (splicedArr[s] === "axe") {
        
                        baseAxe = baseAxe - oldLocalArr[s];
                        subject.unsubscribe(AxeObserver);
        
                    } else if (splicedArr[s] === "blunt-weapon") {
        
                        baseBluntWeapon = baseBluntWeapon - oldLocalArr[s];
                        subject.unsubscribe(BluntWeaponObserver);
        
                    } else if (splicedArr[s] === "long-blade") {
        
                        baseLongBlade = baseLongBlade - oldLocalArr[s];
                        subject.unsubscribe(LongBladeObserver);
        
                    } else if (splicedArr[s] === "block") {
        
                        baseBlock = baseBlock - oldLocalArr[s];
                        subject.unsubscribe(BlockObserver);
        
                    } else if (splicedArr[s] === "light-armor") {
        
                        baseLightArmor = baseLightArmor - oldLocalArr[s];
                        subject.unsubscribe(LightArmorObserver);
        
                    } else if (splicedArr[s] === "marksman") {
        
                        baseMarksman = baseMarksman - oldLocalArr[s];
                        subject.unsubscribe(MarksmanObserver);
        
                    } else if (splicedArr[s] === "sneak") {
        
                        baseSneak = baseSneak - oldLocalArr[s];
                        subject.unsubscribe(SneakObserver);
        
                    } else if (splicedArr[s] === "athletics") {
        
                        baseAthletics = baseAthletics - oldLocalArr[s];
                        subject.unsubscribe(AthleticsObserver);
        
                    } else if (splicedArr[s] === "hand-to-hand") {
        
                        baseHandToHand = baseHandToHand - oldLocalArr[s];
                        subject.unsubscribe(HandToHandObserver);
        
                    } else if (splicedArr[s] === "short-blade") {
        
                        baseShortBlade = baseShortBlade - oldLocalArr[s];
                        subject.unsubscribe(ShortBladeObserver);
        
                    } else if (splicedArr[s] === "unarmored") {
        
                        baseUnarmored = baseUnarmored - oldLocalArr[s];
                        subject.unsubscribe(UnarmoredObserver);
        
                    } else if (splicedArr[s] === "illusion") {
        
                        baseIllusion = baseIllusion - oldLocalArr[s];
                        subject.unsubscribe(IllusionObserver);
        
                    } else if (splicedArr[s] === "mercantile") {
        
                        baseMercantile = baseMercantile - oldLocalArr[s];
                        subject.unsubscribe(MercantileObserver);
        
                    } else if (splicedArr[s] === "speechcraft") {
        
                        baseSpeechcraft = baseSpeechcraft - oldLocalArr[s];
                        subject.unsubscribe(SpeechcraftObserver);
        
                    } else if (splicedArr[s] === "alchemy") {
        
                        baseAlchemy = baseAlchemy - oldLocalArr[s];
                        subject.unsubscribe(AlchemyObserver);
        
                    } else if (splicedArr[s] === "conjuration") {
        
                        baseConjuration = baseConjuration - oldLocalArr[s];
                        subject.unsubscribe(ConjurationObserver);
        
                    } else if (splicedArr[s] === "enchant") {
        
                        baseEnchant = baseEnchant - oldLocalArr[s];
                        subject.unsubscribe(EnchantObserver);
        
                    } else if (splicedArr[s] === "security") {
        
                        baseSecurity = baseSecurity - oldLocalArr[s];
                        subject.unsubscribe(SecurityObserver);
        
                    } else if (splicedArr[s] === "alteration") {
        
                        baseAlteration = baseAlteration - oldLocalArr[s];
                        subject.unsubscribe(AlterationObserver);
        
                    } else if (splicedArr[s] === "destruction") {
        
                        baseDestruction = baseDestruction - oldLocalArr[s];
                        subject.unsubscribe(DestructionObserver);
        
                    } else if (splicedArr[s] === "mysticism") {
        
                        baseMysticism = baseMysticism - oldLocalArr[s];
                        subject.unsubscribe(MysticismObserver);
        
                    } else if (splicedArr[s] === "restoration") {
        
                        baseRestoration = baseRestoration - oldLocalArr[s];
                        subject.unsubscribe(RestorationObserver);
        
                    } else if (splicedArr[s] === "heavy-armorSpeciality") {
        
                        baseHeavyArmor = baseHeavyArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "medium-armorSpeciality") {
        
                        baseMediumArmor = baseMediumArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "spearSpeciality") {
        
                        baseSpear = baseSpear - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "acrobaticsSpeciality") {
        
                        baseAcrobatics = baseAcrobatics - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "armorerSpeciality") {
        
                        baseArmorer = baseArmorer - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "axeSpeciality") {
        
                        baseAxe = baseAxe - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "blunt-weaponSpeciality") {
        
                        baseBluntWeapon = baseBluntWeapon - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "long-bladeSpeciality") {
        
                        baseLongBlade = baseLongBlade - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "blockSpeciality") {
        
                        baseBlock = baseBlock - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "light-armorSpeciality") {
        
                        baseLightArmor = baseLightArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "marksmanSpeciality") {
        
                        baseMarksman = baseMarksman - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "sneakSpeciality") {
        
                        baseSneak = baseSneak - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "athleticsSpeciality") {
        
                        baseAthletics = baseAthletics - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "hand-to-handSpeciality") {
        
                        baseHandToHand = baseHandToHand - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "short-bladeSpeciality") {
        
                        baseShortBlade = baseShortBlade - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "unarmoredSpeciality") {
        
                        baseUnarmored = baseUnarmored - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "illusionSpeciality") {
        
                        baseIllusion = baseIllusion - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "mercantileSpeciality") {
        
                        baseMercantile = baseMercantile - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "speechcraftSpeciality") {
        
                        baseSpeechcraft = baseSpeechcraft - oldLocalArr[s];
        
        
                    } else if (splicedArr[s] === "alchemySpeciality") {
        
                        baseAlchemy = baseAlchemy - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "conjurationSpeciality") {
        
                        baseConjuration = baseConjuration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "enchantSpeciality") {
        
                        baseEnchant = baseEnchant - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "securitySpeciality") {
        
                        baseSecurity = baseSecurity - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "alterationSpeciality") {
        
                        baseAlteration = baseAlteration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "destructionSpeciality") {
        
                        baseDestruction = baseDestruction - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "mysticismSpeciality") {
        
                        baseMysticism = baseMysticism - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "restorationSpeciality") {
        
                        baseRestoration = baseRestoration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "heavy-armorMisc") {
        
                        baseHeavyArmor = baseHeavyArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "medium-armorMisc") {
        
                        baseMediumArmor = baseMediumArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "spearMisc") {
        
                        baseSpear = baseSpear - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "acrobaticsMisc") {
        
                        baseAcrobatics = baseAcrobatics - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "armorerMisc") {
        
                        baseArmorer = baseArmorer - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "axeMisc") {
        
                        baseAxe = baseAxe - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "blunt-weaponMisc") {
        
                        baseBluntWeapon = baseBluntWeapon - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "long-bladeMisc") {
        
                        baseLongBlade = baseLongBlade - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "blockMisc") {
        
                        baseBlock = baseBlock - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "light-armorMisc") {
        
                        baseLightArmor = baseLightArmor - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "marksmanMisc") {
        
                        baseMarksman = baseMarksman - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "sneakMisc") {
        
                        baseSneak = baseSneak - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "athleticsMisc") {
        
                        baseAthletics = baseAthletics - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "hand-to-handMisc") {
        
                        baseHandToHand = baseHandToHand - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "short-bladeMisc") {
        
                        baseShortBlade = baseShortBlade - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "unarmoredMisc") {
        
                        baseUnarmored = baseUnarmored - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "illusionMisc") {
        
                        baseIllusion = baseIllusion - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "mercantileMisc") {
        
                        baseMercantile = baseMercantile - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "speechcraftMisc") {
        
                        baseSpeechcraft = baseSpeechcraft - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "alchemyMisc") {
        
                        baseAlchemy = baseAlchemy - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "conjurationMisc") {
        
                        baseConjuration = baseConjuration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "enchantMisc") {
        
                        baseEnchant = baseEnchant - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "securityMisc") {
        
                        baseSecurity = baseSecurity - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "alterationMisc") {
        
                        baseAlteration = baseAlteration - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "destructionMisc") {
        
        
                        baseDestruction = baseDestruction - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "mysticismMisc") {
        
                        baseMysticism = baseMysticism - oldLocalArr[s];
        
                    } else if (splicedArr[s] === "restorationMisc") {
        
                        baseRestoration = baseRestoration - oldLocalArr[s];
        
                    }
        
        
        
        
                }
            }
        
        
            while (oldLocalArr.length) {
        
                oldLocalArr.shift();
        
            }
        
            while (splicedArr.length) {
        
                splicedArr.shift();
        
            }
        
        
        
        }
        
        
        
        
        //---Birthsign setter------------------------------------------------------    
        
        
        //purify birthsign resets birthsign effects for new selection of different birthsign 
        
        function PurifyBirthsign() {
        
            if (charVals.birthsign >= 1 && charVals.birthsign <= 13) { //removes any birthsign value currently set 
        
                if (warwyrd > 0) {
        
                    fortifyAttack = fortifyAttack - warwyrd; //warrior 
                    warwyrd = 0;
        
                }
        
                if (fay > 0) {
        
                    baseMagickaMultiplierBonus = baseMagickaMultiplierBonus - fay; //mage
                    fay = 0;
        
                }
        
                if (ladysGrace > 0) {
        
                    baseEndurance = (baseEndurance - ladysGrace); //the lady
                    basePersonality = (basePersonality - ladysFavour);
                    ladysGrace = 0;
                    ladysFavour = 0;
        
        
                }
        
                if (charioteer > 0) {
        
                    baseSpeed = baseSpeed - charioteer; //the steed
                    charioteer = 0;
        
                }
        
                if (elfbornMagicka > 0) {
        
                    //the apprentice
                    baseMagickaMultiplierBonus = baseMagickaMultiplierBonus - elfbornMagicka;
                    resistMagicka = resistMagicka + elfbornWeakness;
        
                    elfBornWeakness = 0;
                    elfbornMagicka = 0;
        
                }
        
                if (wombburn > 0) {
        
                    baseMagickaMultiplierBonus = baseMagickaMultiplierBonus - wombburn; //the antronach
                    wombburn = 0;
        
                }
        
                if (mooncalf > 0) {
        
                    baseAgility = baseAgility - mooncalf; //the lover
                    mooncalf = 0;
        
                }
        
        
                if (checkLoad === 0) {
                    UpdateCharValues();
                    CalcHealth();
                }
        
        
            }
        
        
        }
        
        
        
        //birthsign select functions 
        
        function TriggerWarriorBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 1; //sets birthsign values
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        
        function TriggerMageBirthsign(event) {
        
        
            event.preventDefault();
        
            charVals.birthsign = 2;
        
            RetrieveBirthsign();
        
        }
        
        
        
        
        function TriggerThiefBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 3;
        
            RetrieveBirthsign();
        
        }
        
        
        
        
        function TriggerSerpentBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 4;
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        
        function TriggerLadyBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 5;
        
            RetrieveBirthsign();
        
        }
        
        
        
        
        function TriggerSteedBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 6;
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        
        function TriggerLordBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 7;
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        
        function TriggerApprenticeBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 8;
        
            RetrieveBirthsign();
        
        }
        
        
        
        
        function TriggerAntronachBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 9;
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        
        function TriggerRitualBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 10;
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        
        function TriggerLoverBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 11;
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        
        function TriggerShadowBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 12;
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        
        function TriggerTowerBirthsign(event) {
        
            event.preventDefault();
        
            charVals.birthsign = 13;
        
            RetrieveBirthsign();
        
        
        }
        
        
        
        function RetrieveBirthsign() { //sets true birthsign values from birthsign selection 
        
        
            if (charVals.birthsign === 1) { //The Warrior Birthsign
        
                PurifyBirthsign();
        
                //PENDING FORTIFY ATTACK CALCULATIONS NEED TO WORK OUT ATTACK CALCULATION+VARIABLES FIRST 
        
                warwyrd = 10; //<--for fortify attack
        
                fortifyAttack = fortifyAttack + warwyrd;
        
                if (checkLoad === 0) {
        
                    ValueChangeDetected();
        
                }
        
        
        
            } else if (charVals.birthsign === 2) { //The Mage Birthsign
        
                PurifyBirthsign();
        
        
                fay = 0.5; //fortify max magicka by additional 0.5
        
                baseMagickaMultiplierBonus = baseMagickaMultiplierBonus + fay;
        
        
                if (checkLoad === 0) {
        
                    UpdateCharValues();
                    ValueChangeDetected();
        
                }
        
            } else if (charVals.birthsign === 3) { //The Thief Birthsign
        
                PurifyBirthsign();
                //PENDING SANCTUARY CALCULATIONS NEED TO WORK OUT SANCTUARY CALC+VARIABLES FIRST 
        
                if (checkLoad === 0) {
                    ValueChangeDetected();
                }
                //     let akaviriDangerSense = 10;                  //<-- TO BE ADDED ON TO SANCTUARY 
        
            } else if (charVals.birthsign === 4) { //The Serpent Birthsign
        
                PurifyBirthsign();
        
                if (checkLoad === 0) {
        
                    ValueChangeDetected();
        
                }
        
                //ONLY ADDS SPELL SO CURRENTLY REMOVE EFFECTS OF PREVIOUS SELECTION IF THIS IS SELECTED            
        
            } else if (charVals.birthsign === 5) { //The LadyBirthsign
        
                PurifyBirthsign();
        
        
                ladysGrace = 25; //fortify personality [LADYS GRACE]
                ladysFavour = 25; //fortidy endurance   [LADYS FAVOUR]
        
                baseEndurance = (baseEndurance + ladysGrace);
                basePersonality = (basePersonality + ladysFavour);
                //POSSIBLY CAN REMOVE THIS 
        
        
        
                //likely need to trigger calchealth() here
                if (checkLoad === 0) {
        
                    UpdateCharValues();
        
                    CalcHealth();
        
                    ValueChangeDetected();
        
                }
        
            } else if (charVals.birthsign === 6) { //The Steed Birthsign
        
                PurifyBirthsign();
        
        
                charioteer = 25; //increase speed attribute;
        
                baseSpeed = baseSpeed + charioteer;
        
                if (checkLoad === 0) {
        
                    UpdateCharValues();
        
                    ValueChangeDetected();
                }
        
        
        
            } else if (charVals.birthsign === 7) { //The Lord Birthsign
        
                PurifyBirthsign();
        
        
                //ADDS BLOODOFTHENORTH SPELL AND ABILITY 'TROLLKIN' WHICH ADDS A 100% WEAKNESS TO FIRE [UNSURE IF TO ADD YET] 
        
                if (checkLoad === 0) {
        
                    ValueChangeDetected();
        
                }
        
            } else if (charVals.birthsign === 8) { //The Apprentice Birthsign
        
                PurifyBirthsign();
        
        
                elfbornMagicka = 1.5;
        
                elfbornWeakness = 0.5;
        
                baseMagickaMultiplierBonus = baseMagickaMultiplierBonus + elfbornMagicka;
                resistMagicka = resistMagicka - elfbornWeakness; //current for elfbornWeakness 
        
                if (checkLoad === 0) {
                    UpdateCharValues();
        
                    ValueChangeDetected();
        
                }
        
            } else if (charVals.birthsign === 9) { //The Antronach Birthsign
        
        
        
        
                //antronach sign also includes 'spellabsorbtion 50%'' and 'stunted magicka' NEED TO DECIDE IF AND HOW TO INCLUDE 
                wombburn = 2.0;
                baseMagickaMultiplierBonus = baseMagickaMultiplierBonus + wombburn;
        
                if (checkLoad === 0) {
        
                    UpdateCharValues();
        
                    ValueChangeDetected();
        
                }
        
            } else if (charVals.birthsign === 10) { //The Ritual Birthsign
        
                PurifyBirthsign();
        
                if (checkLoad === 0) {
        
                    ValueChangeDetected();
        
                }
        
        
                //spell 'blessed word', 'blessed tower' and power 'maras gift' added LIKELY JUST MAKE THIS A RESET             
        
            } else if (charVals.birthsign === 11) { //The Lovers Birthsign
        
                PurifyBirthsign();
        
        
                //power 'lovers kiss'
        
                mooncalf = 25; //fortify agility 25 points
        
                baseAgility = baseAgility + mooncalf;
        
                if (checkLoad === 0) {
        
                    UpdateCharValues();
        
                    ValueChangeDetected();
        
                }
        
            } else if (charVals.birthsign === 12) { //The Shadow Birthsign
        
                PurifyBirthsign();
        
                if (checkLoad === 0) {
        
                    ValueChangeDetected();
        
                }
                //spell power 'moonshadow' added LIKELY JUST MAKE THIS A RESET             
        
            } else if (charVals.birthsign === 13) { //The Tower Birthsign 
        
                PurifyBirthsign();
                if (checkLoad === 0) {
        
                    ValueChangeDetected();
        
                }
        
                //spell power 'moonshadow' added LIKELY JUST MAKE THIS A RESET                    
        
            }
        
        
        
        }
        
        
        
        
        //------------------------------------------------------------------------------    
        
        //Races 
        let argonian = false;
        let breton = false;
        let darkElf = false;
        let highElf = false;
        let imperial = false;
        let khajiit = false;
        let nord = false;
        let orc = false;
        let redguard = false;
        let woodElf = false;
        
        //Gender 
        var male = false;
        var female = false;
        
        
        //GENDER SELECTION--------------------------------------------------------------
        
        
        
        function RetrieveGenderLOAD() { //for when save is loaded, sequence of execution for gender/race selection has to be initialised differently on load 
        
        
            if (charVals.gender === 0) {
        
                female = false;
                male = true;
                MaleSelectedLOAD();
        
            } else if (charVals.gender === 1) {
        
                male = false;
                female = true;
                FemaleSelectedLOAD();
        
            }
        
        }
        
        function MaleSelectedLOAD() {
        
            male = true; //sets gender for initial race selection
            female = false;
        
            if (argonian === true) { //checks for race selection 
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    //AlterClass();         <-- this is issue... why is it effecting Final Value 
                    ArgonianMaleBaseValues();
                    //GetClass();
        
        
        
                } else {
        
                    ArgonianMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (breton === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    BretonMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    BretonMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (darkElf === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    DarkElfMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    DarkElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (highElf === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    HighElfMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    HighElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (imperial === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    ImperialMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    ImperialMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (khajiit === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    KhajiitMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    KhajiitMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (nord === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    NordMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    NordMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (orc === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    OrcMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    OrcMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (redguard === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    RedguardMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    RedguardMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (woodElf === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    WoodElfMaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    WoodElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else {
                return;
            }
        
        
        
        
        }
        
        function FemaleSelectedLOAD() {
        
            male = false;
            female = true;
        
            if (argonian === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    ArgonianFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    ArgonianFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (breton === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    BretonFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    BretonFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (darkElf === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    DarkElfFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    DarkElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (highElf === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    HighElfFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    HighElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (imperial === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    ImperialFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    ImperialFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (khajiit === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    KhajiitFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    KhajiitFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (nord === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    NordFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    NordFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (orc === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    OrcFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    OrcFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (redguard === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    RedguardFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    RedguardFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (woodElf === true) {
        
                if (classSelect > 0 || checkLoad === 1) {
        
                    AlterClass();
                    WoodElfFemaleBaseValues();
                    //GetClass();
        
        
                } else {
        
                    WoodElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else {
                return;
            }
        
        
        
        
        }
        
        function RetrieveGender() { //possibly would need to tweak this for if seperate j/s with uploaded values or if UpdateCharValues() is called at initialise as this would let me simply set charVals.gender to 0
        
        
            if (charVals.gender === 0) {
        
                female = false;
                male = true;
                MaleSelected();
        
            } else if (charVals.gender === 1) {
        
                male = false;
                female = true;
                FemaleSelected();
        
            }
        
        }
        
        
        function MaleSelectedINITIALISE(event) {
        
            event.preventDefault();
        
            //charVals.gender = 0;
        
            male = true; //sets gender for initial race selection
            female = false;
        
            if (argonian === true) { //checks for race selection 
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ArgonianMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ArgonianMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (breton === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    BretonMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    BretonMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (darkElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    DarkElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    DarkElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (highElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    HighElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    HighElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (imperial === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ImperialMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ImperialMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (khajiit === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    KhajiitMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    KhajiitMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (nord === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    NordMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    NordMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (orc === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    OrcMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    OrcMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (redguard === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    RedguardMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    RedguardMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (woodElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    WoodElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    WoodElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else {
                return;
            }
        
        
        
        
        }
        
        function FemaleSelectedINITIALISE(event) {
        
            event.preventDefault();
        
            //charVals.gender = 1;
        
            male = false;
            female = true;
        
            if (argonian === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ArgonianFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ArgonianFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (breton === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    BretonFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    BretonFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (darkElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    DarkElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    DarkElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (highElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    HighElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    HighElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (imperial === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ImperialFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ImperialFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (khajiit === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    KhajiitFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    KhajiitFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (nord === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    NordFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    NordFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (orc === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    OrcFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    OrcFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (redguard === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    RedguardFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    RedguardFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (woodElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    WoodElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    WoodElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else {
                return;
            }
        
        
        
        }
        
        function MaleSelected() {
        
            //charVals.gender = 0;
        
            male = true; //sets gender for initial race selection
            female = false;
        
            if (argonian === true) { //checks for race selection 
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ArgonianMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ArgonianMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (breton === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    BretonMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    BretonMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (darkElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    DarkElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    DarkElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (highElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    DarkElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    DarkElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (imperial === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ImperialMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ImperialMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (khajiit === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    KhajiitMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    KhajiitMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (nord === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    NordMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    NordMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (orc === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    OrcMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    OrcMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (redguard === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    RedguardMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    RedguardMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (woodElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    WoodElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    WoodElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else {
                return;
            }
        
        
        
        
        }
        
        function FemaleSelected() {
        
            //charVals.gender = 1;
        
            male = false;
            female = true;
        
            if (argonian === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ArgonianFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ArgonianFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (breton === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    BretonFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    BretonFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (darkElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    DarkElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    DarkElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (highElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    HighElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    HighElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (imperial === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ImperialFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ImperialFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (khajiit === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    KhajiitFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    KhajiitFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (nord === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    NordFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    NordFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (orc === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    OrcFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    OrcFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (redguard === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    RedguardFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    RedguardFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else if (woodElf === true) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    WoodElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    WoodElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
        
            } else {
                return;
            }
        
        
        
        }
        
        //------------------------------------------------------------------------------
        
        //updates all character values 
        
        function UpdateCharValues() {
        
        
        
            //attributes
            charVals.strength = baseStrength + strengthAttributeInputFinal;
            charVals.intelligence = baseIntelligence + intelligenceAttributeInputFinal;
            charVals.willpower = baseWillpower + willpowerAttributeInputFinal;
            charVals.agility = baseAgility + agilityAttributeInputFinal;
            charVals.speed = baseSpeed + speedAttributeInputFinal;
            charVals.endurance = baseEndurance + enduranceAttributeInputFinal;
            charVals.personality = basePersonality + personalityAttributeInputFinal;
            charVals.luck = baseLuck + luckAttributeInputFinal;
        
            charVals.magickaMultiplierBonus = baseMagickaMultiplierBonus;
        
            //skills
            //endurance 
            charVals.heavyArmor = baseHeavyArmor + heavyArmorInputFinal;
            charVals.mediumArmor = baseMediumArmor + mediumArmorInputFinal;
            charVals.spear = baseSpear + spearInputFinal;
            //strength 
            charVals.acrobatics = baseAcrobatics + acrobaticsInputFinal;
            charVals.armorer = baseArmorer + armorerInputFinal;
            charVals.axe = baseAxe + axeInputFinal;
            charVals.bluntWeapon = baseBluntWeapon + bluntWeaponInputFinal;
            charVals.longBlade = baseLongBlade + longBladeInputFinal;
            //agility 
            charVals.block = baseBlock + blockInputFinal;
            charVals.lightArmor = baseLightArmor + lightArmorInputFinal;
            charVals.marksman = baseMarksman + marksmanInputFinal;
            charVals.sneak = baseSneak + sneakInputFinal;
            //speed 
            charVals.athletics = baseAthletics + athleticsInputFinal;
            charVals.handToHand = baseHandToHand + handToHandInputFinal;
            charVals.shortBlade = baseShortBlade + shortBladeInputFinal;
            charVals.unarmored = baseUnarmored + unarmoredInputFinal;
            //personality
            charVals.illusion = baseIllusion + illusionInputFinal;
            charVals.mercantile = baseMercantile + mercantileInputFinal;
            charVals.speechcraft = baseSpeechcraft + speechcraftInputFinal;
            //intelligence
            charVals.alchemy = baseAlchemy + alchemyInputFinal;
            charVals.conjuration = baseConjuration + conjurationInputFinal;
            charVals.enchant = baseEnchant + enchantInputFinal;
            charVals.xsecurity = baseSecurity + securityInputFinal; //was baseXsecurity
            //willpower
            charVals.alteration = baseAlteration + alterationInputFinal;
            charVals.destruction = baseDestruction + destructionInputFinal;
            charVals.mysticism = baseMysticism + mysticismInputFinal;
            charVals.restoration = baseRestoration + restorationInputFinal;
        
        
        
        }
        
        
        //RACE SELECTION--------------------------- 
        
        
        //sets race based on gender for use it assigning base values 
        
        function RetrieveRace() {
        
        
            if (charVals.race === 1) { //argonian
        
        
                argonian = true;
                breton = false; //sets all other potential race selections to false 
                darkElf = false;
                highElf = false;
                imperial = false;
                khajiit = false;
                nord = false;
                orc = false;
                redguard = false;
                woodElf = false;
        
            } else if (charVals.race === 2) { //breton
        
                argonian = false;
                breton = true;
                darkElf = false;
                highElf = false;
                imperial = false;
                khajiit = false;
                nord = false;
                orc = false;
                redguard = false;
                woodElf = false;
        
            } else if (charVals.race === 3) { //darkElf
        
                argonian = false;
                breton = false;
                darkElf = true;
                highElf = false;
                imperial = false;
                khajiit = false;
                nord = false;
                orc = false;
                redguard = false;
                woodElf = false;
        
        
            } else if (charVals.race === 4) { //highElf
        
                argonian = false;
                breton = false;
                darkElf = false;
                highElf = true;
                imperial = false;
                khajiit = false;
                nord = false;
                orc = false;
                redguard = false;
                woodElf = false;
        
            } else if (charVals.race === 5) { //imperial
        
                argonian = false;
                breton = false;
                darkElf = false;
                highElf = false;
                imperial = true;
                khajiit = false;
                nord = false;
                orc = false;
                redguard = false;
                woodElf = false;
        
            } else if (charVals.race === 6) { //khajiit
        
                argonian = false;
                breton = false;
                darkElf = false;
                highElf = false;
                imperial = false;
                khajiit = true;
                nord = false;
                orc = false;
                redguard = false;
                woodElf = false;
        
            } else if (charVals.race === 7) { //nord
        
                argonian = false;
                breton = false;
                darkElf = false;
                highElf = false;
                imperial = false;
                khajiit = false;
                nord = true;
                orc = false;
                redguard = false;
                woodElf = false;
        
            } else if (charVals.race === 8) { //orc
        
                argonian = false;
                breton = false;
                darkElf = false;
                highElf = false;
                imperial = false;
                khajiit = false;
                nord = false;
                orc = true;
                redguard = false;
                woodElf = false;
        
            } else if (charVals.race === 9) { //redguard
        
                argonian = false;
                breton = false;
                darkElf = false;
                highElf = false;
                imperial = false;
                khajiit = false;
                nord = false;
                orc = false;
                redguard = true;
                woodElf = false;
        
            } else if (charVals.race === 10) { //woodElf
        
                argonian = false;
                breton = false;
                darkElf = false;
                highElf = false;
                imperial = false;
                khajiit = false;
                nord = false;
                orc = false;
                redguard = false;
                woodElf = true;
        
            }
        
        }
        
        //sets all base values to 0 for reset 
        
        //set base values for races 
        
        //ARGONIAN RACE SELECT FUNCTIONS------------------------------------------------
        
        function ArgonianMaleBaseValues() {
        
        
        
            baseStrength = 40;
            baseIntelligence = 40;
            baseWillpower = 30;
            baseAgility = 50;
            baseSpeed = 50;
            baseEndurance = 30;
            basePersonality = 30;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 5;
            baseSpear = 5;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 15;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 5;
            baseIllusion = 5;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 5;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 5;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 100;
            charVals.resistCommonDisease = 75;
        
            charVals.gender = 0; //set to male 
        
        
        }
        
        function ArgonianFemaleBaseValues() {
        
        
            baseStrength = 40;
            baseIntelligence = 50;
            baseWillpower = 40;
            baseAgility = 40;
            baseSpeed = 40;
            baseEndurance = 30;
            basePersonality = 30;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 5;
            baseSpear = 5;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 15;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 5;
            baseIllusion = 5;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 5;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 5;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 100;
            charVals.resistCommonDisease = 75;
        
        
            charVals.gender = 1; //set to female                 
        
        
        
        }
        
        function ArgonianSelected(event) {
        
            event.preventDefault();
        
            argonian = true; //sets race selection to true
        
            breton = false; //sets all other potential race selections to false 
            darkElf = false;
            highElf = false;
            imperial = false;
            khajiit = false;
            nord = false;
            orc = false;
            redguard = false;
            woodElf = false;
        
            charVals.race = 1;
        
        
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ArgonianMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ArgonianMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ArgonianFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ArgonianFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change 
        
        
        
        }
        
        //BRETON RACE SELECT FUNCTIONS--------------------------------------------------
        
        function BretonMaleBaseValues() {
        
        
            baseStrength = 40;
            baseIntelligence = 50;
            baseWillpower = 50;
            baseAgility = 30;
            baseSpeed = 30;
            baseEndurance = 30;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.5;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 5;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 5;
            baseConjuration = 10;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 5;
            baseDestruction = 0;
            baseMysticism = 10;
            baseRestoration = 10;
        
            charVals.resistMagicka = 50;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
        
            charVals.gender = 0;
        
        
        
        
        }
        
        function BretonFemaleBaseValues() {
        
        
            baseStrength = 30;
            baseIntelligence = 50;
            baseWillpower = 50;
            baseAgility = 30;
            baseSpeed = 40;
            baseEndurance = 30;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.5;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 5;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 5;
            baseConjuration = 10;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 5;
            baseDestruction = 0;
            baseMysticism = 10;
            baseRestoration = 10;
        
            charVals.resistMagicka = 50;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 1;
        
        
        
        }
        
        
        
        function BretonSelected(event) {
        
            event.preventDefault();
        
            breton = true;
        
            argonian = false;
            darkElf = false;
            highElf = false;
            imperial = false;
            khajiit = false;
            nord = false;
            orc = false;
            redguard = false;
            woodElf = false;
        
        
            charVals.race = 2;
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    BretonMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    BretonMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    BretonFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    BretonFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change 
        
        }
        
        //DARK-ELF RACE SELECT FUNCTIONS------------------------------------------------
        
        function DarkElfMaleBaseValues() {
        
        
            baseStrength = 40;
            baseIntelligence = 40;
            baseWillpower = 30;
            baseAgility = 40;
            baseSpeed = 50;
            baseEndurance = 40;
            basePersonality = 30;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 5;
            baseBlock = 0;
            baseLightArmor = 5;
            baseMarksman = 5;
            baseSneak = 0;
            baseAthletics = 5;
            baseHandToHand = 0;
            baseShortBlade = 10;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 10;
            baseMysticism = 5;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 75;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 0;
        
        
        
        }
        
        
        function DarkElfFemaleBaseValues() {
        
            baseStrength = 40;
            baseIntelligence = 40;
            baseWillpower = 30;
            baseAgility = 40;
            baseSpeed = 50;
            baseEndurance = 30;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 5;
            baseBlock = 0;
            baseLightArmor = 5;
            baseMarksman = 5;
            baseSneak = 0;
            baseAthletics = 5;
            baseHandToHand = 0;
            baseShortBlade = 10;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 10;
            baseMysticism = 5;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 75;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
            charVals.gender = 1;
        
        
        }
        
        
        function DarkElfSelected(event) {
        
            event.preventDefault();
        
            darkElf = true;
        
            argonian = false;
            breton = false;
            highElf = false;
            imperial = false;
            khajiit = false;
            nord = false;
            orc = false;
            redguard = false;
            woodElf = false;
        
        
            charVals.race = 3;
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    DarkElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    DarkElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    DarkElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    DarkElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change         
        
        }
        
        //HIGH-ELF RACE SELECT FUNCTIONS------------------------------------------------
        
        function HighElfMaleBaseValues() {
        
        
            baseStrength = 30;
            baseIntelligence = 50;
            baseWillpower = 40;
            baseAgility = 40;
            baseSpeed = 30;
            baseEndurance = 40;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 1.5;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 5;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 10;
            baseConjuration = 5;
            baseEnchant = 10;
            baseSecurity = 0;
            baseAlteration = 5;
            baseDestruction = 10;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = -50;
            charVals.resistFire = -50;
            charVals.resistFrost = -25;
            charVals.resistShock = -25;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 75;
        
            charVals.gender = 0;
        
        
        
        }
        
        function HighElfFemaleBaseValues() {
        
        
            baseStrength = 30;
            baseIntelligence = 50;
            baseWillpower = 40;
            baseAgility = 40;
            baseSpeed = 40;
            baseEndurance = 30;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 1.5;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 5;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 10;
            baseConjuration = 5;
            baseEnchant = 10;
            baseSecurity = 0;
            baseAlteration = 5;
            baseDestruction = 10;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = -50;
            charVals.resistFire = -50;
            charVals.resistFrost = -25;
            charVals.resistShock = -25;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 75;
        
            charVals.gender = 1;
        
        
        }
        
        
        function HighElfSelected(event) {
        
            event.preventDefault();
        
            highElf = true;
        
            argonian = false;
            breton = false;
            darkElf = false;
            imperial = false;
            khajiit = false;
            nord = false;
            orc = false;
            redguard = false;
            woodElf = false;
        
        
            charVals.race = 4;
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    HighElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    HighElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    HighElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    HighElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change         
        
        
        }
        
        //IMPERIAL RACE SELECT FUNCTIONS------------------------------------------------
        
        function ImperialMaleBaseValues() {
        
            baseStrength = 40;
            baseIntelligence = 40;
            baseWillpower = 30;
            baseAgility = 30;
            baseSpeed = 40;
            baseEndurance = 40;
            basePersonality = 50;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 5;
            baseLongBlade = 10;
            baseBlock = 0;
            baseLightArmor = 5;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 5;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 10;
            baseSpeechcraft = 10;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 0;
        
        
        }
        
        function ImperialFemaleBaseValues() {
        
        
            baseIntelligence = 40;
            baseWillpower = 40;
            baseAgility = 30;
            baseSpeed = 30;
            baseEndurance = 40;
            basePersonality = 50;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 5;
            baseLongBlade = 10;
            baseBlock = 0;
            baseLightArmor = 5;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 5;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 10;
            baseSpeechcraft = 10;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 1;
        
        
        }
        
        function ImperialSelected(event) {
        
            event.preventDefault();
        
            imperial = true;
        
            argonian = false;
            breton = false;
            darkElf = false;
            highElf = false;
            khajiit = false;
            nord = false;
            orc = false;
            redguard = false;
            woodElf = false;
        
            charVals.race = 5;
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ImperialMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ImperialMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    ImperialFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    ImperialFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change         
        
        }
        
        //KHAJIIT RACE SELECT FUNCTIONS-------------------------------------------------
        
        function KhajiitMaleBaseValues() {
        
            baseStrength = 40;
            baseIntelligence = 40;
            baseWillpower = 30;
            baseAgility = 50;
            baseSpeed = 40;
            baseEndurance = 30;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 15;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 5;
            baseMarksman = 0;
            baseSneak = 5;
            baseAthletics = 5;
            baseHandToHand = 5;
            baseShortBlade = 5;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 5;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 0;
        
        }
        
        function KhajiitFemaleBaseValues() {
        
        
            baseStrength = 30;
            baseIntelligence = 40;
            baseWillpower = 30;
            baseAgility = 50;
            baseSpeed = 40;
            baseEndurance = 40;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 15;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 5;
            baseMarksman = 0;
            baseSneak = 5;
            baseAthletics = 5;
            baseHandToHand = 5;
            baseShortBlade = 5;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 5;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 1;
        
        }
        
        function KhajiitSelected(event) {
        
            event.preventDefault();
        
            khajiit = true;
        
            argonian = false;
            breton = false;
            darkElf = false;
            highElf = false;
            imperial = false;
            nord = false;
            orc = false;
            redguard = false;
            woodElf = false;
        
            charVals.race = 6;
        
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    KhajiitMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    KhajiitMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    KhajiitFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    KhajiitFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change         
        
        }
        
        //NORD RACE SELECT FUNCTIONS----------------------------------------------------
        
        
        function NordMaleBaseValues() {
        
        
            baseStrength = 50;
            baseIntelligence = 30;
            baseWillpower = 40;
            baseAgility = 30;
            baseSpeed = 40;
            baseEndurance = 50;
            basePersonality = 30;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 5;
            baseMediumArmor = 10;
            baseSpear = 5;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 10;
            baseBluntWeapon = 10;
            baseLongBlade = 5;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 100;
            charVals.resistShock = 50;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 0;
        
        
        
        
        }
        
        function NordFemaleBaseValues() {
        
        
        
            baseStrength = 50;
            baseIntelligence = 30;
            baseWillpower = 50;
            baseAgility = 30;
            baseSpeed = 40;
            baseEndurance = 40;
            basePersonality = 30;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 5;
            baseMediumArmor = 10;
            baseSpear = 5;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 10;
            baseBluntWeapon = 10;
            baseLongBlade = 5;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 100;
            charVals.resistShock = 50;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 1;
        
        
        
        }
        
        function NordSelected(event) {
        
            event.preventDefault();
        
            nord = true;
        
            argonian = false;
            breton = false;
            darkElf = false;
            highElf = false;
            imperial = false;
            khajiit = false;
            orc = false;
            redguard = false;
            woodElf = false;
        
        
            charVals.race = 7;
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    NordMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    NordMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    NordFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    NordFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change         
        
        }
        
        //ORC RACE SELECT FUNCTIONS-----------------------------------------------------
        
        function OrcMaleBaseValues() {
        
            baseStrength = 45;
            baseIntelligence = 30;
            baseWillpower = 50;
            baseAgility = 35;
            baseSpeed = 30;
            baseEndurance = 50;
            basePersonality = 30;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 10;
            baseMediumArmor = 10;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 10;
            baseAxe = 5;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 10;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 25;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 0;
        
        
        }
        
        function OrcFemaleBaseValues() {
        
        
        
            baseStrength = 45;
            baseIntelligence = 40;
            baseWillpower = 45;
            baseAgility = 35;
            baseSpeed = 30;
            baseEndurance = 50;
            basePersonality = 25;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 10;
            baseMediumArmor = 10;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 10;
            baseAxe = 5;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 10;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 25;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 0;
        
            charVals.gender = 1;
        
        
        }
        
        function OrcSelected(event) {
        
            event.preventDefault();
        
            orc = true;
        
            argonian = false;
            breton = false;
            darkElf = false;
            highElf = false;
            imperial = false;
            khajiit = false;
            nord = false;
            redguard = false;
            woodElf = false;
        
        
            charVals.race = 8;
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    OrcMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    OrcMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    OrcFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    OrcFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change         
        
        }
        
        //REDGUARD RACE SELECT FUNCTIONS------------------------------------------------
        
        function RedguardMaleBaseValues() {
        
            baseStrength = 50;
            baseIntelligence = 30;
            baseWillpower = 30;
            baseAgility = 40;
            baseSpeed = 40;
            baseEndurance = 50;
            basePersonality = 30;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 5;
            baseMediumArmor = 5;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 5;
            baseBluntWeapon = 5;
            baseLongBlade = 15;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 5;
            baseHandToHand = 0;
            baseShortBlade = 5;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 75;
            charVals.resistCommonDisease = 75;
        
            charVals.gender = 0;
        
        
        
        }
        
        function RedguardFemaleBaseValues() {
        
        
            baseStrength = 40;
            baseIntelligence = 30;
            baseWillpower = 30;
            baseAgility = 40;
            baseSpeed = 40;
            baseEndurance = 50;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 5;
            baseMediumArmor = 5;
            baseSpear = 0;
            baseAcrobatics = 0;
            baseArmorer = 0;
            baseAxe = 5;
            baseBluntWeapon = 5;
            baseLongBlade = 15;
            baseBlock = 0;
            baseLightArmor = 0;
            baseMarksman = 0;
            baseSneak = 0;
            baseAthletics = 5;
            baseHandToHand = 0;
            baseShortBlade = 5;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 0;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 75;
            charVals.resistCommonDisease = 75;
        
            charVals.gender = 1;
        
        
        }
        
        function RedguardSelected(event) {
        
            event.preventDefault();
        
            redguard = true;
        
            argonian = false;
            breton = false;
            darkElf = false;
            highElf = false;
            imperial = false;
            khajiit = false;
            nord = false;
            orc = false;
            woodElf = false;
        
            charVals.race = 9;
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    RedguardMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    RedguardMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    RedguardFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    RedguardFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change         
        
        }
        
        //WOOD-ELF RACE SELECT FUNCTIONS------------------------------------------------
        
        function WoodElfMaleBaseValues() {
        
            baseStrength = 30;
            baseIntelligence = 40;
            baseWillpower = 30;
            baseAgility = 50;
            baseSpeed = 50;
            baseEndurance = 30;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 5;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 10;
            baseMarksman = 15;
            baseSneak = 10;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 5;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 75;
        
            charVals.gender = 0;
        
        
        }
        
        function WoodElfFemaleBaseValues() {
        
        
            baseStrength = 30;
            baseIntelligence = 40;
            baseWillpower = 30;
            baseAgility = 50;
            baseSpeed = 50;
            baseEndurance = 30;
            basePersonality = 40;
            baseLuck = 40;
        
            baseMagickaMultiplierBonus = 0.0;
        
            baseHeavyArmor = 0;
            baseMediumArmor = 0;
            baseSpear = 0;
            baseAcrobatics = 5;
            baseArmorer = 0;
            baseAxe = 0;
            baseBluntWeapon = 0;
            baseLongBlade = 0;
            baseBlock = 0;
            baseLightArmor = 10;
            baseMarksman = 15;
            baseSneak = 10;
            baseAthletics = 0;
            baseHandToHand = 0;
            baseShortBlade = 0;
            baseUnarmored = 0;
            baseIllusion = 0;
            baseMercantile = 0;
            baseSpeechcraft = 0;
            baseAlchemy = 5;
            baseConjuration = 0;
            baseEnchant = 0;
            baseSecurity = 0;
            baseAlteration = 0;
            baseDestruction = 0;
            baseMysticism = 0;
            baseRestoration = 0;
        
            charVals.resistMagicka = 0;
            charVals.resistFire = 0;
            charVals.resistFrost = 0;
            charVals.resistShock = 0;
            charVals.resistPoison = 0;
            charVals.resistCommonDisease = 75;
        
            charVals.gender = 1;
        
        
        }
        
        function WoodElfSelected(event) {
        
            event.preventDefault();
        
            woodElf = true;
        
            argonian = false;
            breton = false;
            darkElf = false;
            highElf = false;
            imperial = false;
            khajiit = false;
            nord = false;
            orc = false;
            redguard = false;
        
            charVals.race = 10;
        
        
            if (male === true && female === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    WoodElfMaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    WoodElfMaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else if (female === true && male === false) {
        
                if (classSelect > 0) {
        
                    AlterClass();
                    WoodElfFemaleBaseValues();
                    GetClass();
                    UpdateCharValues();
                    ValueChangeDetected();
        
                } else {
        
                    WoodElfFemaleBaseValues(); //retrieves base value for races gender 
                    UpdateCharValues(); //updates character values 
                    ValueChangeDetected(); //subject to change  
        
        
                }
        
            } else {
                throw "gender not selected";
            }
        
            UpdateCharValues();
            ValueChangeDetected(); //subject to change 
        
        }
        
        //---ATTRIBUTE/SKILL INPUT------------------------------------------------------
        //-----ENDURANCE----------------------------------------------------------------        
        
        //Endurance attribute input and minor skills [heavy-armor, medium-armor, spear]-    
        
        //set form inputs to variables
        
        
        let enduranceAttributeInputFinal = 0;
        let oldEnduranceAttributeInputFinal = 0;
        
        
        
        
        let heavyArmorInputFinal = 0;
        let oldHeavyArmorInputFinal = 0;
        
        
        
        let mediumArmorInputFinal = 0;
        let oldMediumArmorInputFinal = 0;
        
        
        
        let spearInputFinal = 0;
        let oldSpearInputFinal = 0;
        
        
        
        
        //idea behind this is that if user input is below base value for governing attribute
        //then will set to base attribute, if changed to lower base attribute will change to this lower 
        //base attribute however if user input is === or greater than higher gov. attribute then change will
        //not occur if new race is selected with lower base attribute value as is assumed that user does not want
        //to revert to base value 
        
        
        function EnduranceUserInput() {
        
            enduranceAttributeInput = document.querySelector("#attribute-endurance");
            let enduranceTextContent = document.querySelector("#endurance-content");
        
            oldEnduranceAttributeInputFinal = enduranceAttributeInputFinal; //set oldEnduranceAttributeInputFinal for use in a check if user changed while on base value  
        
        
            if ((oldBaseEndurance === baseEndurance || oldBaseEndurance === 0) && (enduranceAttributeInput.value >= baseEndurance)) { //check base = previous base and if value more than base or equal (attribute value can not go below its base value)
        
        
                enduranceAttributeInputFinal = (enduranceAttributeInput.value - baseEndurance); //remove base from input as base is added on in CharValuesUpdate();
                UpdateCharValues();
        
                enduranceAttributeInput.value = charVals.endurance; //set as correct amount
        
                enduranceTextContent.textContent = "value is " + charVals.endurance;
        
        
            } else if (oldBaseEndurance === baseEndurance && enduranceAttributeInput.value < baseEndurance) { //if base values are equal(base value hasnt been changed) and value less than base
        
        
                enduranceAttributeInput.value = baseEndurance; //set value as base
                enduranceAttributeInputFinal = (enduranceAttributeInput.value - baseEndurance); //this will set to 0 so UpdateCharValues() will have 0 user input 
                UpdateCharValues();
                oldEnduranceAttributeInputFinal = enduranceAttributeInputFinal; //registers oldEnduranceInputFinal as 0 so if later call occurs when base values have changed knows to 
                //change value to new base value if no further user input occurs 
                enduranceTextContent.textContent = "value must be above " + baseEndurance;
        
            } else if (baseEndurance !== oldBaseEndurance && enduranceAttributeInput.value >= baseEndurance) { //if base value has been changed and input is more than or equal to base 
        
                if (oldEnduranceAttributeInputFinal === 0) { //if no user input has occured 
        
                    oldBaseEndurance = baseEndurance; //set to base and updated as base value
                    enduranceAttributeInput.value = baseEndurance;
                    enduranceAttributeFinalValue = (enduranceAttributeInput.value - baseEndurance);
                    UpdateCharValues();
        
                    enduranceTextContent.textContent = "value must be above " + baseEndurance;
        
        
                } else if (oldEnduranceAttributeInputFinal > 0) { //when user input has occurred 
        
                    var baseDifferenceEndurance = (oldBaseEndurance - baseEndurance); //detectes differnce between base values 
        
                    enduranceAttributeInputFinal = ((enduranceAttributeInput.value - oldBaseEndurance) + baseDifferenceEndurance); //difference is added on to make final value reflect correct input with changed base value 
                    UpdateCharValues();
        
                    enduranceAttributeInput.value = charVals.endurance;
        
                    enduranceTextContent.textContent = "value is " + charVals.endurance;
        
                }
        
            } else if (baseEndurance !== oldBaseEndurance && enduranceAttributeInput.value < baseEndurance) { //if base has been changed and input less than base, sets values to base and inputFinal to 0 
        
                oldBaseEndurance = baseEndurance;
                enduranceAttributeInput.value = baseEndurance;
                enduranceAttributeInputFinal = (enduranceAttributeInput.value - baseEndurance);
                UpdateCharValues();
        
                enduranceTextContent.textContent = "value is " + baseEndurance;
        
            }
        
        }
        
        
        
        function HeavyArmorUserInput() {
        
            heavyArmorSkillInput = document.querySelector("#skill-heavy-armor");
            let heavyArmorTextContent = document.querySelector("#heavy-armor-content");
        
            oldHeavyArmorInputFinal = heavyArmorInputFinal;
        
            if ((oldBaseHeavyArmor === baseHeavyArmor || oldBaseHeavyArmor === 0) && (heavyArmorSkillInput.value >= baseHeavyArmor)) {
        
        
                if (heavyArmorSkillInput.value >= 100) {
        
                    oldBaseHeavyArmor = baseHeavyArmor;
                    heavyArmorSkillInput.value = 100;
                    heavyArmorInputFinal = (100 - baseHeavyArmor);
                    UpdateCharValues();
        
                    heavyArmorTextContent.textContent = "value can not be above " + 100;
        
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        heavyArmorInputFinal = heavyArmorInputFinal;
        
                        UpdateCharValues();
        
                        heavyArmorSkillInput.value = charVals.heavyArmor;
        
                        heavyArmorTextContent.textContent = "value is " + charVals.heavyArmor;
        
        
        
                    } else {
        
                        heavyArmorInputFinal = (heavyArmorSkillInput.value - baseHeavyArmor);
                        UpdateCharValues();
        
                        heavyArmorSkillInput.value = charVals.heavyArmor;
        
                        heavyArmorTextContent.textContent = "value is " + charVals.heavyArmor;
        
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseHeavyArmor === baseHeavyArmor && heavyArmorSkillInput.value < baseHeavyArmor) {
        
                heavyArmorSkillInput.value = baseHeavyArmor;
                heavyArmorInputFinal = (heavyArmorSkillInput.value - baseHeavyArmor);
                UpdateCharValues();
                oldHeavyArmorInputFinal = heavyArmorInputFinal;
        
                heavyArmorTextContent.textContent = "value must be above " + baseHeavyArmor;
        
        
        
            } else if (baseHeavyArmor !== oldBaseHeavyArmor && heavyArmorSkillInput.value >= baseHeavyArmor) {
        
        
                if (oldHeavyArmorInputFinal === 0) {
        
                    if (heavyArmorSkillInput.value >= 100) {
        
                        oldBaseHeavyArmor = baseHeavyArmor;
                        heavyArmorSkillInput.value = 100;
        
                        UpdateCharValues();
        
                        heavyArmorTextContent.textContent = "value is " + 100;
        
        
        
        
                    } else {
        
                        oldBaseHeavyArmor = baseHeavyArmor; //possibly not 
                        heavyArmorSkillInput.value = baseHeavyArmor;
                        heavyArmorInputFinal = (heavyArmorSkillInput.value - baseHeavyArmor);
                        UpdateCharValues();
        
                        heavyArmorTextContent.textContent = "value is " + charVals.heavyArmor;
        
        
                    }
        
                } else if (oldHeavyArmorInputFinal > 0) {
        
                    if (heavyArmorSkillInput.value >= 100) {
        
                        oldBaseHeavyArmor = baseHeavyArmor;
                        heavyArmorSkillInput.value = 100;
                        heavyArmorInputFinal = (100 - baseHeavyArmor);
                        UpdateCharValues();
        
                        heavyArmorTextContent.textContent = "value can not be above " + 100;
        
        
                    } else {
        
                        var baseDifferenceHeavyArmor = (oldBaseHeavyArmor - baseHeavyArmor);
        
                        heavyArmorInputFinal = ((heavyArmorSkillInput.value - oldBaseHeavyArmor) + baseDifferenceHeavyArmor);
                        UpdateCharValues();
        
                        heavyArmorSkillInput.value = charVals.heavyArmor;
        
                        heavyArmorTextContent.textContent = "value is " + charVals.heavyArmor;
        
        
                    }
                }
        
            } else if (baseHeavyArmor !== oldBaseHeavyArmor && heavyArmorSkillInput.value < baseHeavyArmor) {
        
                oldBaseHeavyArmor = baseHeavyArmor; //possibly not 
                heavyArmorSkillInput.value = baseHeavyArmor;
                heavyArmorInputFinal = (heavyArmorSkillInput.value - baseHeavyArmor);
                UpdateCharValues();
                heavyArmorInputFinal = 0;
        
                heavyArmorTextContent.textContent = "value is " + charVals.heavyArmor;
        
        
            }
        }
        
        
        function MediumArmorUserInput() {
        
            mediumArmorSkillInput = document.querySelector("#skill-medium-armor");
            let mediumArmorTextContent = document.querySelector("#medium-armor-content");
        
            oldMediumArmorInputFinal = mediumArmorInputFinal;
        
            if ((oldBaseMediumArmor === baseMediumArmor || oldBaseMediumArmor === 0) && (mediumArmorSkillInput.value >= baseMediumArmor)) {
        
        
                if (mediumArmorSkillInput.value >= 100) {
        
                    oldBaseMediumArmor = baseMediumArmor;
                    mediumArmorSkillInput.value = 100;
                    mediumArmorInputFinal = (100 - baseMediumArmor);
                    UpdateCharValues();
        
                    mediumArmorTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        mediumArmorInputFinal = mediumArmorInputFinal;
        
                        UpdateCharValues();
        
                        mediumArmorSkillInput.value = charVals.mediumArmor;
        
                        mediumArmorTextContent.textContent = "value is " + charVals.mediumArmor;
        
        
        
                    } else {
        
                        mediumArmorInputFinal = (mediumArmorSkillInput.value - baseMediumArmor);
                        UpdateCharValues();
        
                        mediumArmorSkillInput.value = charVals.mediumArmor;
        
                        mediumArmorTextContent.textContent = "value is " + charVals.mediumArmor;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseMediumArmor === baseMediumArmor && mediumArmorSkillInput.value < baseMediumArmor) {
        
                mediumArmorSkillInput.value = baseMediumArmor;
                mediumArmorInputFinal = (mediumArmorSkillInput.value - baseMediumArmor);
                UpdateCharValues();
                oldMediumArmorInputFinal = mediumArmorInputFinal;
        
                mediumArmorTextContent.textContent = "value must be above " + baseMediumArmor;
        
        
            } else if (baseMediumArmor !== oldBaseMediumArmor && mediumArmorSkillInput.value >= baseMediumArmor) {
        
        
                if (oldMediumArmorInputFinal === 0) {
        
                    if (mediumArmorSkillInput.value >= 100) {
        
                        oldBaseMediumArmor = baseMediumArmor;
                        mediumArmorSkillInput.value = 100;
        
                        UpdateCharValues();
        
                        mediumArmorTextContent.textContent = "value is " + charVals.mediumArmor;
        
        
        
                    } else {
        
                        oldBaseMediumArmor = baseMediumArmor; //possibly not 
                        mediumArmorSkillInput.value = baseMediumArmor;
                        mediumArmorInputFinal = (mediumArmorSkillInput.value - baseMediumArmor);
                        UpdateCharValues();
        
                        mediumArmorTextContent.textContent = "value is " + charVals.mediumArmor;
        
                    }
        
                } else if (oldMediumArmorInputFinal > 0) {
        
                    if (mediumArmorSkillInput.value >= 100) {
        
                        oldBaseMediumArmor = baseMediumArmor;
                        mediumArmorSkillInput.value = 100;
                        mediumArmorInputFinal = (100 - baseMediumArmor);
                        UpdateCharValues();
        
                        mediumArmorTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceMediumArmor = (oldBaseMediumArmor - baseMediumArmor);
        
                        mediumArmorInputFinal = ((mediumArmorSkillInput.value - oldBaseMediumArmor) + baseDifferenceMediumArmor);
                        UpdateCharValues();
        
                        mediumArmorSkillInput.value = charVals.mediumArmor;
        
                        mediumArmorTextContent.textContent = "value is " + charVals.mediumArmor;
        
                    }
                }
        
            } else if (baseMediumArmor !== oldBaseMediumArmor && mediumArmorSkillInput.value < baseMediumArmor) {
        
                oldBaseMediumArmor = baseMediumArmor; //possibly not 
                mediumArmorSkillInput.value = baseMediumArmor;
                mediumArmorInputFinal = (mediumArmorSkillInput.value - baseMediumArmor);
                UpdateCharValues();
                mediumArmorInputFinal = 0;
        
                mediumArmorTextContent.textContent = "value is " + charVals.mediumArmor;
        
        
            }
        }
        
        
        function SpearUserInput() {
        
            spearSkillInput = document.querySelector("#skill-spear");
            let spearTextContent = document.querySelector("#spear-content");
        
            oldSpearInputFinal = spearInputFinal;
        
            if ((oldBaseSpear === baseSpear || oldBaseSpear === 0) && (spearSkillInput.value >= baseSpear)) {
        
        
                if (spearSkillInput.value >= 100) {
        
                    oldBaseSpear = baseSpear;
                    spearSkillInput.value = 100;
                    spearInputFinal = (100 - baseSpear);
                    UpdateCharValues();
        
                    spearTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        spearInputFinal = spearInputFinal;
        
                        UpdateCharValues();
        
                        spearSkillInput.value = charVals.spear;
        
                        spearTextContent.textContent = "value is " + charVals.spear;
        
        
        
                    } else {
        
                        spearInputFinal = (spearSkillInput.value - baseSpear);
                        UpdateCharValues();
        
                        spearSkillInput.value = charVals.spear;
        
                        spearTextContent.textContent = "value is " + charVals.spear;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseSpear === baseSpear && spearSkillInput.value < baseSpear) {
        
                spearSkillInput.value = baseSpear;
                spearInputFinal = (spearSkillInput.value - baseSpear);
                UpdateCharValues();
                oldSpearInputFinal = spearInputFinal;
        
                spearTextContent.textContent = "value must be above " + baseSpear;
        
        
            } else if (baseSpear !== oldBaseSpear && spearSkillInput.value >= baseSpear) {
        
        
                if (oldSpearInputFinal === 0) {
        
                    if (spearSkillInput.value >= 100) {
        
                        oldBaseSpear = baseSpear;
                        spearSkillInput.value = 100;
                        spearInputFinal = 0;
                        UpdateCharValues();
        
                        spearTextContent.textContent = "value is " + charVals.spear;
        
        
        
                    } else {
        
                        oldBaseSpear = baseSpear; //possibly not 
                        spearSkillInput.value = baseSpear;
                        spearInputFinal = (spearSkillInput.value - baseSpear);
                        UpdateCharValues();
        
                        spearTextContent.textContent = "value is " + charVals.spear;
        
                    }
        
                } else if (oldSpearInputFinal > 0) {
        
                    if (spearSkillInput.value >= 100) {
        
                        oldBaseSpear = baseSpear;
                        spearSkillInput.value = 100;
                        spearInputFinal = (100 - baseSpear);
                        UpdateCharValues();
        
                        spearTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceSpear = (oldBaseSpear - baseSpear);
        
                        spearInputFinal = ((spearSkillInput.value - oldBaseSpear) + baseDifferenceSpear);
                        UpdateCharValues();
        
                        spearSkillInput.value = charVals.spear;
        
                        spearTextContent.textContent = "value is " + charVals.spear;
        
                    }
                }
        
            } else if (baseSpear !== oldBaseSpear && spearSkillInput.value < baseSpear) {
        
                oldBaseSpear = baseSpear; //possibly not 
                spearSkillInput.value = baseSpear;
                spearInputFinal = (spearSkillInput.value - baseSpear);
                UpdateCharValues();
                spearInputFinal = 0;
        
                spearTextContent.textContent = "value is " + charVals.spear;
        
        
            }
        }
        //------------------------------------------------------------------------------``
        //-----STRENGTH----------------------------------------------------------------        
        
        //Strength attribute input and minor skills [acrobatics, armorer, axe, bluntWeapon and longBlade]-    
        
        //set form inputs to variables
        
        
        let strengthAttributeInputFinal = 0;
        let oldStrengthAttributeInputFinal = 0;
        
        
        
        let acrobaticsInputFinal = 0;
        let oldAcrobaticsInputFinal = 0;
        
        
        
        let armorerInputFinal = 0;
        let oldArmorerInputFinal = 0;
        
        
        
        let axeInputFinal = 0;
        let oldAxeInputFinal = 0;
        
        
        
        let bluntWeaponInputFinal = 0;
        let oldBluntWeaponInputFinal = 0;
        
        
        
        let longBladeInputFinal = 0;
        let oldLongBladeInputFinal = 0;
        
        
        
        
        //for setting textcontent of p id to final value of user inputted data 
        
        
        
        
        function StrengthUserInput() {
        
            strengthAttributeInput = document.querySelector("#attribute-strength");
            let strengthTextContent = document.querySelector("#strength-content");
        
            oldStrengthAttributeInputFinal = strengthAttributeInputFinal;
        
        
            if ((oldBaseStrength === baseStrength || oldBaseStrength === 0) && (strengthAttributeInput.value >= baseStrength)) { //check base = previous base and if value more than base or equal (attribute value can not go below its base value)
        
        
                strengthAttributeInputFinal = (strengthAttributeInput.value - baseStrength); //remove base from input as base is added on in CharValuesUpdate();
                UpdateCharValues();
        
                strengthAttributeInput.value = charVals.strength; //set as correct amount
        
                strengthTextContent.textContent = "value is " + charVals.strength;
        
        
            } else if (oldBaseStrength === baseStrength && strengthAttributeInput.value < baseStrength) { //if base values are equal(base value hasnt been changed) and value less than base
        
        
                strengthAttributeInput.value = baseStrength; //set value as base
                strengthAttributeInputFinal = (strengthAttributeInput.value - baseStrength); //this will set to 0 so UpdateCharValues() will have 0 user input 
                UpdateCharValues();
                oldStrengthAttributeInputFinal = strengthAttributeInputFinal; //registers oldEnduranceInputFinal as 0 so if later call occurs when base values have changed knows to 
                //change value to new base value if no further user input occurs 
                strengthTextContent.textContent = "value must be above " + baseStrength;
        
            } else if (baseStrength !== oldBaseStrength && strengthAttributeInput.value >= baseStrength) { //if base value has been changed and input is more than or equal to base 
        
                if (oldStrengthAttributeInputFinal === 0) { //if no user input has occured 
        
                    oldBaseStrength = baseStrength; //set to base and updated as base value
                    strengthAttributeInput.value = baseStrength;
                    strengthAttributeInputFinal = (strengthAttributeInput.value - baseStrength);
                    UpdateCharValues();
        
                    strengthTextContent.textContent = "value must be above " + baseStrength;
        
        
                } else if (oldStrengthAttributeInputFinal > 0) { //when user input has occurred 
        
                    var baseDifferenceStrength = (oldBaseStrength - baseStrength); //detectes differnce between base values 
        
                    strengthAttributeInputFinal = ((strengthAttributeInput.value - oldBaseStrength) + baseDifferenceStrength); //difference is added on to make final value reflect correct input with changed base value 
                    UpdateCharValues();
        
                    strengthAttributeInput.value = charVals.strength;
        
                    strengthTextContent.textContent = "value is " + charVals.strength;
        
                }
        
            } else if (baseStrength !== oldBaseStrength && strengthAttributeInput.value < baseStrength) { //if base has been changed and input less than base, sets values to base and inputFinal to 0 
        
                oldBaseStrength = baseStrength;
                strengthAttributeInput.value = baseStrength;
                strengthAttributeInputFinal = (strengthAttributeInput.value - baseStrength);
                UpdateCharValues();
        
                strengthTextContent.textContent = "value is " + baseStrength;
        
            }
        
        }
        
        
        
        function AcrobaticsUserInput() {
        
            acrobaticsSkillInput = document.querySelector("#skill-acrobatics");
            let acrobaticsTextContent = document.querySelector("#acrobatics-content");
        
            oldAcrobaticsInputFinal = acrobaticsInputFinal;
        
            if ((oldBaseAcrobatics === baseAcrobatics || oldBaseAcrobatics === 0) && (acrobaticsSkillInput.value >= baseAcrobatics)) {
        
        
                if (acrobaticsSkillInput.value >= 100) {
        
                    oldBaseAcrobatics = baseAcrobatics;
                    acrobaticsSkillInput.value = 100;
                    acrobaticsInputFinal = (100 - baseAcrobatics);
                    UpdateCharValues();
        
                    acrobaticsTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        acrobaticsInputFinal = acrobaticsInputFinal;
        
                        UpdateCharValues();
        
                        acrobaticsSkillInput.value = charVals.acrobatics;
        
                        acrobaticsTextContent.textContent = "value is " + charVals.acrobatics;
        
        
        
                    } else {
        
                        acrobaticsInputFinal = (acrobaticsSkillInput.value - baseAcrobatics);
                        UpdateCharValues();
        
                        acrobaticsSkillInput.value = charVals.acrobatics;
        
                        acrobaticsTextContent.textContent = "value is " + charVals.acrobatics;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseAcrobatics === baseAcrobatics && acrobaticsSkillInput.value < baseAcrobatics) {
        
                acrobaticsSkillInput.value = baseAcrobatics;
                acrobaticsInputFinal = (acrobaticsSkillInput.value - baseAcrobatics);
                UpdateCharValues();
                oldAcrobaticsInputFinal = acrobaticsInputFinal;
        
                acrobaticsTextContent.textContent = "value must be above " + baseAcrobatics;
        
        
            } else if (baseAcrobatics !== oldBaseAcrobatics && acrobaticsSkillInput.value >= baseAcrobatics) {
        
        
                if (oldAcrobaticsInputFinal === 0) {
        
                    if (acrobaticsSkillInput.value >= 100) {
        
                        oldBaseAcrobatics = baseAcrobatics;
                        acrobaticsSkillInput.value = 100;
        
                        UpdateCharValues();
        
                        acrobaticsTextContent.textContent = "value is " + charVals.acrobatics;
        
        
        
                    } else {
        
                        oldBaseAcrobatics = baseAcrobatics; //possibly not 
                        acrobaticsSkillInput.value = baseAcrobatics;
                        acrobaticsInputFinal = (acrobaticsSkillInput.value - baseAcrobatics);
                        UpdateCharValues();
        
                        acrobaticsTextContent.textContent = "value is " + charVals.acrobatics;
        
                    }
        
                } else if (oldAcrobaticsInputFinal > 0) {
        
                    if (acrobaticsSkillInput.value >= 100) {
        
                        oldBaseAcrobatics = baseAcrobatics;
                        acrobaticsSkillInput.value = 100;
                        acrobaticsInputFinal = (100 - baseAcrobatics);
                        UpdateCharValues();
        
                        acrobaticsTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceAcrobatics = (oldBaseAcrobatics - baseAcrobatics);
        
                        acrobaticsInputFinal = ((acrobaticsSkillInput.value - oldBaseAcrobatics) + baseDifferenceAcrobatics);
                        UpdateCharValues();
        
                        acrobaticsSkillInput.value = charVals.acrobatics;
        
                        acrobaticsTextContent.textContent = "value is " + charVals.acrobatics;
        
                    }
                }
        
            } else if (baseAcrobatics !== oldBaseAcrobatics && acrobaticsSkillInput.value < baseAcrobatics) {
        
                oldBaseAcrobatics = baseAcrobatics; //possibly not 
                acrobaticsSkillInput.value = baseAcrobatics;
                acrobaticsInputFinal = (acrobaticsSkillInput.value - baseAcrobatics);
                UpdateCharValues();
                acrobaticsInputFinal = 0;
        
                acrobaticsTextContent.textContent = "value is " + charVals.acrobatics;
        
        
            }
        }
        
        function ArmorerUserInput() {
        
            armorerSkillInput = document.querySelector("#skill-armorer");
            let armorerTextContent = document.querySelector("#armorer-content");
        
        
            oldArmorerInputFinal = armorerInputFinal;
        
            if ((oldBaseArmorer === baseArmorer || oldBaseArmorer === 0) && (armorerSkillInput.value >= baseArmorer)) {
        
        
                if (armorerSkillInput.value >= 100) {
        
                    oldBaseArmorer = baseArmorer;
                    armorerSkillInput.value = 100;
                    armorerInputFinal = (100 - baseArmorer);
                    UpdateCharValues();
        
                    armorerTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        armorerInputFinal = armorerInputFinal;
        
                        UpdateCharValues();
        
                        armorerSkillInput.value = charVals.armorer;
        
                        armorerTextContent.textContent = "value is " + charVals.armorer;
        
        
        
                    } else {
        
                        armorerInputFinal = (armorerSkillInput.value - baseArmorer);
                        UpdateCharValues();
        
                        armorerSkillInput.value = charVals.armorer;
        
                        armorerTextContent.textContent = "value is " + charVals.armorer;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseArmorer === baseArmorer && armorerSkillInput.value < baseArmorer) {
        
                armorerSkillInput.value = baseArmorer;
                armorerInputFinal = (armorerSkillInput.value - baseArmorer);
                UpdateCharValues();
                oldArmorerInputFinal = armorerInputFinal;
        
                armorerTextContent.textContent = "value must be above " + baseArmorer;
        
        
            } else if (baseArmorer !== oldBaseArmorer && armorerSkillInput.value >= baseArmorer) {
        
        
                if (oldArmorerInputFinal === 0) {
        
                    if (armorerSkillInput.value >= 100) {
        
                        oldBaseArmorer = baseArmorer;
                        armorerSkillInput.value = 100;
        
                        UpdateCharValues();
        
                        armorerTextContent.textContent = "value is " + charVals.armorer;
        
        
        
                    } else {
        
                        oldBaseArmorer = baseArmorer; //possibly not 
                        armorerSkillInput.value = baseArmorer;
                        armorerInputFinal = (armorerSkillInput.value - baseArmorer);
                        UpdateCharValues();
        
                        armorerTextContent.textContent = "value is " + charVals.armorer;
        
                    }
        
                } else if (oldArmorerInputFinal > 0) {
        
                    if (armorerSkillInput.value >= 100) {
        
                        oldBaseArmorer = baseArmorer;
                        armorerSkillInput.value = 100;
                        armorerInputFinal = (100 - baseArmorer);
                        UpdateCharValues();
        
                        armorerTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceArmorer = (oldBaseArmorer - baseArmorer);
        
                        acrobaticsInputFinal = ((armorerSkillInput.value - oldBaseArmorer) + baseDifferenceArmorer);
                        UpdateCharValues();
        
                        armorerSkillInput.value = charVals.armorer;
        
                        armorerTextContent.textContent = "value is " + charVals.armorer;
        
                    }
                }
        
            } else if (baseArmorer !== oldBaseArmorer && armorerSkillInput.value < baseArmorer) {
        
                oldBaseArmorer = baseArmorer; //possibly not 
                armorerSkillInput.value = baseArmorer;
                armorerInputFinal = (armorerSkillInput.value - baseArmorer);
                UpdateCharValues();
                armorerInputFinal = 0;
        
                armorerTextContent.textContent = "value is " + charVals.armorer;
        
        
            }
        }
        
        
        function AxeUserInput() {
        
            axeSkillInput = document.querySelector("#skill-axe");
            let axeTextContent = document.querySelector("#axe-content");
        
            oldAxeInputFinal = axeInputFinal;
        
            if ((oldBaseAxe === baseAxe || oldBaseAxe === 0) && (axeSkillInput.value >= baseAxe)) {
        
        
                if (axeSkillInput.value >= 100) {
        
                    oldBaseAxe = baseAxe;
                    axeSkillInput.value = 100;
                    axeInputFinal = (100 - baseAxe);
                    UpdateCharValues();
        
                    axeTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        axeInputFinal = axeInputFinal;
        
                        UpdateCharValues();
        
                        axeSkillInput.value = charVals.axe;
        
                        axeTextContent.textContent = "value is " + charVals.axe;
        
        
        
                    } else {
        
                        axeInputFinal = (axeSkillInput.value - baseAxe);
                        UpdateCharValues();
        
                        axeSkillInput.value = charVals.axe;
        
                        axeTextContent.textContent = "value is " + charVals.axe;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseAxe === baseAxe && axeSkillInput.value < baseAxe) {
        
                axeSkillInput.value = baseAxe;
                axeInputFinal = (axeSkillInput.value - baseAxe);
                UpdateCharValues();
                oldAxeInputFinal = axeInputFinal;
        
                axeTextContent.textContent = "value must be above " + baseAxe;
        
        
            } else if (baseAxe !== oldBaseAxe && axeSkillInput.value >= baseAxe) {
        
        
                if (oldAxeInputFinal === 0) {
        
                    if (axeSkillInput.value >= 100) {
        
                        oldBaseAxe = baseAxe;
                        axeSkillInput.value = 100;
        
                        UpdateCharValues();
        
                        axeTextContent.textContent = "value is " + charVals.axe;
        
        
        
                    } else {
        
                        oldBaseAxe = baseAxe; //possibly not 
                        axeSkillInput.value = baseAxe;
                        axeInputFinal = (axeSkillInput.value - baseAxe);
                        UpdateCharValues();
        
                        axeTextContent.textContent = "value is " + charVals.axe;
        
                    }
        
                } else if (oldAxeInputFinal > 0) {
        
                    if (axeSkillInput.value >= 100) {
        
                        oldBaseAxe = baseAxe;
                        axeSkillInput.value = 100;
                        axeInputFinal = (100 - baseAxe);
                        UpdateCharValues();
        
                        axeTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceAxe = (oldBaseAxe - baseAxe);
        
                        axeInputFinal = ((axeSkillInput.value - oldBaseAxe) + baseDifferenceAxe);
                        UpdateCharValues();
        
                        axeSkillInput.value = charVals.axe;
        
                        axeTextContent.textContent = "value is " + charVals.axe;
        
                    }
                }
        
            } else if (baseAxe !== oldBaseAxe && axeSkillInput.value < baseAxe) {
        
                oldBaseAxe = baseAxe; //possibly not 
                axeSkillInput.value = baseAxe;
                axeInputFinal = (axeSkillInput.value - baseAxe);
                UpdateCharValues();
                axeInputFinal = 0;
        
                axeTextContent.textContent = "value is " + charVals.axe;
        
        
            }
        }
        
        
        function BluntWeaponUserInput() {
        
            bluntWeaponSkillInput = document.querySelector("#skill-blunt-weapon");
            let bluntWeaponTextContent = document.querySelector("#blunt-weapon-content");
        
            oldBluntWeaponInputFinal = bluntWeaponInputFinal;
        
            if ((oldBaseBluntWeapon === baseBluntWeapon || oldBaseBluntWeapon === 0) && (bluntWeaponSkillInput.value >= baseBluntWeapon)) {
        
        
                if (bluntWeaponSkillInput.value >= 100) {
        
                    oldBaseBluntWeapon = baseBluntWeapon;
                    bluntWeaponSkillInput.value = 100;
                    bluntWeaponInputFinal = (100 - baseBluntWeapon);
                    UpdateCharValues();
        
                    bluntWeaponTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        bluntWeaponInputFinal = bluntWeaponInputFinal;
        
                        UpdateCharValues();
        
                        bluntWeaponSkillInput.value = charVals.bluntWeapon;
        
                        bluntWeaponTextContent.textContent = "value is " + charVals.bluntWeapon;
        
        
        
                    } else {
        
                        bluntWeaponInputFinal = (bluntWeaponSkillInput.value - baseBluntWeapon);
                        UpdateCharValues();
        
                        bluntWeaponSkillInput.value = charVals.bluntWeapon;
        
                        bluntWeaponTextContent.textContent = "value is " + charVals.bluntWeapon;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseBluntWeapon === baseBluntWeapon && bluntWeaponSkillInput.value < baseBluntWeapon) {
        
                bluntWeaponSkillInput.value = baseBluntWeapon;
                bluntWeaponInputFinal = (bluntWeaponSkillInput.value - baseBluntWeapon);
                UpdateCharValues();
                oldBluntWeaponInputFinal = bluntWeaponInputFinal;
        
                bluntWeaponTextContent.textContent = "value must be above " + baseBluntWeapon;
        
        
            } else if (baseBluntWeapon !== oldBaseBluntWeapon && bluntWeaponSkillInput.value >= baseBluntWeapon) {
        
        
                if (oldBluntWeaponInputFinal === 0) {
        
                    if (bluntWeaponSkillInput.value >= 100) {
        
                        oldBaseBluntWeapon = baseBluntWeapon;
                        bluntWeaponSkillInput.value = 100;
        
                        UpdateCharValues();
        
                        bluntWeaponTextContent.textContent = "value is " + charVals.bluntWeapon;
        
        
                    } else {
        
                        oldBaseBluntWeapon = baseBluntWeapon; //possibly not 
                        bluntWeaponSkillInput.value = baseBluntWeapon;
                        bluntWeapnInputFinal = (bluntWeaponSkillInput.value - baseBluntWeapon);
                        UpdateCharValues();
        
                        bluntWeaponTextContent.textContent = "value is " + charVals.bluntWeapon;
        
                    }
        
                } else if (oldBluntWeaponInputFinal > 0) {
        
                    if (bluntWeaponSkillInput.value >= 100) {
        
                        oldBaseBluntWeapon = baseBluntWeapon;
                        bluntWeaponSkillInput.value = 100;
                        bluntWeaponInputFinal = (100 - baseBluntWeapon);
                        UpdateCharValues();
        
                        bluntWeaponTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceBluntWeapon = (oldBaseBluntWeapon - baseBluntWeapon);
        
                        bluntWeaponInputFinal = ((bluntWeaponSkillInput.value - oldBaseBluntWeapon) + baseDifferenceBluntWeapon);
                        UpdateCharValues();
        
                        bluntWeaponSkillInput.value = charVals.bluntWeapon;
        
                        bluntWeaponTextContent.textContent = "value is " + charVals.bluntWeapon;
        
                    }
                }
        
            } else if (baseBluntWeapon !== oldBaseBluntWeapon && bluntWeaponSkillInput.value < baseBluntWeapon) {
        
                oldBaseBluntWeapon = baseBluntWeapon; //possibly not 
                bluntWeaponSkillInput.value = baseBluntWeapon;
                bluntWeaponInputFinal = (bluntWeaponSkillInput.value - baseBluntWeapon);
                UpdateCharValues();
                bluntWeaponInputFinal = 0;
        
                bluntWeaponTextContent.textContent = "value is " + charVals.bluntWeapon;
        
        
            }
        }
        
        function LongBladeUserInput() {
        
            longBladeSkillInput = document.querySelector("#skill-long-blade");
            let longBladeTextContent = document.querySelector("#long-blade-content");
        
            oldLongBladeInputFinal = longBladeInputFinal;
        
            if ((oldBaseLongBlade === baseLongBlade || oldBaseLongBlade === 0) && (longBladeSkillInput.value >= baseLongBlade)) {
        
        
                if (longBladeSkillInput.value >= 100) {
        
                    oldBaseLongBlade = baseLongBlade;
                    longBladeSkillInput.value = 100;
                    longBladeInputFinal = (100 - baseLongBlade);
                    UpdateCharValues();
        
                    longBladeTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        longBladeInputFinal = longBladeInputFinal;
        
                        UpdateCharValues();
        
                        longBladeSkillInput.value = charVals.longBlade;
        
                        longBladeTextContent.textContent = "value is " + charVals.longBlade;
        
        
        
                    } else {
        
                        longBladeInputFinal = (longBladeSkillInput.value - baseLongBlade);
                        UpdateCharValues();
        
                        longBladeSkillInput.value = charVals.longBlade;
        
                        longBladeTextContent.textContent = "value is " + charVals.longBlade;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseLongBlade === baseLongBlade && longBladeSkillInput.value < baseLongBlade) {
        
                longBladeSkillInput.value = baseLongBlade;
                longBladeInputFinal = (longBladeSkillInput.value - baseLongBlade);
                UpdateCharValues();
                oldLongBladeInputFinal = longBladeInputFinal;
        
                longBladeTextContent.textContent = "value must be above " + baseLongBlade;
        
        
            } else if (baseLongBlade !== oldBaseLongBlade && longBladeSkillInput.value >= baseLongBlade) {
        
        
                if (oldLongBladeInputFinal === 0) {
        
                    if (longBladeSkillInput.value >= 100) {
        
                        oldBaseLongBlade = baseLongBlade;
                        longBladeSkillInput.value = 100;
                        UpdateCharValues();
        
                        longBladeTextContent.textContent = "value is " + charVals.longBlade;
        
        
        
                    } else {
        
                        oldBaseLongBlade = baseLongBlade; //possibly not 
                        longBladeSkillInput.value = baseLongBlade;
                        longBladeInputFinal = (longBladeSkillInput.value - baseLongBlade);
                        UpdateCharValues();
        
                        longBladeTextContent.textContent = "value is " + charVals.longBlade;
        
                    }
        
                } else if (oldLongBladeInputFinal > 0) {
        
                    if (longBladeSkillInput.value >= 100) {
        
                        oldBaseLongBlade = baseLongBlade;
                        longBladeSkillInput.value = 100;
                        longBladeInputFinal = (100 - baseLongBlade);
                        UpdateCharValues();
        
                        longBladeTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceLongBlade = (oldBaseLongBlade - baseLongBlade);
        
                        longBladeInputFinal = ((longBladeSkillInput.value - oldBaseLongBlade) + baseDifferenceLongBlade);
                        UpdateCharValues();
        
                        longBladeSkillInput.value = charVals.longBlade;
        
                        longBladeTextContent.textContent = "value is " + charVals.longBlade;
        
                    }
                }
        
            } else if (baseLongBlade !== oldBaseLongBlade && longBladeSkillInput.value < baseLongBlade) {
        
                oldBaseLongBlade = baseLongBlade; //possibly not 
                longBladeSkillInput.value = baseLongBlade;
                longBladeInputFinal = (longBladeSkillInput.value - baseLongBlade);
                UpdateCharValues();
                longBladeInputFinal = 0;
        
                longBladeTextContent.textContent = "value is " + charVals.longBlade;
        
        
            }
        }
        
        //------------------------------------------------------------------------------``
        //-----INTELLIGENCE----------------------------------------------------------------        
        
        //Intelligence attribute input and minor skills [alchemy, conjuration, enchant, security]-    
        
        //set form inputs to variables
        
        
        let intelligenceAttributeInputFinal = 0;
        let oldIntelligenceAttributeInputFinal = 0;
        
        
        
        
        let alchemyInputFinal = 0;
        let oldAlchemyInputFinal = 0;
        
        
        
        let conjurationInputFinal = 0;
        let oldConjurationInputFinal = 0;
        
        
        
        let enchantInputFinal = 0;
        let oldEnchantInputFinal = 0;
        
        
        
        let securityInputFinal = 0;
        let oldSecurityInputFinal = 0;
        
        
        
        
        //for setting textcontent of p id to final value of user inputted data 
        
        
        
        
        function IntelligenceUserInput() {
        
            intelligenceAttributeInput = document.querySelector("#attribute-intelligence");
            let intelligenceTextContent = document.querySelector("#intelligence-content");
        
            oldIntelligenceAttributeInputFinal = intelligenceAttributeInputFinal;
        
        
            if ((oldBaseIntelligence === baseIntelligence || oldBaseIntelligence === 0) && (intelligenceAttributeInput.value >= baseIntelligence)) { //check base = previous base and if value more than base or equal (attribute value can not go below its base value)
        
        
                intelligenceAttributeInputFinal = (intelligenceAttributeInput.value - baseIntelligence); //remove base from input as base is added on in CharValuesUpdate();
                UpdateCharValues();
        
                intelligenceAttributeInput.value = charVals.intelligence; //set as correct amount
        
                intelligenceTextContent.textContent = "value is " + charVals.intelligence;
        
        
            } else if (oldBaseIntelligence === baseIntelligence && intelligenceAttributeInput.value < baseIntelligence) { //if base values are equal(base value hasnt been changed) and value less than base
        
        
                intelligenceAttributeInput.value = baseIntelligence; //set value as base
                intelligenceAttributeInputFinal = (intelligenceAttributeInput.value - baseIntelligence); //this will set to 0 so UpdateCharValues() will have 0 user input 
                UpdateCharValues();
                oldIntelligenceAttributeInputFinal = intelligenceAttributeInputFinal; //registers oldEnduranceInputFinal as 0 so if later call occurs when base values have changed knows to 
                //change value to new base value if no further user input occurs 
                intelligenceTextContent.textContent = "value must be above " + baseIntelligence;
        
            } else if (baseIntelligence !== oldBaseIntelligence && intelligenceAttributeInput.value >= baseIntelligence) { //if base value has been changed and input is more than or equal to base 
        
                if (oldIntelligenceAttributeInputFinal === 0) { //if no user input has occured 
        
                    oldBaseIntelligence = baseIntelligence; //set to base and updated as base value
                    intelligenceAttributeInput.value = baseIntelligence;
                    intelligenceAttributeFinalValue = (intelligenceAttributeInput.value - baseIntelligence);
                    UpdateCharValues();
        
                    intelligenceTextContent.textContent = "value must be above " + baseIntelligence;
        
        
                } else if (oldIntelligenceAttributeInputFinal > 0) { //when user input has occurred 
        
                    var baseDifferenceIntelligence = (oldBaseIntelligence - baseIntelligence); //detectes differnce between base values 
        
                    intelligenceAttributeInputFinal = ((intelligenceAttributeInput.value - oldBaseIntelligence) + baseDifferenceIntelligence); //difference is added on to make final value reflect correct input with changed base value 
                    UpdateCharValues();
        
                    intelligenceAttributeInput.value = charVals.intelligence;
        
                    intelligenceTextContent.textContent = "value is " + charVals.intelligence;
        
                }
        
            } else if (baseIntelligence !== oldBaseIntelligence && intelligenceAttributeInput.value < baseIntelligence) { //if base has been changed and input less than base, sets values to base and inputFinal to 0 
        
                oldBaseIntelligence = baseIntelligence;
                intelligenceAttributeInput.value = baseIntelligence;
                intelligenceAttributeInputFinal = (intelligenceAttributeInput.value - baseIntelligence);
                UpdateCharValues();
        
                intelligenceTextContent.textContent = "value is " + baseIntelligence;
        
            }
        
        }
        
        
        
        function AlchemyUserInput() {
        
            alchemySkillInput = document.querySelector("#skill-alchemy");
            let alchemyTextContent = document.querySelector("#alchemy-content");
        
            oldAlchemyInputFinal = alchemyInputFinal;
        
            if ((oldBaseAlchemy === baseAlchemy || oldBaseAlchemy === 0) && (alchemySkillInput.value >= baseAlchemy)) {
        
        
                if (alchemySkillInput.value >= 100) {
        
                    oldBaseAlchemy = baseAlchemy;
                    alchemySkillInput.value = 100;
                    alchemyInputFinal = (100 - baseAlchemy);
                    UpdateCharValues();
        
                    alchemyTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        alchemyInputFinal = alchemyInputFinal;
        
                        UpdateCharValues();
        
                        alchemySkillInput.value = charVals.alchemy;
        
                        alchemyTextContent.textContent = "value is " + charVals.alchemy;
        
        
        
                    } else {
        
                        alchemyInputFinal = (alchemySkillInput.value - baseAlchemy);
                        UpdateCharValues();
        
                        alchemySkillInput.value = charVals.alchemy;
        
                        alchemyTextContent.textContent = "value is " + charVals.alchemy;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseAlchemy === baseAlchemy && alchemySkillInput.value < baseAlchemy) {
        
                alchemySkillInput.value = baseAlchemy;
                alchemyInputFinal = (alchemySkillInput.value - baseAlchemy);
                UpdateCharValues();
                oldAlchemyInputFinal = alchemyInputFinal;
        
                alchemyTextContent.textContent = "value must be above " + baseAlchemy;
        
        
            } else if (baseAlchemy !== oldBaseAlchemy && alchemySkillInput.value >= baseAlchemy) {
        
        
                if (oldAlchemyInputFinal === 0) {
        
                    if (alchemySkillInput.value >= 100) {
        
                        oldBaseAlchemy = baseAlchemy;
                        alchemySkillInput.value = 100;
                        UpdateCharValues();
        
                        alchemyTextContent.textContent = "value is " + charVals.alchemy;
        
        
        
                    } else {
        
                        oldBaseAlchemy = baseAlchemy; //possibly not 
                        alchemySkillInput.value = baseAlchemy;
                        alchemyInputFinal = (alchemySkillInput.value - baseAlchemy);
                        UpdateCharValues();
        
                        alchemyTextContent.textContent = "value is " + charVals.alchemy;
        
                    }
        
                } else if (oldAlchemyInputFinal > 0) {
        
                    if (alchemySkillInput.value >= 100) {
        
                        oldBaseAlchemy = baseAlchemy;
                        alchemySkillInput.value = 100;
                        alchemyInputFinal = (100 - baseAlchemy);
                        UpdateCharValues();
        
                        alchemyTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceAlchemy = (oldBaseAlchemy - baseAlchemy);
        
                        alchemyInputFinal = ((alchemySkillInput.value - oldBaseAlchemy) + baseDifferenceAlchemy);
                        UpdateCharValues();
        
                        alchemySkillInput.value = charVals.alchemy;
        
                        alchemyTextContent.textContent = "value is " + charVals.alchermy;
        
                    }
                }
        
            } else if (baseAlchemy !== oldBaseAlchemy && alchemySkillInput.value < baseAlchemy) {
        
                oldBaseAlchemy = baseAlchemy; //possibly not 
                alchemySkillInput.value = baseAlchemy;
                alchemyInputFinal = (alchemySkillInput.value - baseAlchemy);
                UpdateCharValues();
                alchemyInputFinal = 0;
        
                alchemyTextContent.textContent = "value is " + charVals.alchemy;
        
        
            }
        }
        
        function ConjurationUserInput() {
        
            conjurationSkillInput = document.querySelector("#skill-conjuration");
            let conjurationTextContent = document.querySelector("#conjuration-content");
        
        
            oldConjurationInputFinal = conjurationInputFinal;
        
            if ((oldBaseConjuration === baseConjuration || oldBaseConjuration === 0) && (conjurationSkillInput.value >= baseConjuration)) {
        
        
                if (conjurationSkillInput.value >= 100) {
        
                    oldBaseConjuration = baseConjuration;
                    conjurationSkillInput.value = 100;
                    conjurationInputFinal = (100 - baseConjuration);
                    UpdateCharValues();
        
                    conjurationTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        conjurationInputFinal = conjurationInputFinal;
        
                        UpdateCharValues();
        
                        conjurationSkillInput.value = charVals.conjuration;
        
                        conjurationTextContent.textContent = "value is " + charVals.conjuration;
        
        
        
                    } else {
        
                        conjurationInputFinal = (conjurationSkillInput.value - baseConjuration);
                        UpdateCharValues();
        
                        conjurationSkillInput.value = charVals.conjuration;
        
                        conjurationTextContent.textContent = "value is " + charVals.conjuration;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseConjuration === baseConjuration && conjurationSkillInput.value < baseConjuration) {
        
                conjurationSkillInput.value = baseConjuration;
                conjurationInputFinal = (conjurationSkillInput.value - baseConjuration);
                UpdateCharValues();
                oldConjurationInputFinal = conjurationInputFinal;
        
                conjurationTextContent.textContent = "value must be above " + baseConjuration;
        
        
            } else if (baseConjuration !== oldBaseConjuration && conjurationSkillInput.value >= baseConjuration) {
        
        
                if (oldConjurationInputFinal === 0) {
        
                    if (conjurationSkillInput.value >= 100) {
        
                        oldBaseConjuration = baseConjuration;
                        conjurationSkillInput.value = 100;
                        UpdateCharValues();
        
                        conjurationTextContent.textContent = "value is " + charVals.conjuration;
        
        
                    } else {
        
                        oldBaseConjuration = baseConjuration; //possibly not 
                        conjurationSkillInput.value = baseConjuration;
                        conjurationInputFinal = (conjurationSkillInput.value - baseConjuration);
                        UpdateCharValues();
        
                        conjurationTextContent.textContent = "value is " + charVals.conjuration;
        
                    }
        
                } else if (oldConjurationInputFinal > 0) {
        
                    if (conjurationSkillInput.value >= 100) {
        
                        oldBaseConjuration = baseConjuration;
                        conjurationSkillInput.value = 100;
                        conjurationInputFinal = (100 - baseConjuration);
                        UpdateCharValues();
        
                        conjurationTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceConjuration = (oldBaseConjuration - baseConjuration);
        
                        conjurationInputFinal = ((conjurationSkillInput.value - oldBaseConjuration) + baseDifferenceConjuration);
                        UpdateCharValues();
        
                        conjurationSkillInput.value = charVals.conjuration;
        
                        conjurationTextContent.textContent = "value is " + charVals.conjuration;
        
                    }
                }
        
            } else if (baseConjuration !== oldBaseConjuration && conjurationSkillInput.value < baseConjuration) {
        
                oldBaseConjuration = baseConjuration; //possibly not 
                conjurationSkillInput.value = baseConjuration;
                conjurationInputFinal = (conjurationSkillInput.value - baseConjuration);
                UpdateCharValues();
                conjurationInputFinal = 0;
        
                conjurationTextContent.textContent = "value is " + charVals.conjuration;
        
        
            }
        }
        
        
        function EnchantUserInput() {
        
            enchantSkillInput = document.querySelector("#skill-enchant");
            let enchantTextContent = document.querySelector("#enchant-content");
        
            oldEnchantInputFinal = enchantInputFinal;
        
            if ((oldBaseEnchant === baseEnchant || oldBaseEnchant === 0) && (enchantSkillInput.value >= baseEnchant)) {
        
        
                if (enchantSkillInput.value >= 100) {
        
                    oldBaseEnchant = baseEnchant;
                    enchantSkillInput.value = 100;
                    enchantInputFinal = (100 - baseEnchant);
                    UpdateCharValues();
        
                    enchantTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        enchantInputFinal = enchantInputFinal;
        
                        UpdateCharValues();
        
                        enchantSkillInput.value = charVals.enchant;
        
                        enchantTextContent.textContent = "value is " + charVals.enchant;
        
        
        
                    } else {
        
                        enchantInputFinal = (enchantSkillInput.value - baseEnchant);
                        UpdateCharValues();
        
                        enchantSkillInput.value = charVals.enchant;
        
                        enchantTextContent.textContent = "value is " + charVals.enchant;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseEnchant === baseEnchant && enchantSkillInput.value < baseEnchant) {
        
                enchantSkillInput.value = baseEnchant;
                enchantInputFinal = (enchantSkillInput.value - baseEnchant);
                UpdateCharValues();
                oldEnchantInputFinal = enchantInputFinal;
        
                enchantTextContent.textContent = "value must be above " + baseEnchant;
        
        
            } else if (baseEnchant !== oldBaseEnchant && enchantSkillInput.value >= baseEnchant) {
        
        
                if (oldEnchantInputFinal === 0) {
        
                    if (enchantSkillInput.value >= 100) {
        
                        oldBaseEnchant = baseEnchant;
                        enchantSkillInput.value = 100;
                        UpdateCharValues();
        
                        enchantTextContent.textContent = "value is " + charVals.enchant;
        
        
        
                    } else {
        
                        oldBaseEnchant = baseEnchant; //possibly not 
                        enchantSkillInput.value = baseEnchant;
                        enchantInputFinal = (enchantSkillInput.value - baseEnchant);
                        UpdateCharValues();
        
                        enchantTextContent.textContent = "value is " + charVals.enchant;
        
                    }
        
                } else if (oldEnchantInputFinal > 0) {
        
                    if (enchantSkillInput.value >= 100) {
        
                        oldBaseEnchant = baseEnchant;
                        enchantSkillInput.value = 100;
                        enchantInputFinal = (100 - baseEnchant);
                        UpdateCharValues();
        
                        enchantTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceEnchant = (oldBaseEnchant - baseEnchant);
        
                        enchantInputFinal = ((enchantSkillInput.value - oldBaseEnchant) + baseDifferenceEnchant);
                        UpdateCharValues();
        
                        enchantSkillInput.value = charVals.enchant;
        
                        enchantTextContent.textContent = "value is " + charVals.enchant;
        
                    }
                }
        
            } else if (baseEnchant !== oldBaseEnchant && enchantSkillInput.value < baseEnchant) {
        
                oldBaseEnchant = baseEnchant; //possibly not 
                enchantSkillInput.value = baseEnchant;
                enchantInputFinal = (enchantSkillInput.value - baseEnchant);
                UpdateCharValues();
                enchantInputFinal = 0;
        
                enchantTextContent.textContent = "value is " + charVals.enchant;
        
        
            }
        }
        
        function SecurityUserInput() {
        
            securitySkillInput = document.querySelector("#skill-security");
            let securityTextContent = document.querySelector("#security-content");
        
            oldSecurityInputFinal = securityInputFinal;
        
            if ((oldBaseSecurity === baseSecurity || oldBaseSecurity === 0) && (securitySkillInput.value >= baseSecurity)) {
        
        
                if (securitySkillInput.value >= 100) {
        
                    oldBaseSecurity = baseSecurity;
                    securitySkillInput.value = 100;
                    securityInputFinal = (100 - baseSecurity);
                    UpdateCharValues();
        
                    securityTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        securityInputFinal = securityInputFinal;
        
                        UpdateCharValues();
        
                        securitySkillInput.value = charVals.xsecurity;
        
                        securityTextContent.textContent = "value is " + charVals.xsecurity;
        
        
        
                    } else {
        
                        securityInputFinal = (securitySkillInput.value - baseSecurity);
                        UpdateCharValues();
        
                        securitySkillInput.value = charVals.xsecurity;
        
                        securityTextContent.textContent = "value is " + charVals.xsecurity;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseSecurity === baseSecurity && securitySkillInput.value < baseSecurity) {
        
                securitySkillInput.value = baseSecurity;
                securityInputFinal = (securitySkillInput.value - baseSecurity);
                UpdateCharValues();
                oldSecurityInputFinal = securityInputFinal;
        
                securityTextContent.textContent = "value must be above " + baseSecurity;
        
        
            } else if (baseSecurity !== oldBaseSecurity && securitySkillInput.value >= baseSecurity) {
        
        
                if (oldSecurityInputFinal === 0) {
        
                    if (securitySkillInput.value >= 100) {
        
                        oldBaseSecurity = baseSecurity;
                        securitySkillInput.value = 100;
                        UpdateCharValues();
        
                        speechcraftTextContent.textContent = "value is " + charVals.xsecurity;
        
        
        
                    } else {
        
                        oldBaseSecurity = baseSecurity; //possibly not 
                        securitySkillInput.value = baseSecurity;
                        securityInputFinal = (securitySkillInput.value - baseSecurity);
                        UpdateCharValues();
        
                        securityTextContent.textContent = "value is " + charVals.xsecurity;
        
                    }
        
                } else if (oldSecurityInputFinal > 0) {
        
                    if (securitySkillInput.value >= 100) {
        
                        oldBaseSecurity = baseSecurity;
                        securitySkillInput.value = 100;
                        securityInputFinal = (100 - baseSecurity);
                        UpdateCharValues();
        
                        securityTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceSecurity = (oldBaseSecurity - baseSecurity);
        
                        securityInputFinal = ((securitySkillInput.value - oldBaseSecurity) + baseDifferenceSecurity);
                        UpdateCharValues();
        
                        securitySkillInput.value = charVals.xsecurity;
        
                        securityTextContent.textContent = "value is " + charVals.xsecurity;
        
                    }
                }
        
            } else if (baseSecurity !== oldBaseSecurity && securitySkillInput.value < baseSecurity) {
        
                oldBaseSecurity = baseSecurity; //possibly not 
                securitySkillInput.value = baseSecurity;
                securityInputFinal = (securitySkillInput.value - baseSecurity);
                UpdateCharValues();
                securityInputFinal = 0;
        
                securityTextContent.textContent = "value is " + charVals.xsecurity;
        
        
            }
        }
        
        //------------------------------------------------------------------------------``
        //-----WILLPOWER----------------------------------------------------------------        
        
        //Intelligence attribute input and minor skills [alchemy, conjuration, enchant, security]-    
        
        //set form inputs to variables
        
        
        let willpowerAttributeInputFinal = 0;
        let oldWillpowerAttributeInputFinal = 0;
        
        
        
        
        let alterationInputFinal = 0;
        let oldAlterationInputFinal = 0;
        
        
        
        let destructionInputFinal = 0;
        let oldDestructionInputFinal = 0;
        
        
        
        let mysticismInputFinal = 0;
        let oldMysticismInputFinal = 0;
        
        
        
        let restorationInputFinal = 0;
        let oldRestorationInputFinal = 0;
        
        
        
        
        //for setting textcontent of p id to final value of user inputted data 
        
        
        
        
        function WillpowerUserInput() {
        
            willpowerAttributeInput = document.querySelector("#attribute-willpower");
            let willpowerTextContent = document.querySelector("#willpower-content");
        
            oldWillpowerAttributeInputFinal = willpowerAttributeInputFinal;
        
        
            if ((oldBaseWillpower === baseWillpower || oldBaseWillpower === 0) && (willpowerAttributeInput.value >= baseWillpower)) { //check base = previous base and if value more than base or equal (attribute value can not go below its base value)
        
        
                willpowerAttributeInputFinal = (willpowerAttributeInput.value - baseWillpower); //remove base from input as base is added on in CharValuesUpdate();
                UpdateCharValues();
        
                willpowerAttributeInput.value = charVals.willpower; //set as correct amount
        
                willpowerTextContent.textContent = "value is " + charVals.willpower;
        
        
            } else if (oldBaseWillpower === baseWillpower && willpowerAttributeInput.value < baseWillpower) { //if base values are equal(base value hasnt been changed) and value less than base
        
        
                willpowerAttributeInput.value = baseWillpower; //set value as base
                willpowerAttributeInputFinal = (willpowerAttributeInput.value - baseWillpower); //this will set to 0 so UpdateCharValues() will have 0 user input 
                UpdateCharValues();
                oldWillpowerAttributeInputFinal = willpowerAttributeInputFinal; //registers oldEnduranceInputFinal as 0 so if later call occurs when base values have changed knows to 
                //change value to new base value if no further user input occurs 
                willpowerTextContent.textContent = "value must be above " + baseWillpower;
        
            } else if (baseWillpower !== oldBaseWillpower && willpowerAttributeInput.value >= baseWillpower) { //if base value has been changed and input is more than or equal to base 
        
                if (oldWillpowerAttributeInputFinal === 0) { //if no user input has occured 
        
                    oldBaseWillpower = baseWillpower; //set to base and updated as base value
                    willpowerAttributeInput.value = baseWillpower;
                    willpowerAttributeFinalValue = (willpowerAttributeInput.value - baseWillpower);
                    UpdateCharValues();
        
                    willpowerTextContent.textContent = "value must be above " + baseWillpower;
        
        
                } else if (oldWillpowerAttributeInputFinal > 0) { //when user input has occurred 
        
                    var baseDifferenceWillpower = (oldBaseWillpower - baseWillpower); //detectes differnce between base values 
        
                    willpowerAttributeInputFinal = ((willpowerAttributeInput.value - oldBaseWillpower) + baseDifferenceWillpower); //difference is added on to make final value reflect correct input with changed base value 
                    UpdateCharValues();
        
                    willpowerAttributeInput.value = charVals.willpower;
        
                    willpowerTextContent.textContent = "value is " + charVals.willpower;
        
                }
        
            } else if (baseWillpower !== oldBaseWillpower && willpowerAttributeInput.value < baseWillpower) { //if base has been changed and input less than base, sets values to base and inputFinal to 0 
        
                oldBaseWillpower = baseWillpower;
                willpowerAttributeInput.value = baseWillpower;
                willpowerAttributeInputFinal = (willpowerAttributeInput.value - baseWillpower);
                UpdateCharValues();
        
                willpowerTextContent.textContent = "value is " + baseWillpower;
        
            }
        
        }
        
        
        
        function AlterationUserInput() {
        
            alterationSkillInput = document.querySelector("#skill-alteration");
            let alterationTextContent = document.querySelector("#alteration-content");
        
            oldAlterationInputFinal = alterationInputFinal;
        
            if ((oldBaseAlteration === baseAlteration || oldBaseAlteration === 0) && (alterationSkillInput.value >= baseAlteration)) {
        
        
                if (alterationSkillInput.value >= 100) {
        
                    oldBaseAlteration = baseAlteration;
                    alterationSkillInput.value = 100;
                    alterationInputFinal = (100 - baseAlteration);
                    UpdateCharValues();
        
                    alterationTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        alterationInputFinal = alterationInputFinal;
        
                        UpdateCharValues();
        
                        alterationSkillInput.value = charVals.alteration;
        
                        alterationTextContent.textContent = "value is " + charVals.alteration;
        
        
        
                    } else {
        
                        alterationInputFinal = (alterationSkillInput.value - baseAlteration);
                        UpdateCharValues();
        
                        alterationSkillInput.value = charVals.alteration;
        
                        alterationTextContent.textContent = "value is " + charVals.alteration;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseAlteration === baseAlteration && alterationSkillInput.value < baseAlteration) {
        
                alterationSkillInput.value = baseAlteration;
                alterationInputFinal = (alterationSkillInput.value - baseAlteration);
                UpdateCharValues();
                oldAlterationInputFinal = alterationInputFinal;
        
                alterationTextContent.textContent = "value must be above " + baseAlteration;
        
        
        
            } else if (baseAlteration !== oldBaseAlteration && alterationSkillInput.value >= baseAlteration) {
        
        
                if (oldAlterationInputFinal === 0) {
        
                    if (alterationSkillInput.value >= 100) {
        
                        oldBaseAlteration = baseAlteration;
                        alterationSkillInput.value = 100;
                        UpdateCharValues();
        
                        alterationTextContent.textContent = "value is " + charVals.alteration;
        
        
        
                    } else {
        
                        oldBaseAlteration = baseAlteration; //possibly not 
                        alterationSkillInput.value = baseAlteration;
                        alterationInputFinal = (alterationSkillInput.value - baseAlteration);
                        UpdateCharValues();
        
                        alterationTextContent.textContent = "value is " + charVals.alteration;
        
        
                    }
        
                } else if (oldAlterationInputFinal > 0) {
        
                    if (alterationSkillInput.value >= 100) {
        
                        oldBaseAlteration = baseAlteration;
                        alterationSkillInput.value = 100;
                        alterationInputFinal = (100 - baseAlteration);
                        UpdateCharValues();
        
                        alterationTextContent.textContent = "value can not be above " + 100;
        
        
                    } else {
        
                        var baseDifferenceAlteration = (oldBaseAlteration - baseAlteration);
        
                        alterationInputFinal = ((alterationSkillInput.value - oldBaseAlteration) + baseDifferenceAlteration);
                        UpdateCharValues();
        
                        alterationSkillInput.value = charVals.alteration;
        
                        alterationTextContent.textContent = "value is " + charVals.alteration;
        
        
                    }
                }
        
            } else if (baseAlteration !== oldBaseAlteration && alterationSkillInput.value < baseAlteration) {
        
                oldBaseAlteration = baseAlteration; //possibly not 
                alterationSkillInput.value = baseAlteration;
                alterationInputFinal = (alterationSkillInput.value - baseAlteration);
                UpdateCharValues();
                alterationInputFinal = 0;
        
                alterationTextContent.textContent = "value is " + charVals.alteration;
        
        
        
            }
        }
        
        function DestructionUserInput() {
        
            destructionSkillInput = document.querySelector("#skill-destruction");
            let destructionTextContent = document.querySelector("#destruction-content");
        
        
            oldDestructionInputFinal = destructionInputFinal;
        
            if ((oldBaseDestruction === baseDestruction || oldBaseDestruction === 0) && (destructionSkillInput.value >= baseDestruction)) {
        
        
                if (destructionSkillInput.value >= 100) {
        
                    oldBaseDestruction = baseDestruction;
                    destructionSkillInput.value = 100;
                    destructionInputFinal = (100 - baseDestruction);
                    UpdateCharValues();
        
                    destructionTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        destructionInputFinal = destructionInputFinal;
        
                        UpdateCharValues();
        
                        destructionSkillInput.value = charVals.destruction;
        
                        destructionTextContent.textContent = "value is " + charVals.destruction;
        
        
        
                    } else {
        
                        destructionInputFinal = (destructionSkillInput.value - baseDestruction);
                        UpdateCharValues();
        
                        destructionSkillInput.value = charVals.destruction;
        
                        destructionTextContent.textContent = "value is " + charVals.destruction;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseDestruction === baseDestruction && destructionSkillInput.value < baseDestruction) {
        
                destructionSkillInput.value = baseDestruction;
                destructionInputFinal = (destructionSkillInput.value - baseDestruction);
                UpdateCharValues();
                oldDestructionInputFinal = destructionInputFinal;
        
                destructionTextContent.textContent = "value must be above " + baseDestruction;
        
        
            } else if (baseDestruction !== oldBaseDestruction && destructionSkillInput.value >= baseDestruction) {
        
        
                if (oldDestructionInputFinal === 0) {
        
                    if (destructionSkillInput.value >= 100) {
        
                        oldBaseDestruction = baseDestruction;
                        destructionSkillInput.value = 100;
                        UpdateCharValues();
        
                        destructionTextContent.textContent = "value is " + charVals.destruction;
        
        
        
                    } else {
        
                        oldBaseDestruction = baseDestruction; //possibly not 
                        destructionSkillInput.value = baseDestruction;
                        destructionInputFinal = (destructionSkillInput.value - baseDestruction);
                        UpdateCharValues();
        
                        destructionTextContent.textContent = "value is " + charVals.destruction;
        
                    }
        
                } else if (oldDestructionInputFinal > 0) {
        
                    if (destructionSkillInput.value >= 100) {
        
                        oldBaseDestruction = baseDestruction;
                        destructionSkillInput.value = 100;
                        destructionInputFinal = (100 - baseDestruction);
                        UpdateCharValues();
        
                        destructionTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceDestruction = (oldBaseDestruction - baseDestruction);
        
                        destructionInputFinal = ((destructionSkillInput.value - oldBaseDestruction) + baseDifferenceDestruction);
                        UpdateCharValues();
        
                        destructionSkillInput.value = charVals.destruction;
        
                        destructionTextContent.textContent = "value is " + charVals.destruction;
        
                    }
                }
        
            } else if (baseDestruction !== oldBaseDestruction && destructionSkillInput.value < baseDestruction) {
        
                oldBaseDestruction = baseDestruction; //possibly not 
                destructionSkillInput.value = baseDestruction;
                destructionInputFinal = (destructionSkillInput.value - baseDestruction);
                UpdateCharValues();
                destructionInputFinal = 0;
        
                destructionTextContent.textContent = "value is " + charVals.destruction;
        
        
            }
        }
        
        function MysticismUserInput() {
        
            mysticismSkillInput = document.querySelector("#skill-mysticism");
            let mysticismTextContent = document.querySelector("#mysticism-content");
        
            oldMysticismInputFinal = mysticismInputFinal;
        
            if ((oldBaseMysticism === baseMysticism || oldBaseMysticism === 0) && (mysticismSkillInput.value >= baseMysticism)) {
        
        
                if (mysticismSkillInput.value >= 100) {
        
                    oldBaseMysticism = baseMysticism;
                    mysticismSkillInput.value = 100;
                    mysticismInputFinal = (100 - baseMysticism);
                    UpdateCharValues();
        
                    mysticismTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        mysticismInputFinal = mysticismInputFinal;
        
                        UpdateCharValues();
        
                        mysticismSkillInput.value = charVals.mysticism;
        
                        mysticismTextContent.textContent = "value is " + charVals.mysticism;
        
        
        
                    } else {
        
                        mysticismInputFinal = (mysticismSkillInput.value - baseMysticism);
                        UpdateCharValues();
        
                        mysticismSkillInput.value = charVals.mysticism;
        
                        mysticismTextContent.textContent = "value is " + charVals.mysticism;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseMysticism === baseMysticism && mysticismSkillInput.value < baseMysticism) {
        
                mysticismSkillInput.value = baseMysticism;
                mysticismInputFinal = (mysticismSkillInput.value - baseMysticism);
                UpdateCharValues();
                oldMysticismInputFinal = mysticismInputFinal;
        
                mysticismTextContent.textContent = "value must be above " + baseMysticism;
        
        
            } else if (baseMysticism !== oldBaseMysticism && mysticismSkillInput.value >= baseMysticism) {
        
        
                if (oldMysticismInputFinal === 0) {
        
                    if (mysticismSkillInput.value >= 100) {
        
                        oldBaseMysticism = baseMysticism;
                        mysticismSkillInput.value = 100;
                        UpdateCharValues();
        
                        mysticismTextContent.textContent = "value is " + charVals.mysticism;
        
        
                    } else {
        
                        oldBaseMysticism = baseMysticism; //possibly not 
                        mysticismSkillInput.value = baseMysticism;
                        mysticismInputFinal = (mysticismSkillInput.value - baseMysticism);
                        UpdateCharValues();
        
                        mysticismTextContent.textContent = "value is " + charVals.mysticism;
        
                    }
        
                } else if (oldMysticismInputFinal > 0) {
        
                    if (mysticismSkillInput.value >= 100) {
        
                        oldBaseMysticism = baseMysticism;
                        mysticismSkillInput.value = 100;
                        mysticismInputFinal = (100 - baseMysticism);
                        UpdateCharValues();
        
                        mysticismTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceMysticism = (oldBaseMysticism - baseMysticism);
        
                        mysticismInputFinal = ((mysticismSkillInput.value - oldBaseMysticism) + baseDifferenceMysticism);
                        UpdateCharValues();
        
                        mysticismSkillInput.value = charVals.mysticism;
        
                        mysticismTextContent.textContent = "value is " + charVals.mysticism;
        
                    }
                }
        
            } else if (baseMysticism !== oldBaseMysticism && mysticismSkillInput.value < baseMysticism) {
        
                oldBaseMysticism = baseMysticism; //possibly not 
                mysticismSkillInput.value = baseMysticism;
                mysticismInputFinal = (mysticismSkillInput.value - baseMysticism);
                UpdateCharValues();
                mysticismInputFinal = 0;
        
                mysticismTextContent.textContent = "value is " + charVals.mysticism;
        
        
            }
        }
        
        function RestorationUserInput() {
        
            restorationSkillInput = document.querySelector("#skill-restoration");
            let restorationTextContent = document.querySelector("#restoration-content");
        
            oldRestorationInputFinal = restorationInputFinal;
        
            if ((oldBaseRestoration === baseRestoration || oldBaseRestoration === 0) && (restorationSkillInput.value >= baseRestoration)) {
        
        
                if (restorationSkillInput.value >= 100) {
        
                    oldBaseRestoration = baseRestoration;
                    restorationSkillInput.value = 100;
                    restorationInputFinal = (100 - baseRestoration);
                    UpdateCharValues();
        
                    restorationTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        restorationInputFinal = restorationInputFinal;
        
                        UpdateCharValues();
        
                        restorationSkillInput.value = charVals.restoration;
        
                        restorationTextContent.textContent = "value is " + charVals.restoration;
        
        
        
                    } else {
        
                        restorationInputFinal = (restorationSkillInput.value - baseRestoration);
                        UpdateCharValues();
        
                        restorationSkillInput.value = charVals.restoration;
        
                        restorationTextContent.textContent = "value is " + charVals.restoration;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseRestoration === baseRestoration && restorationSkillInput.value < baseRestoration) {
        
                restorationSkillInput.value = baseRestoration;
                restorationInputFinal = (restorationSkillInput.value - baseRestoration);
                UpdateCharValues();
                oldRestorationInputFinal = restorationInputFinal;
        
                restorationTextContent.textContent = "value must be above " + baseRestoration;
        
        
            } else if (baseRestoration !== oldBaseRestoration && restorationSkillInput.value >= baseRestoration) {
        
        
                if (oldRestorationInputFinal === 0) {
        
                    if (restorationSkillInput.value >= 100) {
        
                        oldBaseRestoration = baseRestoration;
                        restorationSkillInput.value = 100;
                        UpdateCharValues();
        
                        restorationTextContent.textContent = "value is " + charVals.restoration;
        
        
        
                    } else {
        
                        oldBaseRestoration = baseRestoration; //possibly not 
                        restorationSkillInput.value = baseRestoration;
                        retorationInputFinal = (restorationSkillInput.value - baseRestoration);
                        UpdateCharValues();
        
                        restorationTextContent.textContent = "value is " + charVals.restoration;
        
                    }
        
                } else if (oldRestorationInputFinal > 0) {
        
                    if (restorationSkillInput.value >= 100) {
        
                        oldBaseRestoration = baseRestoration;
                        restorationSkillInput.value = 100;
                        restorationInputFinal = (100 - baseRestoration);
                        UpdateCharValues();
        
                        restorationTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceRestoration = (oldBaseRestoration - baseRestoration);
        
                        restorationInputFinal = ((restorationSkillInput.value - oldBaseRestoration) + baseDifferenceRestoration);
                        UpdateCharValues();
        
                        restorationSkillInput.value = charVals.restoration;
        
                        restorationTextContent.textContent = "value is " + charVals.restoration;
        
                    }
                }
        
            } else if (baseRestoration !== oldBaseRestoration && restorationSkillInput.value < baseRestoration) {
        
                oldBaseRestoration = baseRestoration; //possibly not 
                restorationSkillInput.value = baseRestoration;
                restorationInputFinal = (restorationSkillInput.value - baseRestoration);
                UpdateCharValues();
                restorationInputFinal = 0;
        
                restorationTextContent.textContent = "value is " + charVals.restoration;
        
        
            }
        }
        
        //------------------------------------------------------------------------------``
        //-----AGILITY----------------------------------------------------------------        
        
        //Agility attribute input and minor skills [block, light-armor, marksman, sneak]-    
        
        //set form inputs to variables
        
        
        let agilityAttributeInputFinal = 0;
        let oldAgilityAttributeInputFinal = 0;
        
        
        
        
        let blockInputFinal = 0;
        let oldBlockInputFinal = 0;
        
        
        
        let lightArmorInputFinal = 0;
        let oldLightArmorInputFinal = 0;
        
        
        let marksmanInputFinal = 0;
        let oldMarksmanInputFinal = 0;
        
        
        
        let sneakInputFinal = 0;
        let oldSneakInputFinal = 0;
        
        
        
        
        //for setting textcontent of p id to final value of user inputted data 
        
        
        
        
        function AgilityUserInput() {
        
            agilityAttributeInput = document.querySelector("#attribute-agility");
            let agilityTextContent = document.querySelector("#agility-content");
        
            oldAgilityAttributeInputFinal = agilityAttributeInputFinal;
        
        
            if ((oldBaseAgility === baseAgility || oldBaseAgility === 0) && (agilityAttributeInput.value >= baseAgility)) { //check base = previous base and if value more than base or equal (attribute value can not go below its base value)
        
        
                agilityAttributeInputFinal = (agilityAttributeInput.value - baseAgility); //remove base from input as base is added on in CharValuesUpdate();
                UpdateCharValues();
        
                agilityAttributeInput.value = charVals.agility; //set as correct amount
        
                agilityTextContent.textContent = "value is " + charVals.agility;
        
        
            } else if (oldBaseAgility === baseAgility && agilityAttributeInput.value < baseAgility) { //if base values are equal(base value hasnt been changed) and value less than base
        
        
                agilityAttributeInput.value = baseAgility; //set value as base
                agilityAttributeInputFinal = (agilityAttributeInput.value - baseAgility); //this will set to 0 so UpdateCharValues() will have 0 user input 
                UpdateCharValues();
                oldAgilityAttributeInputFinal = agilityAttributeInputFinal; //registers oldEnduranceInputFinal as 0 so if later call occurs when base values have changed knows to 
                //change value to new base value if no further user input occurs 
                agilityTextContent.textContent = "value must be above " + baseAgility;
        
            } else if (baseAgility !== oldBaseAgility && agilityAttributeInput.value >= baseAgility) { //if base value has been changed and input is more than or equal to base 
        
                if (oldAgilityAttributeInputFinal === 0) { //if no user input has occured 
        
                    oldBaseAgility = baseAgility; //set to base and updated as base value
                    agilityAttributeInput.value = baseAgility;
                    agilityAttributeFinalValue = (agilityAttributeInput.value - baseAgility);
                    UpdateCharValues();
        
                    agilityTextContent.textContent = "value must be above " + baseAgility;
        
        
                } else if (oldAgilityAttributeInputFinal > 0) { //when user input has occurred 
        
                    var baseDifferenceAgility = (oldBaseAgility - baseAgility); //detectes differnce between base values 
        
                    agilityAttributeInputFinal = ((agilityAttributeInput.value - oldBaseAgility) + baseDifferenceAgility); //difference is added on to make final value reflect correct input with changed base value 
                    UpdateCharValues();
        
                    agilityAttributeInput.value = charVals.agility;
        
                    agilityTextContent.textContent = "value is " + charVals.agility;
        
                }
        
            } else if (baseAgility !== oldBaseAgility && agilityAttributeInput.value < baseAgility) { //if base has been changed and input less than base, sets values to base and inputFinal to 0 
        
                oldBaseAgility = baseAgility;
                agilityAttributeInput.value = baseAgility;
                agilityAttributeInputFinal = (agilityAttributeInput.value - baseAgility);
                UpdateCharValues();
        
                agilityTextContent.textContent = "value is " + baseAgility;
        
            }
        
        }
        
        
        
        function BlockUserInput() {
        
            blockSkillInput = document.querySelector("#skill-block");
            let blockTextContent = document.querySelector("#block-content");
        
            oldBlockInputFinal = blockInputFinal;
        
            if ((oldBaseBlock === baseBlock || oldBaseBlock === 0) && (blockSkillInput.value >= baseBlock)) {
        
        
                if (blockSkillInput.value >= 100) {
        
                    oldBaseBlock = baseBlock;
                    blockSkillInput.value = 100;
                    blockInputFinal = (100 - baseBlock);
                    UpdateCharValues();
        
                    blockTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        blockInputFinal = blockInputFinal;
        
                        UpdateCharValues();
        
                        blockSkillInput.value = charVals.block;
        
                        blockTextContent.textContent = "value is " + charVals.block;
        
        
        
        
                    } else {
        
                        blockInputFinal = (blockSkillInput.value - baseBlock);
                        UpdateCharValues();
        
                        blockSkillInput.value = charVals.block;
        
                        blockTextContent.textContent = "value is " + charVals.block;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseBlock === baseBlock && blockSkillInput.value < baseBlock) {
        
                blockSkillInput.value = baseBlock;
                blockInputFinal = (blockSkillInput.value - baseBlock);
                UpdateCharValues();
                oldBlockInputFinal = blockInputFinal;
        
                blockTextContent.textContent = "value must be above " + baseBlock;
        
        
            } else if (baseBlock !== oldBaseBlock && blockSkillInput.value >= baseBlock) {
        
        
                if (oldBlockInputFinal === 0) {
        
                    if (blockSkillInput.value >= 100) {
        
                        oldBaseBlock = baseBlock;
                        blockSkillInput.value = 100;
                        UpdateCharValues();
        
                        blockTextContent.textContent = "value is " + charVals.block;
        
        
        
                    } else {
        
                        oldBaseBlock = baseBlock; //possibly not 
                        blockSkillInput.value = baseBlock;
                        blockInputFinal = (blockSkillInput.value - baseBlock);
                        UpdateCharValues();
        
                        blockTextContent.textContent = "value is " + charVals.block;
        
                    }
        
                } else if (oldBlockInputFinal > 0) {
        
                    if (blockSkillInput.value >= 100) {
        
                        oldBaseBlock = baseBlock;
                        blockSkillInput.value = 100;
                        blockInputFinal = (100 - baseBlock);
                        UpdateCharValues();
        
                        blockTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceBlock = (oldBaseBlock - baseBlock);
        
                        blockInputFinal = ((blockSkillInput.value - oldBaseBlock) + baseDifferenceBlock);
                        UpdateCharValues();
        
                        blockSkillInput.value = charVals.block;
        
                        blockTextContent.textContent = "value is " + charVals.block;
        
                    }
                }
        
            } else if (baseBlock !== oldBaseBlock && blockSkillInput.value < baseBlock) {
        
                oldBaseBlock = baseBlock; //possibly not 
                blockSkillInput.value = baseBlock;
                blockInputFinal = (blockSkillInput.value - baseBlock);
                UpdateCharValues();
                blockInputFinal = 0;
        
                blockTextContent.textContent = "value is " + charVals.block;
        
        
            }
        }
        
        function LightArmorUserInput() {
        
            lightArmorSkillInput = document.querySelector("#skill-light-armor");
            let lightArmorTextContent = document.querySelector("#light-armor-content");
        
        
            oldLightArmorInputFinal = lightArmorInputFinal;
        
            if ((oldBaseLightArmor === baseLightArmor || oldBaseLightArmor === 0) && (lightArmorSkillInput.value >= baseLightArmor)) {
        
        
                if (lightArmorSkillInput.value >= 100) {
        
                    oldBaseLightArmor = baseLightArmor;
                    lightArmorSkillInput.value = 100;
                    lightArmorInputFinal = (100 - baseLightArmor);
                    UpdateCharValues();
        
                    lightArmorTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        lightArmorInputFinal = lightArmorInputFinal;
        
                        UpdateCharValues();
        
                        lightArmorSkillInput.value = charVals.lightArmor;
        
                        lightArmorTextContent.textContent = "value is " + charVals.lightArmor;
        
        
        
                    } else {
        
                        lightArmorInputFinal = (lightArmorSkillInput.value - baseLightArmor);
                        UpdateCharValues();
        
                        lightArmorSkillInput.value = charVals.lightArmor;
        
                        lightArmorTextContent.textContent = "value is " + charVals.lightArmor;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseLightArmor === baseLightArmor && lightArmorSkillInput.value < baseLightArmor) {
        
                lightArmorSkillInput.value = baseLightArmor;
                lightArmorInputFinal = (lightArmorSkillInput.value - baseLightArmor);
                UpdateCharValues();
                oldLightArmorInputFinal = lightArmorInputFinal;
        
                lightArmorTextContent.textContent = "value must be above " + baseLightArmor;
        
        
            } else if (baseLightArmor !== oldBaseLightArmor && lightArmorSkillInput.value >= baseLightArmor) {
        
        
                if (oldLightArmorInputFinal === 0) {
        
                    if (lightArmorSkillInput.value >= 100) {
        
                        oldBaseLightArmor = baseLightArmor;
                        lightArmorSkillInput.value = 100;
                        UpdateCharValues();
        
                        lightArmorTextContent.textContent = "value is " + charVals.lightArmor;
        
        
        
                    } else {
        
                        oldBaseLightArmor = baseLightArmor; //possilly not 
                        lightArmorSkillInput.value = baseLightArmor;
                        lightArmorInputFinal = (lightArmorSkillInput.value - baseLightArmor);
                        UpdateCharValues();
        
                        lightArmorTextContent.textContent = "value is " + charVals.lightArmor;
        
                    }
        
                } else if (oldLightArmorInputFinal > 0) {
        
                    if (lightArmorSkillInput.value >= 100) {
        
                        oldBaseLightArmor = baseLightArmor;
                        lightArmorSkillInput.value = 100;
                        lightArmorInputFinal = (100 - baseLightArmor);
                        UpdateCharValues();
        
                        lightArmorTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceLightArmor = (oldBaseLightArmor - baseLightArmor);
        
                        lightArmorInputFinal = ((lightArmorSkillInput.value - oldBaseLightArmor) + baseDifferenceLightArmor);
                        UpdateCharValues();
        
                        lightArmorSkillInput.value = charVals.lightArmor;
        
                        lightArmorTextContent.textContent = "value is " + charVals.lightArmor;
        
                    }
                }
        
            } else if (baseLightArmor !== oldBaseLightArmor && lightArmorSkillInput.value < baseLightArmor) {
        
                oldBaseLightArmor = baseLightArmor; //possibly not 
                lightArmorSkillInput.value = baseLightArmor;
                lightArmorInputFinal = (lightArmorSkillInput.value - baseLightArmor);
                UpdateCharValues();
                lightArmorInputFinal = 0;
        
                lightArmorTextContent.textContent = "value is " + charVals.lightArmor;
        
        
            }
        }
        
        function MarksmanUserInput() {
        
            marksmanSkillInput = document.querySelector("#skill-marksman");
            let marksmanTextContent = document.querySelector("#marksman-content");
        
        
            oldMarksmanInputFinal = marksmanInputFinal;
        
            if ((oldBaseMarksman === baseMarksman || oldBaseMarksman === 0) && (marksmanSkillInput.value >= baseMarksman)) {
        
        
                if (marksmanSkillInput.value >= 100) {
        
                    oldBaseMarksman = baseMarksman;
                    marksmanSkillInput.value = 100;
                    marksmanInputFinal = (100 - baseMarksman);
                    UpdateCharValues();
        
                    marksmanTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        marksmanInputFinal = marksmanInputFinal;
        
                        UpdateCharValues();
        
                        marksmanSkillInput.value = charVals.marksman;
        
                        marksmanTextContent.textContent = "value is " + charVals.marksman;
        
        
        
                    } else {
        
                        marksmanInputFinal = (marksmanSkillInput.value - baseMarksman);
                        UpdateCharValues();
        
                        marksmanSkillInput.value = charVals.marksman;
        
                        marksmanTextContent.textContent = "value is " + charVals.marksman;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseMarksman === baseMarksman && marksmanSkillInput.value < baseMarksman) {
        
                marksmanSkillInput.value = baseMarksman;
                marksmanInputFinal = (marksmanSkillInput.value - baseMarksman);
                UpdateCharValues();
                oldMarksmanInputFinal = marksmanInputFinal;
        
                marksmanTextContent.textContent = "value must be above " + baseMarksman;
        
        
            } else if (baseMarksman !== oldBaseMarksman && marksmanSkillInput.value >= baseMarksman) {
        
        
                if (marksmanInputFinal === 0) {
        
                    if (marksmanSkillInput.value >= 100) {
        
                        oldBaseMarksman = baseMarksman;
                        marksmanSkillInput.value = 100;
                        UpdateCharValues();
        
                        marksmanTextContent.textContent = "value is " + charVals.marksman;
        
        
        
                    } else {
        
                        oldBaseMarksman = baseMarksman; //possilly not 
                        marksmanSkillInput.value = baseMarksman;
                        marksmanInputFinal = (marksmanSkillInput.value - baseMarksman);
                        UpdateCharValues();
        
                        marksmanTextContent.textContent = "value is " + charVals.marksman;
        
                    }
        
                } else if (oldMarksmanInputFinal > 0) {
        
                    if (marksmanSkillInput.value >= 100) {
        
                        oldBaseMarksman = baseMarksman;
                        marksmanSkillInput.value = 100;
                        marksmanInputFinal = (100 - baseMarksman);
                        UpdateCharValues();
        
                        marksmanTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceMarksman = (oldBaseMarksman - baseMarksman);
        
                        marksmanInputFinal = ((marksmanSkillInput.value - oldBaseMarksman) + baseDifferenceMarksman);
                        UpdateCharValues();
        
                        marksmanSkillInput.value = charVals.marksman;
        
                        marksmanTextContent.textContent = "value is " + charVals.marksman;
        
                    }
                }
        
            } else if (baseMarksman !== oldBaseMarksman && marksmanSkillInput.value < baseMarksman) {
        
                oldBaseMarksman = baseMarksman; //possibly not 
                marksmanSkillInput.value = baseMarksman;
                marksmanInputFinal = (marksmanSkillInput.value - baseMarksman);
                UpdateCharValues();
                marksmanInputFinal = 0;
        
                marksmanTextContent.textContent = "value is " + charVals.marksman;
        
        
            }
        }
        
        function SneakUserInput() {
        
            sneakSkillInput = document.querySelector("#skill-sneak");
            let sneakTextContent = document.querySelector("#sneak-content");
        
        
        
            oldSneakInputFinal = sneakInputFinal;
        
            if ((oldBaseSneak === baseSneak || oldBaseSneak === 0) && (sneakSkillInput.value >= baseSneak)) {
        
        
                if (sneakSkillInput.value >= 100) {
        
                    oldBaseSneak = baseSneak;
                    sneakSkillInput.value = 100;
                    sneakInputFinal = (100 - baseSneak);
                    UpdateCharValues();
        
                    sneakTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        sneakInputFinal = sneakInputFinal;
        
                        UpdateCharValues();
        
                        sneakSkillInput.value = charVals.sneak;
        
                        sneakTextContent.textContent = "value is " + charVals.sneak;
        
        
        
                    } else {
        
                        sneakInputFinal = (sneakSkillInput.value - baseSneak);
                        UpdateCharValues();
        
                        sneakSkillInput.value = charVals.sneak;
        
                        sneakTextContent.textContent = "value is " + charVals.sneak;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseSneak === baseSneak && sneakSkillInput.value < baseSneak) {
        
                sneakSkillInput.value = baseSneak;
                sneakInputFinal = (sneakSkillInput.value - baseSneak);
                UpdateCharValues();
                oldSneakInputFinal = sneakInputFinal;
        
                sneakTextContent.textContent = "value must be above " + baseSneak;
        
        
            } else if (baseSneak !== oldBaseSneak && sneakSkillInput.value >= baseSneak) {
        
        
                if (sneakInputFinal === 0) {
        
                    if (sneakSkillInput.value >= 100) {
        
                        oldBaseSneak = baseSneak;
                        sneakSkillInput.value = 100;
                        UpdateCharValues();
        
                        sneakTextContent.textContent = "value is " + charVals.sneak;
        
        
        
                    } else {
        
                        oldBaseSneak = baseSneak; //possilly not 
                        sneakSkillInput.value = baseSneak;
                        sneakInputFinal = (sneakSkillInput.value - baseSneak);
                        UpdateCharValues();
        
                        sneakTextContent.textContent = "value is " + charVals.sneak;
        
                    }
        
                } else if (oldSneakInputFinal > 0) {
        
                    if (sneakSkillInput.value >= 100) {
        
                        oldBaseSneak = baseSneak;
                        sneakSkillInput.value = 100;
                        sneakInputFinal = (100 - baseSneak);
                        UpdateCharValues();
        
                        sneakTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceSneak = (oldBaseSneak - baseSneak);
        
                        sneakInputFinal = ((sneakSkillInput.value - oldBaseSneak) + baseDifferenceSneak);
                        UpdateCharValues();
        
                        sneakSkillInput.value = charVals.sneak;
        
                        sneakTextContent.textContent = "value is " + charVals.sneak;
        
                    }
                }
        
            } else if (baseSneak !== oldBaseSneak && sneakSkillInput.value < baseSneak) {
        
                oldBaseSneak = baseSneak; //possibly not 
                sneakSkillInput.value = baseSneak;
                sneakInputFinal = (sneakSkillInput.value - baseSneak);
                UpdateCharValues();
                sneakInputFinal = 0;
        
                sneakTextContent.textContent = "value is " + charVals.sneak;
        
        
            }
        }
        
        //------------------------------------------------------------------------------``
        //-----SPEED----------------------------------------------------------------        
        
        //Speed attribute input and minor skills [athletics, hand-to-hand, short-blade, unarmored]-    
        
        //set form inputs to variables
        
        
        let speedAttributeInputFinal = 0;
        let oldSpeedAttributeInputFinal = 0;
        
        
        
        let athleticsInputFinal = 0;
        let oldAthleticsInputFinal = 0;
        
        
        let handToHandInputFinal = 0;
        let oldHandToHandInputFinal = 0;
        
        
        
        let shortBladeInputFinal = 0;
        let oldShortBladeInputFinal = 0;
        
        
        
        let unarmoredInputFinal = 0;
        let oldUnarmoredInputFinal = 0;
        
        
        
        
        //for setting textcontent of p id to final value of user inputted data 
        
        
        
        
        function SpeedUserInput() {
        
            speedAttributeInput = document.querySelector("#attribute-speed");
            let speedTextContent = document.querySelector("#speed-content");
        
            oldSpeedAttributeInputFinal = speedAttributeInputFinal;
        
        
            if ((oldBaseSpeed === baseSpeed || oldBaseSpeed === 0) && (speedAttributeInput.value >= baseSpeed)) { //check base = previous base and if value more than base or equal (attribute value can not go below its base value)
        
        
                speedAttributeInputFinal = (speedAttributeInput.value - baseSpeed); //remove base from input as base is added on in CharValuesUpdate();
                UpdateCharValues();
        
                speedAttributeInput.value = charVals.speed; //set as correct amount
        
                speedTextContent.textContent = "value is " + charVals.speed;
        
        
            } else if (oldBaseSpeed === baseSpeed && speedAttributeInput.value < baseSpeed) { //if base values are equal(base value hasnt been changed) and value less than base
        
        
                speedAttributeInput.value = baseSpeed; //set value as base
                speedAttributeInputFinal = (speedAttributeInput.value - baseSpeed); //this will set to 0 so UpdateCharValues() will have 0 user input 
                UpdateCharValues();
                oldSpeedAttributeInputFinal = speedAttributeInputFinal; //registers oldEnduranceInputFinal as 0 so if later call occurs when base values have changed knows to 
                //change value to new base value if no further user input occurs 
                speedTextContent.textContent = "value must be above " + baseSpeed;
        
            } else if (baseSpeed !== oldBaseSpeed && speedAttributeInput.value >= baseSpeed) { //if base value has been changed and input is more than or equal to base 
        
                if (oldSpeedAttributeInputFinal === 0) { //if no user input has occured 
        
                    oldBaseSpeed = baseSpeed; //set to base and updated as base value
                    speedAttributeInput.value = baseSpeed;
                    speedAttributeFinalValue = (speedAttributeInput.value - baseSpeed);
                    UpdateCharValues();
        
                    speedTextContent.textContent = "value must be above " + baseSpeed;
        
        
                } else if (oldSpeedAttributeInputFinal > 0) { //when user input has occurred 
        
                    var baseDifferenceSpeed = (oldBaseSpeed - baseSpeed); //detectes differnce between base values 
        
                    speedAttributeInputFinal = ((speedAttributeInput.value - oldBaseSpeed) + baseDifferenceSpeed); //difference is added on to make final value reflect correct input with changed base value 
                    UpdateCharValues();
        
                    speedAttributeInput.value = charVals.speed;
        
                    speedTextContent.textContent = "value is " + charVals.speed;
        
                }
        
            } else if (baseSpeed !== oldBaseSpeed && speedAttributeInput.value < baseSpeed) { //if base has been changed and input less than base, sets values to base and inputFinal to 0 
        
                oldBaseSpeed = baseSpeed;
                speedAttributeInput.value = baseSpeed;
                speedAttributeInputFinal = (speedAttributeInput.value - baseSpeed);
                UpdateCharValues();
        
                speedTextContent.textContent = "value is " + baseSpeed;
        
            }
        
        }
        
        
        
        function AthleticsUserInput() {
        
            athleticsSkillInput = document.querySelector("#skill-athletics");
            let athleticsTextContent = document.querySelector("#athletics-content");
        
            oldAthleticsInputFinal = athleticsInputFinal;
        
            if ((oldBaseAthletics === baseAthletics || oldBaseAthletics === 0) && (athleticsSkillInput.value >= baseAthletics)) {
        
        
                if (athleticsSkillInput.value >= 100) {
        
                    oldBaseAthletics = baseAthletics;
                    athleticsSkillInput.value = 100;
                    athleticsInputFinal = (100 - baseAthletics);
                    UpdateCharValues();
        
                    athleticsTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        athleticsInputFinal = athleticsInputFinal;
        
                        UpdateCharValues();
        
                        athleticsSkillInput.value = charVals.athletics;
        
                        athleticsTextContent.textContent = "value is " + charVals.athletics;
        
        
        
                    } else {
        
                        athleticsInputFinal = (athleticsSkillInput.value - baseAthletics);
                        UpdateCharValues();
        
                        athleticsSkillInput.value = charVals.athletics;
        
                        athleticsTextContent.textContent = "value is " + charVals.athletics;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseAthletics === baseAthletics && athleticsSkillInput.value < baseAthletics) {
        
                athleticsSkillInput.value = baseAthletics;
                athleticsInputFinal = (athleticsSkillInput.value - baseAthletics);
                UpdateCharValues();
                oldAthleticsInputFinal = athleticsInputFinal;
        
                athleticsTextContent.textContent = "value must be above " + baseAthletics;
        
        
            } else if (baseAthletics !== oldBaseAthletics && athleticsSkillInput.value >= baseAthletics) {
        
        
                if (oldAthleticsInputFinal === 0) {
        
                    if (athleticsSkillInput.value >= 100) {
        
                        oldBaseAthletics = baseAthletics;
                        athleticsSkillInput.value = 100;
                        UpdateCharValues();
        
                        athleticsTextContent.textContent = "value is " + charVals.athletics;
        
        
        
                    } else {
        
                        oldBaseAthletics = baseAthletics; //possibly not 
                        athleticsSkillInput.value = baseAthletics;
                        athleticsInputFinal = (athleticsSkillInput.value - baseAthletics);
                        UpdateCharValues();
        
                        athleticsTextContent.textContent = "value is " + charVals.athletics;
        
                    }
        
                } else if (oldAthleticsInputFinal > 0) {
        
                    if (athleticsSkillInput.value >= 100) {
        
                        oldBaseAthletics = baseAthletics;
                        athleticsSkillInput.value = 100;
                        athleticsInputFinal = (100 - baseAthletics);
                        UpdateCharValues();
        
                        athleticsTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceAthletics = (oldBaseAthletics - baseAthletics);
        
                        athleticsInputFinal = ((athleticsSkillInput.value - oldBaseAthletics) + baseDifferenceAthletics);
                        UpdateCharValues();
        
                        athleticsSkillInput.value = charVals.athletics;
        
                        athleticsTextContent.textContent = "value is " + charVals.athletics;
        
                    }
                }
        
            } else if (baseAthletics !== oldBaseAthletics && athleticsSkillInput.value < baseAthletics) {
        
                oldBaseAthletics = baseAthletics; //possibly not 
                athleticsSkillInput.value = baseAthletics;
                athleticsInputFinal = (athleticsSkillInput.value - baseAthletics);
                UpdateCharValues();
                athleticsInputFinal = 0;
        
                athleticsTextContent.textContent = "value is " + charVals.athletics;
        
        
            }
        }
        
        function HandToHandUserInput() {
        
            handToHandSkillInput = document.querySelector("#skill-hand-to-hand");
            let handToHandTextContent = document.querySelector("#hand-to-hand-content");
        
            oldHandToHandInputFinal = handToHandInputFinal;
        
            if ((oldBaseHandToHand === baseHandToHand || oldBaseHandToHand === 0) && (handToHandSkillInput.value >= baseHandToHand)) {
        
        
                if (handToHandSkillInput.value >= 100) {
        
                    oldBaseHandToHand = baseHandToHand;
                    handToHandSkillInput.value = 100;
                    handToHandInputFinal = (100 - baseHandToHand);
                    UpdateCharValues();
        
                    handToHandTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        handToHandInputFinal = handToHandInputFinal;
        
                        UpdateCharValues();
        
                        handToHandSkillInput.value = charVals.handToHand;
        
                        handToHandTextContent.textContent = "value is " + charVals.handToHand;
        
        
        
                    } else {
        
                        handToHandInputFinal = (handToHandSkillInput.value - baseHandToHand);
                        UpdateCharValues();
        
                        handToHandSkillInput.value = charVals.handToHand;
        
                        handToHandTextContent.textContent = "value is " + charVals.handToHand;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseHandToHand === baseHandToHand && handToHandSkillInput.value < baseHandToHand) {
        
                handToHandSkillInput.value = baseHandToHand;
                handToHandInputFinal = (handToHandSkillInput.value - baseHandToHand);
                UpdateCharValues();
                oldHandToHandInputFinal = handToHandInputFinal;
        
                handToHandTextContent.textContent = "value must be above " + baseHandToHand;
        
        
            } else if (baseHandToHand !== oldBaseHandToHand && handToHandSkillInput.value >= baseHandToHand) {
        
        
                if (oldHandToHandInputFinal === 0) {
        
                    if (handToHandSkillInput.value >= 100) {
        
                        oldBaseHandToHand = baseHandToHand;
                        handToHandSkillInput.value = 100;
                        UpdateCharValues();
        
                        handToHandTextContent.textContent = "value is " + charVals.handToHand;
        
        
        
                    } else {
        
                        oldBaseHandToHand = baseHandToHand; //possibly not 
                        handToHandSkillInput.value = baseHandToHand;
                        handToHandInputFinal = (handToHandSkillInput.value - baseHandToHand);
                        UpdateCharValues();
        
                        handToHandTextContent.textContent = "value is " + charVals.handToHand;
        
                    }
        
                } else if (oldHandToHandInputFinal > 0) {
        
                    if (handToHandSkillInput.value >= 100) {
        
                        oldBaseHandToHand = baseHandToHand;
                        handToHandSkillInput.value = 100;
                        handToHandInputFinal = (100 - baseHandToHand);
                        UpdateCharValues();
        
                        handToHandTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceHandToHand = (oldBaseHandToHand - baseHandToHand);
        
                        handToHandInputFinal = ((handToHandSkillInput.value - oldBaseHandToHand) + baseDifferenceHandToHand);
                        UpdateCharValues();
        
                        handToHandSkillInput.value = charVals.handToHand;
        
                        handToHandTextContent.textContent = "value is " + charVals.handToHand;
        
                    }
                }
        
            } else if (baseHandToHand !== oldBaseHandToHand && handToHandSkillInput.value < baseHandToHand) {
        
                oldBaseHandToHand = baseHandToHand; //possibly not 
                handToHandSkillInput.value = baseHandToHand;
                handToHandInputFinal = (handToHandSkillInput.value - baseHandToHand);
                UpdateCharValues();
                handToHandInputFinal = 0;
        
                handToHandTextContent.textContent = "value is " + charVals.handToHand;
        
        
            }
        }
        
        function ShortBladeUserInput() {
        
            shortBladeSkillInput = document.querySelector("#skill-short-blade");
            let shortBladeTextContent = document.querySelector("#short-blade-content");
        
            oldShortBladeInputFinal = shortBladeInputFinal;
        
            if ((oldBaseShortBlade === baseShortBlade || oldBaseShortBlade === 0) && (shortBladeSkillInput.value >= baseShortBlade)) {
        
        
                if (shortBladeSkillInput.value >= 100) {
        
                    oldBaseShortBlade = baseShortBlade;
                    shortBladeSkillInput.value = 100;
                    shortBladeInputFinal = (100 - baseShortBlade);
                    UpdateCharValues();
        
                    shortBladeTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        shortBladeInputFinal = shortBladeInputFinal;
        
                        UpdateCharValues();
        
                        shortBladeSkillInput.value = charVals.shortBlade;
        
                        shortBladeTextContent.textContent = "value is " + charVals.shortBlade;
        
        
        
                    } else {
        
                        shortBladeInputFinal = (shortBladeSkillInput.value - baseShortBlade);
                        UpdateCharValues();
        
                        shortBladeSkillInput.value = charVals.shortBlade;
        
                        shortBladeTextContent.textContent = "value is " + charVals.shortBlade;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseShortBlade === baseShortBlade && shortBladeSkillInput.value < baseShortBlade) {
        
                shortBladeSkillInput.value = baseShortBlade;
                shortBladeInputFinal = (shortBladeSkillInput.value - baseShortBlade);
                UpdateCharValues();
                oldShortBladeInputFinal = shortBladeInputFinal;
        
                shortBladeTextContent.textContent = "value must be above " + baseShortBlade;
        
        
            } else if (baseShortBlade !== oldBaseShortBlade && shortBladeSkillInput.value >= baseShortBlade) {
        
        
                if (oldShortBladeInputFinal === 0) {
        
                    if (shortBladeSkillInput.value >= 100) {
        
                        oldBaseShortBlade = baseShortBlade;
                        shortBladeSkillInput.value = 100;
                        UpdateCharValues();
        
                        shortBladeTextContent.textContent = "value is " + charVals.shortBlade;
        
        
        
                    } else {
        
                        oldBaseShortBlade = baseShortBlade; //possibly not 
                        shortBladeSkillInput.value = baseShortBlade;
                        shortBladeInputFinal = (shortBladeSkillInput.value - baseShortBlade);
                        UpdateCharValues();
        
                        shortBladeTextContent.textContent = "value is " + charVals.shortBlade;
        
                    }
        
                } else if (oldShortBladeInputFinal > 0) {
        
                    if (shortBladeSkillInput.value >= 100) {
        
                        oldBaseShortBlade = baseShortBlade;
                        shortBladeSkillInput.value = 100;
                        shortBladeInputFinal = (100 - baseShortBlade);
                        UpdateCharValues();
        
                        shortBladeTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceShortBlade = (oldBaseShortBlade - baseShortBlade);
        
                        shortBladeInputFinal = ((shortBladeSkillInput.value - oldBaseShortBlade) + baseDifferenceShortBlade);
                        UpdateCharValues();
        
                        shortBladeSkillInput.value = charVals.shortBlade;
        
                        shortBladeTextContent.textContent = "value is " + charVals.shortBlade;
        
                    }
                }
        
            } else if (baseShortBlade !== oldBaseShortBlade && shortBladeSkillInput.value < baseShortBlade) {
        
                oldBaseShortBlade = baseShortBlade; //possibly not 
                shortBladeSkillInput.value = baseShortBlade;
                shortBladeInputFinal = (shortBladeSkillInput.value - baseShortBlade);
                UpdateCharValues();
                shortBladeInputFinal = 0;
        
                shortBladeTextContent.textContent = "value is " + charVals.shortBlade;
        
        
            }
        }
        
        
        function UnarmoredUserInput() {
        
            unarmoredSkillInput = document.querySelector("#skill-unarmored");
            let unarmoredTextContent = document.querySelector("#unarmored-content");
        
            oldUnarmoredInputFinal = unarmoredInputFinal;
        
            if ((oldBaseUnarmored === baseUnarmored || oldBaseUnarmored === 0) && (unarmoredSkillInput.value >= baseUnarmored)) {
        
        
                if (unarmoredSkillInput.value >= 100) {
        
                    oldBaseUnarmored = baseUnarmored;
                    unarmoredSkillInput.value = 100;
                    unarmoredInputFinal = (100 - baseUnarmored);
                    UpdateCharValues();
        
                    unarmoredTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        unarmoredInputFinal = unarmoredInputFinal;
        
                        UpdateCharValues();
        
                        unarmoredSkillInput.value = charVals.unarmored;
        
                        unarmoredTextContent.textContent = "value is " + charVals.unarmored;
        
        
        
                    } else {
        
                        unarmoredInputFinal = (unarmoredSkillInput.value - baseUnarmored);
                        UpdateCharValues();
        
                        unarmoredSkillInput.value = charVals.unarmored;
        
                        unarmoredTextContent.textContent = "value is " + charVals.unarmored;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseUnarmored === baseUnarmored && unarmoredSkillInput.value < baseUnarmored) {
        
                unarmoredSkillInput.value = baseUnarmored;
                unarmoredInputFinal = (unarmoredSkillInput.value - baseUnarmored);
                UpdateCharValues();
                oldUnarmoredInputFinal = unarmoredInputFinal;
        
                unarmoredTextContent.textContent = "value must be above " + baseUnarmored;
        
        
            } else if (baseUnarmored !== oldBaseUnarmored && unarmoredSkillInput.value >= baseUnarmored) {
        
        
                if (oldUnarmoredInputFinal === 0) {
        
                    if (unarmoredSkillInput.value >= 100) {
        
                        oldBaseUnarmored = baseUnarmored;
                        unarmoredSkillInput.value = 100;
                        UpdateCharValues();
        
                        unarmoredTextContent.textContent = "value is " + charVals.unarmored;
        
        
                    } else {
        
                        oldBaseUnarmored = baseUnarmored; //possibly not 
                        unarmoredSkillInput.value = baseUnarmored;
                        unarmoredInputFinal = (unarmoredSkillInput.value - baseUnarmored);
                        UpdateCharValues();
        
                        unarmoredTextContent.textContent = "value is " + charVals.unarmored;
        
                    }
        
                } else if (oldUnarmoredInputFinal > 0) {
        
                    if (unarmoredSkillInput.value >= 100) {
        
                        oldBaseUnarmored = baseUnarmored;
                        unarmoredSkillInput.value = 100;
                        unarmoredInputFinal = (100 - baseUnarmored);
                        UpdateCharValues();
        
                        unarmoredTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceUnarmored = (oldBaseUnarmored - baseUnarmored);
        
                        unarmoredInputFinal = ((unarmoredSkillInput.value - oldBaseUnarmored) + baseDifferenceUnarmored);
                        UpdateCharValues();
        
                        unarmoredSkillInput.value = charVals.unarmored;
        
                        unarmoredTextContent.textContent = "value is " + charVals.unarmored;
        
                    }
                }
        
            } else if (baseUnarmored !== oldBaseUnarmored && unarmoredSkillInput.value < baseUnarmored) {
        
                oldBaseUnarmored = baseUnarmored; //possibly not 
                unarmoredSkillInput.value = baseUnarmored;
                unarmoredInputFinal = (unarmoredSkillInput.value - baseUnarmored);
                UpdateCharValues();
                unarmoredInputFinal = 0;
        
                unarmoredTextContent.textContent = "value is " + charVals.unarmored;
        
        
            }
        }
        
        
        //------------------------------------------------------------------------------``
        //-----PERSONALITY----------------------------------------------------------------        
        
        //Personality attribute input and minor skills [illusion, mercantile, speechcraft]-    
        
        //set form inputs to variables
        
        let personalityAttributeInputFinal = 0;
        let oldPersonalityAttributeInputFinal = 0;
        
        
        let illusionInputFinal = 0;
        let oldIllusionInputFinal = 0;
        
        
        let mercantileInputFinal = 0;
        let oldMercantileInputFinal = 0;
        
        
        let speechcraftInputFinal = 0;
        let oldSpeechcraftInputFinal = 0;
        
        
        
        
        //for setting textcontent of p id to final value of user inputted data 
        
        
        
        
        function PersonalityUserInput() {
        
            personalityAttributeInput = document.querySelector("#attribute-personality");
            let personalityTextContent = document.querySelector("#personality-content");
        
            oldPersonalityAttributeInputFinal = personalityAttributeInputFinal;
        
        
            if ((oldBasePersonality === basePersonality || oldBasePersonality === 0) && (personalityAttributeInput.value >= basePersonality)) { //check base = previous base and if value more than base or equal (attribute value can not go below its base value)
        
        
                personalityAttributeInputFinal = (personalityAttributeInput.value - basePersonality); //remove base from input as base is added on in CharValuesUpdate();
                UpdateCharValues();
        
                personalityAttributeInput.value = charVals.personality; //set as correct amount
        
                personalityTextContent.textContent = "value is " + charVals.personality;
        
        
            } else if (oldBasePersonality === basePersonality && personalityAttributeInput.value < basePersonality) { //if base values are equal(base value hasnt been changed) and value less than base
        
        
                personalityAttributeInput.value = basePersonality; //set value as base
                personalityAttributeInputFinal = (personalityAttributeInput.value - basePersonality); //this will set to 0 so UpdateCharValues() will have 0 user input 
                UpdateCharValues();
                oldPersonalityAttributeInputFinal = personalityAttributeInputFinal; //registers oldEnduranceInputFinal as 0 so if later call occurs when base values have changed knows to 
                //change value to new base value if no further user input occurs 
                personalityTextContent.textContent = "value must be above " + basePersonality;
        
            } else if (basePersonality !== oldBasePersonality && personalityAttributeInput.value >= basePersonality) { //if base value has been changed and input is more than or equal to base 
        
                if (oldPersonalityAttributeInputFinal === 0) { //if no user input has occured 
        
                    oldBasePersonality = basePersonality; //set to base and updated as base value
                    personalityAttributeInput.value = basePersonality;
                    personalityAttributeFinalValue = (personalityAttributeInput.value - basePersonality);
                    UpdateCharValues();
        
                    personalityTextContent.textContent = "value must be above " + basePersonality;
        
        
                } else if (oldPersonalityAttributeInputFinal > 0) { //when user input has occurred 
        
                    var baseDifferencePersonality = (oldBasePersonality - basePersonality); //detectes differnce between base values 
        
                    personalityAttributeInputFinal = ((personalityAttributeInput.value - oldBasePersonality) + baseDifferencePersonality); //difference is added on to make final value reflect correct input with changed base value 
                    UpdateCharValues();
        
                    personalityAttributeInput.value = charVals.personality;
        
                    personalityTextContent.textContent = "value is " + charVals.personality;
        
                }
        
            } else if (basePersonality !== oldBasePersonality && personalityAttributeInput.value < basePersonality) { //if base has been changed and input less than base, sets values to base and inputFinal to 0 
        
                oldBasePersonality = basePersonality;
                personalityAttributeInput.value = basePersonality;
                personalityAttributeInputFinal = (personalityAttributeInput.value - basePersonality);
                UpdateCharValues();
        
                personalityTextContent.textContent = "value is " + basePersonality;
        
            }
        
        }
        
        
        
        function IllusionUserInput() {
        
            illusionSkillInput = document.querySelector("#skill-illusion");
            let illusionTextContent = document.querySelector("#illusion-content");
        
            oldIllusionInputFinal = illusionInputFinal;
        
            if ((oldBaseIllusion === baseIllusion || oldBaseIllusion === 0) && (illusionSkillInput.value >= baseIllusion)) {
        
        
                if (illusionSkillInput.value >= 100) {
        
                    oldBaseIllusion = baseIllusion;
                    illusionSkillInput.value = 100;
                    illusionInputFinal = (100 - baseIllusion);
                    UpdateCharValues();
        
                    illusionTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        illusionInputFinal = illusionInputFinal;
        
                        UpdateCharValues();
        
                        illusionSkillInput.value = charVals.illusion;
        
                        illusionTextContent.textContent = "value is " + charVals.illusion;
        
        
        
                    } else {
        
                        illusionInputFinal = (illusionSkillInput.value - baseIllusion);
                        UpdateCharValues();
        
                        illusionSkillInput.value = charVals.illusion;
        
                        illusionTextContent.textContent = "value is " + charVals.illusion;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseIllusion === baseIllusion && illusionSkillInput.value < baseIllusion) {
        
                illusionSkillInput.value = baseIllusion;
                illusionInputFinal = (illusionSkillInput.value - baseIllusion);
                UpdateCharValues();
                oldIllusionInputFinal = illusionInputFinal;
        
                illusionTextContent.textContent = "value must be above " + baseIllusion;
        
        
            } else if (baseIllusion !== oldBaseIllusion && illusionSkillInput.value >= baseIllusion) {
        
        
                if (oldIllusionInputFinal === 0) {
        
                    if (illusionSkillInput.value >= 100) {
        
                        oldBaseIllusion = baseIllusion;
                        illusionSkillInput.value = 100;
                        UpdateCharValues();
        
                        illusionTextContent.textContent = "value is " + charVals.illusion;
        
        
        
                    } else {
        
                        oldBaseIllusion = baseIllusion; //possibly not 
                        illusionSkillInput.value = baseIllusion;
                        illusionInputFinal = (illusionSkillInput.value - baseIllusion);
                        UpdateCharValues();
        
                        illusionTextContent.textContent = "value is " + charVals.illusion;
        
                    }
        
                } else if (oldIllusionInputFinal > 0) {
        
                    if (illusionSkillInput.value >= 100) {
        
                        oldBaseIllusion = baseIllusion;
                        illusionSkillInput.value = 100;
                        illusionInputFinal = (100 - baseIllusion);
                        UpdateCharValues();
        
                        illusionTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceIllusion = (oldBaseIllusion - baseIllusion);
        
                        illusionInputFinal = ((illusionSkillInput.value - oldBaseIllusion) + baseDifferenceIllusion);
                        UpdateCharValues();
        
                        illusionSkillInput.value = charVals.illusion;
        
                        illusionTextContent.textContent = "value is " + charVals.illusion;
        
                    }
                }
        
            } else if (baseIllusion !== oldBaseIllusion && illusionSkillInput.value < baseIllusion) {
        
                oldBaseIllusion = baseIllusion; //possibly not 
                illusionSkillInput.value = baseIllusion;
                illusionInputFinal = (illusionSkillInput.value - baseIllusion);
                UpdateCharValues();
                illusionInputFinal = 0;
        
                illusionTextContent.textContent = "value is " + charVals.illusion;
        
        
            }
        }
        
        function MercantileUserInput() {
        
            mercantileSkillInput = document.querySelector("#skill-mercantile");
            let mercantileTextContent = document.querySelector("#mercantile-content");
        
            oldMercantileInputFinal = mercantileInputFinal;
        
            if ((oldBaseMercantile === baseMercantile || oldBaseMercantile === 0) && (mercantileSkillInput.value >= baseMercantile)) {
        
        
                if (mercantileSkillInput.value >= 100) {
        
                    oldBaseMercantile = baseMercantile;
                    mercantileSkillInput.value = 100;
                    mercantileInputFinal = (100 - baseMercantile);
                    UpdateCharValues();
        
                    mercantileTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        mercantileInputFinal = mercantileInputFinal;
        
                        UpdateCharValues();
        
                        mercantileSkillInput.value = charVals.mercantile;
        
                        mercantileTextContent.textContent = "value is " + charVals.mercantile;
        
        
        
                    } else {
        
                        mercantileInputFinal = (mercantileSkillInput.value - baseMercantile);
                        UpdateCharValues();
        
                        mercantileSkillInput.value = charVals.mercantile;
        
                        mercantileTextContent.textContent = "value is " + charVals.mercantile;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseMercantile === baseMercantile && mercantileSkillInput.value < baseMercantile) {
        
                mercantileSkillInput.value = baseMercantile;
                mercantileInputFinal = (mercantileSkillInput.value - baseMercantile);
                UpdateCharValues();
                oldMercantileInputFinal = mercantileInputFinal;
        
                mercantileTextContent.textContent = "value must be above " + baseMercantile;
        
        
            } else if (baseMercantile !== oldBaseMercantile && mercantileSkillInput.value >= baseMercantile) {
        
        
                if (oldMercantileInputFinal === 0) {
        
                    if (mercantileSkillInput.value >= 100) {
        
                        oldBaseMercantile = baseMercantile;
                        mercantileSkillInput.value = 100;
                        UpdateCharValues();
        
                        mercantileTextContent.textContent = "value is " + charVals.mercantile;
        
        
        
                    } else {
        
                        oldBaseMercantile = baseMercantile; //possibly not 
                        mercantileSkillInput.value = baseMercantile;
                        mercantileInputFinal = (mercantileSkillInput.value - baseMercantile);
                        UpdateCharValues();
        
                        mercantileTextContent.textContent = "value is " + charVals.mercantile;
        
                    }
        
                } else if (oldMercantileInputFinal > 0) {
        
                    if (mercantileSkillInput.value >= 100) {
        
                        oldBaseMercantile = baseMercantile;
                        mercantileSkillInput.value = 100;
                        mercantileInputFinal = (100 - baseMercantile);
                        UpdateCharValues();
        
                        mercantileTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceMercantile = (oldBaseMercantile - baseMercantile);
        
                        mercantileInputFinal = ((mercantileSkillInput.value - oldBaseMercantile) + baseDifferenceMercantile);
                        UpdateCharValues();
        
                        mercantileSkillInput.value = charVals.mercantile;
        
                        mercantileTextContent.textContent = "value is " + charVals.mercantile;
        
                    }
                }
        
            } else if (baseMercantile !== oldBaseMercantile && mercantileSkillInput.value < baseMercantile) {
        
                oldBaseMercantile = baseMercantile; //possibly not 
                mercantileSkillInput.value = baseMercantile;
                mercantileInputFinal = (mercantileSkillInput.value - baseMercantile);
                UpdateCharValues();
                mercantileInputFinal = 0;
        
                mercantileTextContent.textContent = "value is " + charVals.mercantile;
        
        
            }
        }
        
        
        function SpeechcraftUserInput() {
        
            speechcraftSkillInput = document.querySelector("#skill-speechcraft");
            let speechcraftTextContent = document.querySelector("#speechcraft-content");
        
            oldSpeechcraftInputFinal = speechcraftInputFinal;
        
            if ((oldBaseSpeechcraft === baseSpeechcraft || oldBaseSpeechcraft === 0) && (speechcraftSkillInput.value >= baseSpeechcraft)) {
        
        
                if (speechcraftSkillInput.value >= 100) {
        
                    oldBaseSpeechcraft = baseSpeechcraft;
                    speechcraftSkillInput.value = 100;
                    speechcraftInputFinal = (100 - baseSpeechcraft);
                    UpdateCharValues();
        
                    speechcraftTextContent.textContent = "value can not be above " + 100;
        
        
                } else {
        
                    if (classSelect === 0 && checkLoad === 1) {
        
                        speechcraftInputFinal = speechcraftInputFinal;
        
                        UpdateCharValues();
        
                        speechcraftSkillInput.value = charVals.speechcraft;
        
                        speechcraftTextContent.textContent = "value is " + charVals.speechcraft;
        
        
        
                    } else {
        
                        speechcraftInputFinal = (speechcraftSkillInput.value - baseSpeechcraft);
                        UpdateCharValues();
        
                        speechcraftSkillInput.value = charVals.speechcraft;
        
                        speechcraftTextContent.textContent = "value is " + charVals.speechcraft;
        
        
        
                    }
        
        
        
                }
        
            } else if (oldBaseSpeechcraft === baseSpeechcraft && speechcraftSkillInput.value < baseSpeechcraft) {
        
                speechcraftSkillInput.value = baseSpeechcraft;
                speechcraftInputFinal = (speechcraftSkillInput.value - baseSpeechcraft);
                UpdateCharValues();
                oldSpeechcraftInputFinal = speechcraftInputFinal;
        
                speechcraftTextContent.textContent = "value must be above " + baseSpeechcraft;
        
        
            } else if (baseSpeechcraft !== oldBaseSpeechcraft && speechcraftSkillInput.value >= baseSpeechcraft) {
        
        
                if (oldSpeechcraftInputFinal === 0) {
        
                    if (speechcraftSkillInput.value >= 100) {
        
                        oldBaseSpeechcraft = baseSpeechcraft;
                        speechcraftSkillInput.value = 100;
                        UpdateCharValues();
        
                        speechcraftTextContent.textContent = "value is " + charVals.speechcraft;
        
        
        
                    } else {
        
                        oldBaseSpeechcraft = baseSpeechcraft; //possibly not 
                        speechcraftSkillInput.value = baseSpeechcraft;
                        speechcraftInputFinal = (speechcraftSkillInput.value - baseSpeechcraft);
                        UpdateCharValues();
        
                        speechcraftTextContent.textContent = "value is " + charVals.speechcraft;
        
                    }
        
                } else if (oldSpeechcraftInputFinal > 0) {
        
                    if (speechcraftSkillInput.value >= 100) {
        
                        oldBaseSpeechcraft = baseSpeechcraft;
                        speechcraftSkillInput.value = 100;
                        speechcraftInputFinal = (100 - baseSpeechcraft);
                        UpdateCharValues();
        
                        speechcraftTextContent.textContent = "value can not be above " + 100;
        
                    } else {
        
                        var baseDifferenceSpeechcraft = (oldBaseSpeechcraft - baseSpeechcraft);
        
                        speechcraftInputFinal = ((speechcraftSkillInput.value - oldBaseSpeechcraft) + baseDifferenceSpeechcraft);
                        UpdateCharValues();
        
                        speechcraftSkillInput.value = charVals.speechcraft;
        
                        speechcraftTextContent.textContent = "value is " + charVals.speechcraft;
        
                    }
                }
        
            } else if (baseSpeechcraft !== oldBaseSpeechcraft && speechcraftSkillInput.value < baseSpeechcraft) {
        
        
                oldBaseSpeechcraft = baseSpeechcraft; //possibly not 
                speechcraftSkillInput.value = baseSpeechcraft;
                speechcraftInputFinal = (speechcraftSkillInput.value - baseSpeechcraft);
                UpdateCharValues();
                speechcraftInputFinal = 0;
        
                speechcraftTextContent.textContent = "value is " + charVals.speechcraft;
        
        
            }
        }
        
        //------------------------------------------------------------------------------``
        //-----LUCK----------------------------------------------------------------        
        
        //Luck attribute input---
        
        //set form inputs to variables
        
        
        let luckAttributeInputFinal = 0;
        let oldLuckAttributeInputFinal = 0;
        
        
        
        
        //for setting textcontent of p id to final value of user inputted data 
        
        
        
        
        function LuckUserInput() {
        
            luckAttributeInput = document.querySelector("#attribute-luck");
            let luckTextContent = document.querySelector("#luck-content");
        
            oldLuckAttributeInputFinal = luckAttributeInputFinal;
        
        
            if ((oldBaseLuck === baseLuck || oldBaseLuck === 0) && (luckAttributeInput.value >= baseLuck)) { //check base = previous base and if value more than base or equal (attribute value can not go below its base value)
        
        
                luckAttributeInputFinal = (luckAttributeInput.value - baseLuck); //remove base from input as base is added on in CharValuesUpdate();
                UpdateCharValues();
        
                luckAttributeInput.value = charVals.luck; //set as correct amount
        
                luckTextContent.textContent = "value is " + charVals.luck;
        
        
            } else if (oldBaseLuck === baseLuck && luckAttributeInput.value < baseLuck) { //if base values are equal(base value hasnt been changed) and value less than base
        
        
                luckAttributeInput.value = baseLuck; //set value as base
                luckAttributeInputFinal = (luckAttributeInput.value - baseLuck); //this will set to 0 so UpdateCharValues() will have 0 user input 
                UpdateCharValues();
                oldLuckAttributeInputFinal = luckAttributeInputFinal; //registers oldEnduranceInputFinal as 0 so if later call occurs when base values have changed knows to 
                //change value to new base value if no further user input occurs 
                luckTextContent.textContent = "value must be above " + baseLuck;
        
            } else if (baseLuck !== oldBaseLuck && luckAttributeInput.value >= baseLuck) { //if base value has been changed and input is more than or equal to base 
        
                if (oldLuckAttributeInputFinal === 0) { //if no user input has occured 
        
                    oldBaseLuck = baseLuck; //set to base and updated as base value
                    luckAttributeInput.value = baseLuck;
                    luckAttributeFinalValue = (luckAttributeInput.value - baseLuck);
                    UpdateCharValues();
        
                    luckTextContent.textContent = "value must be above " + baseLuck;
        
        
                } else if (oldLuckAttributeInputFinal > 0) { //when user input has occurred 
        
                    var baseDifferenceLuck = (oldBaseLuck - baseLuck); //detectes differnce between base values 
        
                    luckAttributeInputFinal = ((luckAttributeInput.value - oldBaseLuck) + baseDifferenceLuck); //difference is added on to make final value reflect correct input with changed base value 
                    UpdateCharValues();
        
                    luckAttributeInput.value = charVals.luck;
        
                    luckTextContent.textContent = "value is " + charVals.luck;
        
                }
        
            } else if (baseLuck !== oldBaseLuck && luckAttributeInput.value < baseLuck) { //if base has been changed and input less than base, sets values to base and inputFinal to 0 
        
                oldBaseLuck = baseLuck;
                luckAttributeInput.value = baseLuck;
                luckAttributeInputFinal = (luckAttributeInput.value - baseLuck);
                UpdateCharValues();
        
                luckTextContent.textContent = "value is " + baseLuck;
        
            }
        
        }
        
        
        //------------SERVER-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
        //sets variables for server use 
        
        //let characterName = "";
        
        let charTable = "";
        let charColumn = "";
        
        let char = "";
        
        //character names for link to character table 
        let char1 = "";
        let char2 = "";
        let char3 = "";
        let char4 = "";
        let char5 = "";
        let char6 = "";
        let char7 = "";
        let char8 = "";
        
        let username = "";
        let password = "";
        let acc_id = 0;
        
        
        
        
        //sub-main
        let encumbrance = 0; //same for this 
        
        
        
        
        //triggers first page load change, other triggers left as somments for testing purposes
        
        //GuestCalcPage();
        //UserCalcPage();
        //UserLoginPage();
        HomePage();
        
        
        
        
        //--------------[LOGIN FUNCTION]-----------------------------------------------------------------------------------
        
        
        //login account funciton 
        
        function LoginAccount() {
        
            event.preventDefault();
        
            let usernameLogin;
            let passwordLogin;
        
        
            if (password === "") { //checks if passwords are from initial login or from create account login 
        
                usernameLogin = document.querySelector("#guest-sign-in-username").value;
                passwordLogin = document.querySelector("#guest-sign-in-password").value;
        
            } else {
        
                usernameLogin = username;
                passwordLogin = password;
        
            }
        
        
        
        
            if (/\s/g.test(usernameLogin)) { //detects whitespace in username
        
                usernameLogin = usernameLogin.replace(/\s/g, '');
                document.querySelector("#guest-sign-in-username").value = usernameLogin;
        
            } else {
        
        
                if (/\s/g.test(passwordLogin)) {
        
                    passwordLogin = passwordLogin.replace(/\s/g, 'o'); //replaces whitespace in passwords with 'o' to make it hashable 
        
                }
        
        
                var submitLogin = "&login=Submit"; //end of url string containing submit 
        
        
        
        
                var inpLogin = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
        
                    usernameLogin: usernameLogin,
                    passwordLogin: passwordLogin,
        
                });
        
        
        
                var inpFinalLogin = inpLogin.toString(); //finalises string 
                var dataLogin = inpFinalLogin + submitLogin;
        
        
                var xmlLogin = new XMLHttpRequest();
                var urlLogin = "https://jg1044.brighton.domains/MorrowindCalculator/account-api.php";
        
                xmlLogin.open("POST", urlLogin, true);
                xmlLogin.setRequestHeader("content-type",
                    "application/x-www-form-urlencoded");
        
                xmlLogin.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
        
                        var loginResponseData = JSON.parse(this.response);
        
        
        
                        //retrieves values and sets to appropriate variables 
        
        
                        acc_id = loginResponseData[0].acc_id;
                        username = loginResponseData[0].username;
                        password = loginResponseData[0].password;
                        email = loginResponseData[0].email;
                        char1 = loginResponseData[0].char1;
                        char2 = loginResponseData[0].char2;
                        char3 = loginResponseData[0].char3;
                        char4 = loginResponseData[0].char4;
                        char5 = loginResponseData[0].char5;
                        char6 = loginResponseData[0].char6;
                        char7 = loginResponseData[0].char7;
                        char8 = loginResponseData[0].char8;
        
        
                        UserLoginPage(); //triggers login page loading 
        
                    } else if ((this.readyState == 4 && this.status == 400) && (usernameLogin === "" || passwordLogin === "")) { //sets text contents of specific errors with logging in based on http responce receieved 
        
                        const signInDetailTxt = document.querySelector("#sign-in-detail-txt");
                        signInDetailTxt.textContent = "Missing input value";
        
                    } else if ((this.readyState == 4 && this.status == 403) && (usernameLogin !== "" && passwordLogin !== "")) {
        
                        const signInDetailTxt = document.querySelector("#sign-in-detail-txt");
                        signInDetailTxt.textContent = "Password is incorrect";
        
        
                    } else if ((this.readyState == 4 && this.status == 204) && (usernameLogin !== "" && passwordLogin !== "")) {
        
                        const signInDetailTxt = document.querySelector("#sign-in-detail-txt");
                        signInDetailTxt.textContent = "Username is not registered";
        
                    } else if (this.readyState == 4 && this.status == 500) {
        
                        const signInDetailTxt = document.querySelector("#sign-in-detail-txt");
                        signInDetailTxt.textContent = "Connection to database could not be established";
        
                    }
        
        
                };
        
                xmlLogin.send(dataLogin); //send data 
        
            }
        
        }
        
        
        
        //------------[DELETE CHARACTER FUNCTION]-----------------------------------------------
        
        
        //for deleting users character 
        
        function DeleteCharacter() {
        
            var submitDEL = "&delchar=submit"; //all temp 
        
        
        
        
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
        
                accountID: acc_id,
                table: charTable,
                column: charColumn
        
        
            });
        
        
        
        
            var inpFinal = inpNext.toString();
            var data = inpFinal + submitDEL;
        
            var xml = new XMLHttpRequest();
            var url = "https://jg1044.brighton.domains/MorrowindCalculator/account-api.php";
        
            xml.open("POST", url, true);
            xml.setRequestHeader("content-type",
                "application/x-www-form-urlencoded");
        
            xml.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
        
        
                    RetrieveLoginInfo(); //retrieve login infor called as need to update login page with new character name after delete 
        
        
        
                } else if (this.readyState == 4 && this.status == 401) {
                    console.log("account not found");
                    console.log(xml.status);
                }
        
            };
        
            xml.send(data);
        
        
        
        
        }
        
        
        //character load functions-----
        
        //a future iteration of project could likely condense all 8 of these functions into one interchangeable function 
        
        //-------CHARACTER1 LOAD-------------------------------------------
        
        
        function Character1Chosen() {
        
        
            event.preventDefault();
        
            //sets variable choices for table and column to select from within the database 
            charTable = "CHARACTER1";
            charColumn = "CHAR1";
            char = char1;
        
        
            //set value of hidden input to account id 
            let c1a = document.querySelector("#acc_id").value = acc_id;
        
        
        
            var xmlhttp = new XMLHttpRequest();
            var endpoint = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
            var inp1 = acc_id;
            var inp2 = char1;
        
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
                acc_id: inp1,
                char1GET: inp2
            });
        
        
        
            var end = "&char1=Submit";
            var query = inpNext.toString();
            var url = endpoint + query + end;
        
        
        
        
            xmlhttp.open("GET", url, true);
            xmlhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
        
                    var responseDataCHAR1 = JSON.parse(this.response);
        
        
        
        
                    UserCalcPage(); //user calc page created before variables retrieved 
        
        
                    //sets all variables 
        
                    const characterNameInput = document.querySelector("#characterNameInput");
        
                    char1 = responseDataCHAR1[0].char1;
        
                    characterNameInput.value = char1;
                    SetCharName();
        
                    charVals.health = responseDataCHAR1[0].health;
                    charVals.magicka = responseDataCHAR1[0].magicka;
                    charVals.fatigue = responseDataCHAR1[0].fatigue;
        
                    //sub-main
                    charVals.encumbrance = responseDataCHAR1[0].encumbrance;
        
                    //attributes 
                    enduranceAttributeInputFinal = responseDataCHAR1[0].endurance;
                    strengthAttributeInputFinal = responseDataCHAR1[0].strength;
                    intelligenceAttributeInputFinal = responseDataCHAR1[0].intelligence;
                    willpowerAttributeInputFinal = responseDataCHAR1[0].willpower;
                    agilityAttributeInputFinal = responseDataCHAR1[0].agility;
                    speedAttributeInputFinal = responseDataCHAR1[0].speed;
                    personalityAttributeInputFinal = responseDataCHAR1[0].personality;
                    luckAttributeInputFinal = responseDataCHAR1[0].luck;
        
                    charVals.magickaMltiplierBonus = responseDataCHAR1[0].magickaMultiplierBonus; // <-- THIS IS VERY MUCH SUBJECT TO CHANGE;
                    //skills
                    //endurance 
                    heavyArmorInputFinal = responseDataCHAR1[0].heavyArmor;
                    mediumArmorInputFinal = responseDataCHAR1[0].mediumArmor;
                    spearInputFinal = responseDataCHAR1[0].spear;
                    //strength 
                    acrobaticsInputFinal = responseDataCHAR1[0].acrobatics;
                    armorerInputFinal = responseDataCHAR1[0].armorer;
                    axeInputFinal = responseDataCHAR1[0].axe;
                    bluntWeaponInputFinal = responseDataCHAR1[0].bluntWeapon;
                    longBladeInputFinal = responseDataCHAR1[0].longBlade;
        
                    //agility 
                    blockInputFinal = responseDataCHAR1[0].block;
                    lightArmorInputFinal = responseDataCHAR1[0].lightArmor;
                    marksmanInputFinal = responseDataCHAR1[0].marksman;
                    sneakInputFinal = responseDataCHAR1[0].sneak;
                    //speed 
                    athleticsInputFinal = responseDataCHAR1[0].athletics;
                    handToHandInputFinal = responseDataCHAR1[0].handToHand;
                    shortBladeInputFinal = responseDataCHAR1[0].shortBlade;
                    unarmoredInputFinal = responseDataCHAR1[0].unarmored;
                    //personality
                    illusionInputFinal = responseDataCHAR1[0].illusion;
                    mercantileInputFinal = responseDataCHAR1[0].mercantile;
                    speechcraftInputFinal = responseDataCHAR1[0].speechcraft;
                    //intelligence
                    alchemyInputFinal = responseDataCHAR1[0].alchemy;
                    conjurationInputFinal = responseDataCHAR1[0].conjuration;
                    enchantInputFinal = responseDataCHAR1[0].enchant;
                    securityInputFinal = responseDataCHAR1[0].xsecurity;
                    //willpower
                    alterationInputFinal = responseDataCHAR1[0].alteration;
                    destructionInputFinal = responseDataCHAR1[0].destruction;
                    mysticismInputFinal = responseDataCHAR1[0].mysticism;
                    restorationInputFinal = responseDataCHAR1[0].restoration;
        
                    //gender / race
                    charVals.gender = responseDataCHAR1[0].gender;
                    charVals.race = responseDataCHAR1[0].race;
        
        
                    charVals.birthsign = responseDataCHAR1[0].birthsign;
        
                    classSelect = responseDataCHAR1[0].class;
        
                    charVals.xclass = classSelect;
        
        
                    charVals.resistMagicka = responseDataCHAR1[0].resistMagicka;
                    charVals.resistFire = responseDataCHAR1[0].resistFire;
                    charVals.resistFrost = responseDataCHAR1[0].resistFrost;
                    charVals.resistShock = responseDataCHAR1[0].resistShock;
                    charVals.resistPoison = responseDataCHAR1[0].resistPoison;
                    charVals.resistCommonDisease = responseDataCHAR1[0].resistCommonDisease;
        
        
                    checkLoad = 1; //sets load as active  
        
                    LoadDetected(); //triggers loading sequence 
        
        
                } else if (this.readyState == 4 && this.status == 204) {
        
                    console.log("ERROR: VALUES NOT RETRIEVED");
                    throw "error";
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
        
            };
            xmlhttp.send();
        
        
        
        }
        
        //-------CHARACTER2 LOAD-------------------------------------------
        
        function Character2Chosen() {
        
        
        
        
            event.preventDefault();
        
            charTable = "CHARACTER2";
            charColumn = "CHAR2";
            char = char2;
        
        
        
        
            var xmlhttp = new XMLHttpRequest();
            var endpoint = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
            var inp1 = acc_id;
            var inp2 = char2;
        
        
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
                acc_id: inp1,
                char2GET: inp2
            });
        
        
            var end = "&char2=Submit";
            var query = inpNext.toString();
            var url = endpoint + query + end;
        
            xmlhttp.open("GET", url, true);
            xmlhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
        
                    var responseDataCHAR2 = JSON.parse(this.response);
        
        
        
                    UserCalcPage();
        
                    const characterNameInput = document.querySelector("#characterNameInput");
        
                    char2 = responseDataCHAR2[0].char2;
        
                    characterNameInput.value = char2;
                    SetCharName();
        
                    charVals.health = responseDataCHAR2[0].health;
                    charVals.magicka = responseDataCHAR2[0].magicka;
                    charVals.fatigue = responseDataCHAR2[0].fatigue;
        
                    //sub-main
                    charVals.encumbrance = responseDataCHAR2[0].encumbrance;
        
                    //attributes 
                    enduranceAttributeInputFinal = responseDataCHAR2[0].endurance;
                    strengthAttributeInputFinal = responseDataCHAR2[0].strength;
                    intelligenceAttributeInputFinal = responseDataCHAR2[0].intelligence;
                    willpowerAttributeInputFinal = responseDataCHAR2[0].willpower;
                    agilityAttributeInputFinal = responseDataCHAR2[0].agility;
                    speedAttributeInputFinal = responseDataCHAR2[0].speed;
                    personalityAttributeInputFinal = responseDataCHAR2[0].personality;
                    luckAttributeInputFinal = responseDataCHAR2[0].luck;
        
        
                    charVals.magickaMltiplierBonus = responseDataCHAR2[0].magickaMultiplierBonus;
                    //skills
                    //endurance 
                    heavyArmorInputFinal = responseDataCHAR2[0].heavyArmor;
                    mediumArmorInputFinal = responseDataCHAR2[0].mediumArmor;
                    spearInputFinal = responseDataCHAR2[0].spear;
                    //strength 
                    acrobaticsInputFinal = responseDataCHAR2[0].acrobatics;
                    armorerInputFinal = responseDataCHAR2[0].armorer;
                    axeInputFinal = responseDataCHAR2[0].axe;
                    bluntWeaponInputFinal = responseDataCHAR2[0].bluntWeapon;
                    longBladeInputFinal = responseDataCHAR2[0].longBlade;
        
                    //agility 
                    blockInputFinal = responseDataCHAR2[0].block;
                    lightArmorInputFinal = responseDataCHAR2[0].lightArmor;
                    marksmanInputFinal = responseDataCHAR2[0].marksman;
                    sneakInputFinal = responseDataCHAR2[0].sneak;
                    //speed 
                    athleticsInputFinal = responseDataCHAR2[0].athletics;
                    handToHandInputFinal = responseDataCHAR2[0].handToHand;
                    shortBladeInputFinal = responseDataCHAR2[0].shortBlade;
                    unarmoredInputFinal = responseDataCHAR2[0].unarmored;
                    //personality
                    illusionInputFinal = responseDataCHAR2[0].illusion;
                    mercantileInputFinal = responseDataCHAR2[0].mercantile;
                    speechcraftInputFinal = responseDataCHAR2[0].speechcraft;
                    //intelligence
                    alchemyInputFinal = responseDataCHAR2[0].alchemy;
                    conjurationInputFinal = responseDataCHAR2[0].conjuration;
                    enchantInputFinal = responseDataCHAR2[0].enchant;
                    securityInputFinal = responseDataCHAR2[0].xsecurity;
                    //willpower
                    alterationInputFinal = responseDataCHAR2[0].alteration;
                    destructionInputFinal = responseDataCHAR2[0].destruction;
                    mysticismInputFinal = responseDataCHAR2[0].mysticism;
                    restorationInputFinal = responseDataCHAR2[0].restoration;
        
        
        
                    charVals.gender = responseDataCHAR2[0].gender;
                    charVals.race = responseDataCHAR2[0].race;
        
        
                    charVals.birthsign = responseDataCHAR2[0].birthsign;
        
                    classSelect = responseDataCHAR2[0].class;
        
                    charVals.xclass = classSelect; //sets class to saved value 
        
                    charVals.resistMagicka = responseDataCHAR2[0].resistMagicka;
                    charVals.resistFire = responseDataCHAR2[0].resistFire;
                    charVals.resistFrost = responseDataCHAR2[0].resistFrost;
                    charVals.resistShock = responseDataCHAR2[0].resistShock;
                    charVals.resistPoison = responseDataCHAR2[0].resistPoison;
                    charVals.resistCommonDisease = responseDataCHAR2[0].resistCommonDisease;
        
        
        
                    checkLoad = 1; //sets load as active  
        
                    LoadDetected();
        
        
        
                } else if (this.readyState == 4 && this.status == 204) {
        
                    console.log("ERROR: VALUES NOT RETRIEVED");
                    throw "error";
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
        
            };
            xmlhttp.send();
        
        
        
        }
        
        
        
        
        //-------CHARACTER3 LOAD-------------------------------------------
        
        function Character3Chosen() {
        
        
        
        
            event.preventDefault();
        
            charTable = "CHARACTER3";
            charColumn = "CHAR3";
            char = char3;
        
        
        
        
            var xmlhttp = new XMLHttpRequest();
            var endpoint = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
            var inp1 = acc_id;
            var inp2 = char3;
        
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
                acc_id: inp1,
                char3GET: inp2
            });
        
        
            var end = "&char3=Submit";
            var query = inpNext.toString();
            var url = endpoint + query + end;
        
        
            xmlhttp.open("GET", url, true);
            xmlhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
        
        
        
                    var responseDataCHAR3 = JSON.parse(this.response);
        
        
                    UserCalcPage();
        
                    const characterNameInput = document.querySelector("#characterNameInput");
        
                    char3 = responseDataCHAR3[0].char3;
        
                    characterNameInput.value = char3;
                    SetCharName();
        
                    charVals.health = responseDataCHAR3[0].health;
                    charVals.magicka = responseDataCHAR3[0].magicka;
                    charVals.fatigue = responseDataCHAR3[0].fatigue;
        
                    //sub-main
                    charVals.encumbrance = responseDataCHAR3[0].encumbrance;
        
                    //attributes 
                    enduranceAttributeInputFinal = responseDataCHAR3[0].endurance;
                    strengthAttributeInputFinal = responseDataCHAR3[0].strength;
                    intelligenceAttributeInputFinal = responseDataCHAR3[0].intelligence;
                    willpowerAttributeInputFinal = responseDataCHAR3[0].willpower;
                    agilityAttributeInputFinal = responseDataCHAR3[0].agility;
                    speedAttributeInputFinal = responseDataCHAR3[0].speed;
                    personalityAttributeInputFinal = responseDataCHAR3[0].personality;
                    luckAttributeInputFinal = responseDataCHAR3[0].luck;
        
                    charVals.magickaMltiplierBonus = responseDataCHAR3[0].magickaMultiplierBonus;
                    //skills
                    //endurance 
                    heavyArmorInputFinal = responseDataCHAR3[0].heavyArmor;
                    mediumArmorInputFinal = responseDataCHAR3[0].mediumArmor;
                    spearInputFinal = responseDataCHAR3[0].spear;
                    //strength 
                    acrobaticsInputFinal = responseDataCHAR3[0].acrobatics;
                    armorerInputFinal = responseDataCHAR3[0].armorer;
                    axeInputFinal = responseDataCHAR3[0].axe;
                    bluntWeaponInputFinal = responseDataCHAR3[0].bluntWeapon;
                    longBladeInputFinal = responseDataCHAR3[0].longBlade;
        
                    console.log("heavyArmorInpFinal: " + heavyArmorInputFinal);
                    //agility 
                    blockInputFinal = responseDataCHAR3[0].block;
                    lightArmorInputFinal = responseDataCHAR3[0].lightArmor;
                    marksmanInputFinal = responseDataCHAR3[0].marksman;
                    sneakInputFinal = responseDataCHAR3[0].sneak;
                    //speed 
                    athleticsInputFinal = responseDataCHAR3[0].athletics;
                    handToHandInputFinal = responseDataCHAR3[0].handToHand;
                    shortBladeInputFinal = responseDataCHAR3[0].shortBlade;
                    unarmoredInputFinal = responseDataCHAR3[0].unarmored;
                    //personality
                    illusionInputFinal = responseDataCHAR3[0].illusion;
                    mercantileInputFinal = responseDataCHAR3[0].mercantile;
                    speechcraftInputFinal = responseDataCHAR3[0].speechcraft;
                    //intelligence
                    alchemyInputFinal = responseDataCHAR3[0].alchemy;
                    conjurationInputFinal = responseDataCHAR3[0].conjuration;
                    enchantInputFinal = responseDataCHAR3[0].enchant;
                    securityInputFinal = responseDataCHAR3[0].xsecurity;
                    //willpower
                    alterationInputFinal = responseDataCHAR3[0].alteration;
                    destructionInputFinal = responseDataCHAR3[0].destruction;
                    mysticismInputFinal = responseDataCHAR3[0].mysticism;
                    restorationInputFinal = responseDataCHAR3[0].restoration;
        
        
                    charVals.gender = responseDataCHAR3[0].gender;
                    charVals.race = responseDataCHAR3[0].race;
        
                    charVals.birthsign = responseDataCHAR3[0].birthsign;
        
                    classSelect = responseDataCHAR3[0].class;
        
                    charVals.xclass = classSelect; //sets class to saved value 
        
                    charVals.resistMagicka = responseDataCHAR3[0].resistMagicka;
                    charVals.resistFire = responseDataCHAR3[0].resistFire;
                    charVals.resistFrost = responseDataCHAR3[0].resistFrost;
                    charVals.resistShock = responseDataCHAR3[0].resistShock;
                    charVals.resistPoison = responseDataCHAR3[0].resistPoison;
                    charVals.resistCommonDisease = responseDataCHAR3[0].resistCommonDisease;
        
        
                    checkLoad = 1; //sets load as active  
        
                    LoadDetected();
        
                } else if (this.readyState == 4 && this.status == 204) {
        
                    console.log("ERROR: VALUES NOT RETRIEVED");
                    throw "error";
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
        
            };
            xmlhttp.send();
        
        
        
        }
        
        
        
        
        //-------CHARACTER4 LOAD-------------------------------------------
        
        function Character4Chosen() {
        
        
        
        
            event.preventDefault();
        
            charTable = "CHARACTER4";
            charColumn = "CHAR4";
            char = char4;
        
        
        
            var xmlhttp = new XMLHttpRequest();
            var endpoint = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
            var inp1 = acc_id;
            var inp2 = char4;
        
            console.log(inp1);
            console.log(inp2);
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
                acc_id: inp1,
                char4GET: inp2
            });
        
        
            var end = "&char4=Submit";
            var query = inpNext.toString();
            var url = endpoint + query + end;
        
        
        
            xmlhttp.open("GET", url, true);
            xmlhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
        
        
        
        
                    var responseDataCHAR4 = JSON.parse(this.response);
        
        
                    UserCalcPage();
        
                    const characterNameInput = document.querySelector("#characterNameInput");
        
                    char4 = responseDataCHAR4[0].char4;
        
                    characterNameInput.value = char4;
                    SetCharName();
        
                    charVals.health = responseDataCHAR4[0].health;
                    charVals.magicka = responseDataCHAR4[0].magicka;
                    charVals.fatigue = responseDataCHAR4[0].fatigue;
        
                    //sub-main
                    charVals.encumbrance = responseDataCHAR4[0].encumbrance;
        
                    //attributes 
                    enduranceAttributeInputFinal = responseDataCHAR4[0].endurance;
                    strengthAttributeInputFinal = responseDataCHAR4[0].strength;
                    intelligenceAttributeInputFinal = responseDataCHAR4[0].intelligence;
                    willpowerAttributeInputFinal = responseDataCHAR4[0].willpower;
                    agilityAttributeInputFinal = responseDataCHAR4[0].agility;
                    speedAttributeInputFinal = responseDataCHAR4[0].speed;
                    personalityAttributeInputFinal = responseDataCHAR4[0].personality;
                    luckAttributeInputFinal = responseDataCHAR4[0].luck;
        
        
                    charVals.magickaMltiplierBonus = responseDataCHAR4[0].magickaMultiplierBonus; // <-- THIS IS VERY MUCH SUBJECT TO CHANGE;
                    //skills
                    //endurance 
                    heavyArmorInputFinal = responseDataCHAR4[0].heavyArmor;
                    mediumArmorInputFinal = responseDataCHAR4[0].mediumArmor;
                    spearInputFinal = responseDataCHAR4[0].spear;
                    //strength 
                    acrobaticsInputFinal = responseDataCHAR4[0].acrobatics;
                    armorerInputFinal = responseDataCHAR4[0].armorer;
                    axeInputFinal = responseDataCHAR4[0].axe;
                    bluntWeaponInputFinal = responseDataCHAR4[0].bluntWeapon;
                    longBladeInputFinal = responseDataCHAR4[0].longBlade;
        
        
                    //agility 
                    blockInputFinal = responseDataCHAR4[0].block;
                    lightArmorInputFinal = responseDataCHAR4[0].lightArmor;
                    marksmanInputFinal = responseDataCHAR4[0].marksman;
                    sneakInputFinal = responseDataCHAR4[0].sneak;
                    //speed 
                    athleticsInputFinal = responseDataCHAR4[0].athletics;
                    handToHandInputFinal = responseDataCHAR4[0].handToHand;
                    shortBladeInputFinal = responseDataCHAR4[0].shortBlade;
                    unarmoredInputFinal = responseDataCHAR4[0].unarmored;
                    //personality
                    illusionInputFinal = responseDataCHAR4[0].illusion;
                    mercantileInputFinal = responseDataCHAR4[0].mercantile;
                    speechcraftInputFinal = responseDataCHAR4[0].speechcraft;
                    //intelligence
                    alchemyInputFinal = responseDataCHAR4[0].alchemy;
                    conjurationInputFinal = responseDataCHAR4[0].conjuration;
                    enchantInputFinal = responseDataCHAR4[0].enchant;
                    securityInputFinal = responseDataCHAR4[0].xsecurity;
                    //willpower
                    alterationInputFinal = responseDataCHAR4[0].alteration;
                    destructionInputFinal = responseDataCHAR4[0].destruction;
                    mysticismInputFinal = responseDataCHAR4[0].mysticism;
                    restorationInputFinal = responseDataCHAR4[0].restoration;
        
        
                    charVals.gender = responseDataCHAR4[0].gender;
                    charVals.race = responseDataCHAR4[0].race;
        
                    charVals.birthsign = responseDataCHAR4[0].birthsign;
        
                    classSelect = responseDataCHAR4[0].class;
        
                    charVals.xclass = classSelect; //sets class to saved value 
        
        
                    charVals.resistMagicka = responseDataCHAR4[0].resistMagicka;
                    charVals.resistFire = responseDataCHAR4[0].resistFire;
                    charVals.resistFrost = responseDataCHAR4[0].resistFrost;
                    charVals.resistShock = responseDataCHAR4[0].resistShock;
                    charVals.resistPoison = responseDataCHAR4[0].resistPoison;
                    charVals.resistCommonDisease = responseDataCHAR4[0].resistCommonDisease;
        
                    //HERE123
        
                    checkLoad = 1; //sets load as active  
        
                    LoadDetected();
        
        
                } else if (this.readyState == 4 && this.status == 204) {
        
                    console.log("ERROR: VALUES NOT RETRIEVED");
                    throw "error";
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
        
            };
            xmlhttp.send();
        
        
        
        }
        
        
        
        
        //-------CHARACTER5 LOAD-------------------------------------------
        
        function Character5Chosen() {
        
        
            event.preventDefault();
        
            charTable = "CHARACTER5";
            charColumn = "CHAR5";
            char = char5;
        
        
        
        
            var xmlhttp = new XMLHttpRequest();
            var endpoint = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
            var inp1 = acc_id;
            var inp2 = char5;
        
            console.log(inp1);
            console.log(inp2);
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
                acc_id: inp1,
                char5GET: inp2
            });
        
            var end = "&char5=Submit";
            var query = inpNext.toString();
            var url = endpoint + query + end;
        
            xmlhttp.open("GET", url, true);
            xmlhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
        
        
                    var responseDataCHAR5 = JSON.parse(this.response);
        
        
                    UserCalcPage();
        
                    const characterNameInput = document.querySelector("#characterNameInput");
        
                    char5 = responseDataCHAR5[0].char5;
        
                    characterNameInput.value = char5;
                    SetCharName();
        
                    charVals.health = responseDataCHAR5[0].health;
                    charVals.magicka = responseDataCHAR5[0].magicka;
                    charVals.fatigue = responseDataCHAR5[0].fatigue;
        
                    //sub-main
                    charVals.encumbrance = responseDataCHAR5[0].encumbrance;
        
                    //attributes 
                    enduranceAttributeInputFinal = responseDataCHAR5[0].endurance;
                    strengthAttributeInputFinal = responseDataCHAR5[0].strength;
                    intelligenceAttributeInputFinal = responseDataCHAR5[0].intelligence;
                    willpowerAttributeInputFinal = responseDataCHAR5[0].willpower;
                    agilityAttributeInputFinal = responseDataCHAR5[0].agility;
                    speedAttributeInputFinal = responseDataCHAR5[0].speed;
                    personalityAttributeInputFinal = responseDataCHAR5[0].personality;
                    luckAttributeInputFinal = responseDataCHAR5[0].luck;
        
        
                    charVals.magickaMltiplierBonus = responseDataCHAR5[0].magickaMultiplierBonus; // <-- THIS IS VERY MUCH SUBJECT TO CHANGE;
                    //skills
                    //endurance 
                    heavyArmorInputFinal = responseDataCHAR5[0].heavyArmor;
                    mediumArmorInputFinal = responseDataCHAR5[0].mediumArmor;
                    spearInputFinal = responseDataCHAR5[0].spear;
                    //strength 
                    acrobaticsInputFinal = responseDataCHAR5[0].acrobatics;
                    armorerInputFinal = responseDataCHAR5[0].armorer;
                    axeInputFinal = responseDataCHAR5[0].axe;
                    bluntWeaponInputFinal = responseDataCHAR5[0].bluntWeapon;
                    longBladeInputFinal = responseDataCHAR5[0].longBlade;
        
                    //agility 
                    blockInputFinal = responseDataCHAR5[0].block;
                    lightArmorInputFinal = responseDataCHAR5[0].lightArmor;
                    marksmanInputFinal = responseDataCHAR5[0].marksman;
                    sneakInputFinal = responseDataCHAR5[0].sneak;
                    //speed 
                    athleticsInputFinal = responseDataCHAR5[0].athletics;
                    handToHandInputFinal = responseDataCHAR5[0].handToHand;
                    shortBladeInputFinal = responseDataCHAR5[0].shortBlade;
                    unarmoredInputFinal = responseDataCHAR5[0].unarmored;
                    //personality
                    illusionInputFinal = responseDataCHAR5[0].illusion;
                    mercantileInputFinal = responseDataCHAR5[0].mercantile;
                    speechcraftInputFinal = responseDataCHAR5[0].speechcraft;
                    //intelligence
                    alchemyInputFinal = responseDataCHAR5[0].alchemy;
                    conjurationInputFinal = responseDataCHAR5[0].conjuration;
                    enchantInputFinal = responseDataCHAR5[0].enchant;
                    securityInputFinal = responseDataCHAR5[0].xsecurity;
                    //willpower
                    alterationInputFinal = responseDataCHAR5[0].alteration;
                    destructionInputFinal = responseDataCHAR5[0].destruction;
                    mysticismInputFinal = responseDataCHAR5[0].mysticism;
                    restorationInputFinal = responseDataCHAR5[0].restoration;
        
                    charVals.gender = responseDataCHAR5[0].gender;
                    charVals.race = responseDataCHAR5[0].race;
        
                    charVals.birthsign = responseDataCHAR5[0].birthsign;
        
                    classSelect = responseDataCHAR5[0].class;
        
                    charVals.xclass = classSelect; //sets class to saved value 
        
                    charVals.resistMagicka = responseDataCHAR5[0].resistMagicka;
                    charVals.resistFire = responseDataCHAR5[0].resistFire;
                    charVals.resistFrost = responseDataCHAR5[0].resistFrost;
                    charVals.resistShock = responseDataCHAR5[0].resistShock;
                    charVals.resistPoison = responseDataCHAR5[0].resistPoison;
                    charVals.resistCommonDisease = responseDataCHAR5[0].resistCommonDisease;
        
        
                    checkLoad = 1; //sets load as active  
        
                    LoadDetected();
        
        
                } else if (this.readyState == 4 && this.status == 204) {
        
                    console.log("ERROR: VALUES NOT RETRIEVED");
                    throw "error";
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
        
            };
            xmlhttp.send();
        
        
        
        }
        
        
        
        //-------CHARACTER6 LOAD-------------------------------------------
        
        function Character6Chosen() {
        
            event.preventDefault();
        
            charTable = "CHARACTER6";
            charColumn = "CHAR6";
            char = char6;
        
        
        
            var xmlhttp = new XMLHttpRequest();
            var endpoint = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
            var inp1 = acc_id;
            var inp2 = char6;
        
            console.log(inp1);
            console.log(inp2);
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
                acc_id: inp1,
                char6GET: inp2
            });
        
        
            var end = "&char6=Submit";
            var query = inpNext.toString();
            var url = endpoint + query + end;
        
        
        
            xmlhttp.open("GET", url, true);
            xmlhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
        
        
        
                    var responseDataCHAR6 = JSON.parse(this.response);
        
        
                    UserCalcPage();
        
                    const characterNameInput = document.querySelector("#characterNameInput");
        
                    char6 = responseDataCHAR6[0].char6;
        
                    characterNameInput.value = char6;
                    SetCharName();
        
                    charVals.health = responseDataCHAR6[0].health;
                    charVals.magicka = responseDataCHAR6[0].magicka;
                    charVals.fatigue = responseDataCHAR6[0].fatigue;
        
                    //sub-main
                    charVals.encumbrance = responseDataCHAR6[0].encumbrance;
        
                    //attributes 
                    enduranceAttributeInputFinal = responseDataCHAR6[0].endurance;
                    strengthAttributeInputFinal = responseDataCHAR6[0].strength;
                    intelligenceAttributeInputFinal = responseDataCHAR6[0].intelligence;
                    willpowerAttributeInputFinal = responseDataCHAR6[0].willpower;
                    agilityAttributeInputFinal = responseDataCHAR6[0].agility;
                    speedAttributeInputFinal = responseDataCHAR6[0].speed;
                    personalityAttributeInputFinal = responseDataCHAR6[0].personality;
                    luckAttributeInputFinal = responseDataCHAR6[0].luck;
        
                    charVals.magickaMltiplierBonus = responseDataCHAR6[0].magickaMultiplierBonus; // <-- THIS IS VERY MUCH SUBJECT TO CHANGE;
                    //skills
                    //endurance 
                    heavyArmorInputFinal = responseDataCHAR6[0].heavyArmor;
                    mediumArmorInputFinal = responseDataCHAR6[0].mediumArmor;
                    spearInputFinal = responseDataCHAR6[0].spear;
                    //strength 
                    acrobaticsInputFinal = responseDataCHAR6[0].acrobatics;
                    armorerInputFinal = responseDataCHAR6[0].armorer;
                    axeInputFinal = responseDataCHAR6[0].axe;
                    bluntWeaponInputFinal = responseDataCHAR6[0].bluntWeapon;
                    longBladeInputFinal = responseDataCHAR6[0].longBlade;
        
                    //agility 
                    blockInputFinal = responseDataCHAR6[0].block;
                    lightArmorInputFinal = responseDataCHAR6[0].lightArmor;
                    marksmanInputFinal = responseDataCHAR6[0].marksman;
                    sneakInputFinal = responseDataCHAR6[0].sneak;
                    //speed 
                    athleticsInputFinal = responseDataCHAR6[0].athletics;
                    handToHandInputFinal = responseDataCHAR6[0].handToHand;
                    shortBladeInputFinal = responseDataCHAR6[0].shortBlade;
                    unarmoredInputFinal = responseDataCHAR6[0].unarmored;
                    //personality
                    illusionInputFinal = responseDataCHAR6[0].illusion;
                    mercantileInputFinal = responseDataCHAR6[0].mercantile;
                    speechcraftInputFinal = responseDataCHAR6[0].speechcraft;
                    //intelligence
                    alchemyInputFinal = responseDataCHAR6[0].alchemy;
                    conjurationInputFinal = responseDataCHAR6[0].conjuration;
                    enchantInputFinal = responseDataCHAR6[0].enchant;
                    securityInputFinal = responseDataCHAR6[0].xsecurity;
                    //willpower
                    alterationInputFinal = responseDataCHAR6[0].alteration;
                    destructionInputFinal = responseDataCHAR6[0].destruction;
                    mysticismInputFinal = responseDataCHAR6[0].mysticism;
                    restorationInputFinal = responseDataCHAR6[0].restoration;
        
                    charVals.gender = responseDataCHAR6[0].gender;
                    charVals.race = responseDataCHAR6[0].race;
        
                    charVals.birthsign = responseDataCHAR6[0].birthsign;
        
                    classSelect = responseDataCHAR6[0].class;
        
                    charVals.xclass = classSelect; //sets class to saved value 
        
                    charVals.resistMagicka = responseDataCHAR6[0].resistMagicka;
                    charVals.resistFire = responseDataCHAR6[0].resistFire;
                    charVals.resistFrost = responseDataCHAR6[0].resistFrost;
                    charVals.resistShock = responseDataCHAR6[0].resistShock;
                    charVals.resistPoison = responseDataCHAR6[0].resistPoison;
                    charVals.resistCommonDisease = responseDataCHAR6[0].resistCommonDisease;
        
                    checkLoad = 1; //sets load as active  
        
                    LoadDetected();
        
                } else if (this.readyState == 4 && this.status == 204) {
        
                    console.log("ERROR: VALUES NOT RETRIEVED");
                    throw "error";
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
        
            };
            xmlhttp.send();
        
        
        
        }
        
        
        
        
        //-------CHARACTER7 LOAD-------------------------------------------
        
        function Character7Chosen() {
        
            event.preventDefault();
        
            charTable = "CHARACTER7";
            charColumn = "CHAR7";
            char = char7;
        
        
        
        
            var xmlhttp = new XMLHttpRequest();
            var endpoint = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
            var inp1 = acc_id;
            var inp2 = char7;
        
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
                acc_id: inp1,
                char7GET: inp2
            });
        
        
        
            var end = "&char7=Submit";
            var query = inpNext.toString();
            var url = endpoint + query + end;
        
            xmlhttp.open("GET", url, true);
            xmlhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    console.log("success7");
        
        
                    var responseDataCHAR7 = JSON.parse(this.response);
        
        
                    UserCalcPage();
        
                    const characterNameInput = document.querySelector("#characterNameInput");
        
                    char7 = responseDataCHAR7[0].char7;
        
                    characterNameInput.value = char7;
                    SetCharName();
        
                    charVals.health = responseDataCHAR7[0].health;
                    charVals.magicka = responseDataCHAR7[0].magicka;
                    charVals.fatigue = responseDataCHAR7[0].fatigue;
        
                    //sub-main
                    charVals.encumbrance = responseDataCHAR7[0].encumbrance;
        
                    //attributes 
                    enduranceAttributeInputFinal = responseDataCHAR7[0].endurance;
                    strengthAttributeInputFinal = responseDataCHAR7[0].strength;
                    intelligenceAttributeInputFinal = responseDataCHAR7[0].intelligence;
                    willpowerAttributeInputFinal = responseDataCHAR7[0].willpower;
                    agilityAttributeInputFinal = responseDataCHAR7[0].agility;
                    speedAttributeInputFinal = responseDataCHAR7[0].speed;
                    personalityAttributeInputFinal = responseDataCHAR7[0].personality;
                    luckAttributeInputFinal = responseDataCHAR7[0].luck;
        
        
                    charVals.magickaMltiplierBonus = responseDataCHAR7[0].magickaMultiplierBonus; // <-- THIS IS VERY MUCH SUBJECT TO CHANGE;
                    //skills
                    //endurance 
                    heavyArmorInputFinal = responseDataCHAR7[0].heavyArmor;
                    mediumArmorInputFinal = responseDataCHAR7[0].mediumArmor;
                    spearInputFinal = responseDataCHAR7[0].spear;
                    //strength 
                    acrobaticsInputFinal = responseDataCHAR7[0].acrobatics;
                    armorerInputFinal = responseDataCHAR7[0].armorer;
                    axeInputFinal = responseDataCHAR7[0].axe;
                    bluntWeaponInputFinal = responseDataCHAR7[0].bluntWeapon;
                    longBladeInputFinal = responseDataCHAR7[0].longBlade;
        
                    //agility 
                    blockInputFinal = responseDataCHAR7[0].block;
                    lightArmorInputFinal = responseDataCHAR7[0].lightArmor;
                    marksmanInputFinal = responseDataCHAR7[0].marksman;
                    sneakInputFinal = responseDataCHAR7[0].sneak;
                    //speed 
                    athleticsInputFinal = responseDataCHAR7[0].athletics;
                    handToHandInputFinal = responseDataCHAR7[0].handToHand;
                    shortBladeInputFinal = responseDataCHAR7[0].shortBlade;
                    unarmoredInputFinal = responseDataCHAR7[0].unarmored;
                    //personality
                    illusionInputFinal = responseDataCHAR7[0].illusion;
                    mercantileInputFinal = responseDataCHAR7[0].mercantile;
                    speechcraftInputFinal = responseDataCHAR7[0].speechcraft;
                    //intelligence
                    alchemyInputFinal = responseDataCHAR7[0].alchemy;
                    conjurationInputFinal = responseDataCHAR7[0].conjuration;
                    enchantInputFinal = responseDataCHAR7[0].enchant;
                    securityInputFinal = responseDataCHAR7[0].xsecurity;
                    //willpower
                    alterationInputFinal = responseDataCHAR7[0].alteration;
                    destructionInputFinal = responseDataCHAR7[0].destruction;
                    mysticismInputFinal = responseDataCHAR7[0].mysticism;
                    restorationInputFinal = responseDataCHAR7[0].restoration;
        
                    charVals.gender = responseDataCHAR7[0].gender;
                    charVals.race = responseDataCHAR7[0].race;
        
                    charVals.birthsign = responseDataCHAR7[0].birthsign;
        
                    classSelect = responseDataCHAR7[0].class;
        
                    charVals.xclass = classSelect; //sets class to saved value 
        
                    charVals.resistMagicka = responseDataCHAR7[0].resistMagicka;
                    charVals.resistFire = responseDataCHAR7[0].resistFire;
                    charVals.resistFrost = responseDataCHAR7[0].resistFrost;
                    charVals.resistShock = responseDataCHAR7[0].resistShock;
                    charVals.resistPoison = responseDataCHAR7[0].resistPoison;
                    charVals.resistCommonDisease = responseDataCHAR7[0].resistCommonDisease;
        
        
                    checkLoad = 1; //sets load as active  
        
                    LoadDetected();
        
        
        
        
                } else if (this.readyState == 4 && this.status == 204) {
        
                    console.log("ERROR: VALUES NOT RETRIEVED");
                    throw "error";
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
        
            };
            xmlhttp.send();
        
        
        
        }
        
        
        
        
        //-------CHARACTER8 LOAD-------------------------------------------
        
        function Character8Chosen() {
        
        
            event.preventDefault();
        
            charTable = "CHARACTER8";
            charColumn = "CHAR8";
            char = char8;
        
        
            var xmlhttp = new XMLHttpRequest();
            var endpoint = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
            var inp1 = acc_id;
            var inp2 = char8;
        
            var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
                acc_id: inp1,
                char8GET: inp2
            });
        
            var end = "&char8=Submit";
            var query = inpNext.toString();
            var url = endpoint + query + end;
        
            xmlhttp.open("GET", url, true);
            xmlhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    console.log("success8");
        
        
                    var responseDataCHAR8 = JSON.parse(this.response);
        
        
                    UserCalcPage();
        
                    const characterNameInput = document.querySelector("#characterNameInput");
        
                    char8 = responseDataCHAR8[0].char8;
        
                    characterNameInput.value = char8;
                    SetCharName();
        
                    charVals.health = responseDataCHAR8[0].health;
                    charVals.magicka = responseDataCHAR8[0].magicka;
                    charVals.fatigue = responseDataCHAR8[0].fatigue;
        
                    //sub-main
                    charVals.encumbrance = responseDataCHAR8[0].encumbrance;
        
                    //attributes 
                    enduranceAttributeInputFinal = responseDataCHAR8[0].endurance;
                    strengthAttributeInputFinal = responseDataCHAR8[0].strength;
                    intelligenceAttributeInputFinal = responseDataCHAR8[0].intelligence;
                    willpowerAttributeInputFinal = responseDataCHAR8[0].willpower;
                    agilityAttributeInputFinal = responseDataCHAR8[0].agility;
                    speedAttributeInputFinal = responseDataCHAR8[0].speed;
                    personalityAttributeInputFinal = responseDataCHAR8[0].personality;
                    luckAttributeInputFinal = responseDataCHAR8[0].luck;
        
                    charVals.magickaMltiplierBonus = responseDataCHAR8[0].magickaMultiplierBonus; // <-- THIS IS VERY MUCH SUBJECT TO CHANGE;
                    //skills
                    //endurance 
                    heavyArmorInputFinal = responseDataCHAR8[0].heavyArmor;
                    mediumArmorInputFinal = responseDataCHAR8[0].mediumArmor;
                    spearInputFinal = responseDataCHAR8[0].spear;
                    //strength 
                    acrobaticsInputFinal = responseDataCHAR8[0].acrobatics;
                    armorerInputFinal = responseDataCHAR8[0].armorer;
                    axeInputFinal = responseDataCHAR8[0].axe;
                    bluntWeaponInputFinal = responseDataCHAR8[0].bluntWeapon;
                    longBladeInputFinal = responseDataCHAR8[0].longBlade;
        
                    //agility 
                    blockInputFinal = responseDataCHAR8[0].block;
                    lightArmorInputFinal = responseDataCHAR8[0].lightArmor;
                    marksmanInputFinal = responseDataCHAR8[0].marksman;
                    sneakInputFinal = responseDataCHAR8[0].sneak;
                    //speed 
                    athleticsInputFinal = responseDataCHAR8[0].athletics;
                    handToHandInputFinal = responseDataCHAR8[0].handToHand;
                    shortBladeInputFinal = responseDataCHAR8[0].shortBlade;
                    unarmoredInputFinal = responseDataCHAR8[0].unarmored;
                    //personality
                    illusionInputFinal = responseDataCHAR8[0].illusion;
                    mercantileInputFinal = responseDataCHAR8[0].mercantile;
                    speechcraftInputFinal = responseDataCHAR8[0].speechcraft;
                    //intelligence
                    alchemyInputFinal = responseDataCHAR8[0].alchemy;
                    conjurationInputFinal = responseDataCHAR8[0].conjuration;
                    enchantInputFinal = responseDataCHAR8[0].enchant;
                    securityInputFinal = responseDataCHAR8[0].xsecurity;
                    //willpower
                    alterationInputFinal = responseDataCHAR8[0].alteration;
                    destructionInputFinal = responseDataCHAR8[0].destruction;
                    mysticismInputFinal = responseDataCHAR8[0].mysticism;
                    restorationInputFinal = responseDataCHAR8[0].restoration;
        
                    charVals.gender = responseDataCHAR8[0].gender;
                    charVals.race = responseDataCHAR8[0].race;
        
                    charVals.birthsign = responseDataCHAR8[0].birthsign;
        
                    classSelect = responseDataCHAR8[0].class;
        
                    charVals.xclass = classSelect; //sets class to saved value 
        
                    charVals.resistMagicka = responseDataCHAR8[0].resistMagicka;
                    charVals.resistFire = responseDataCHAR8[0].resistFire;
                    charVals.resistFrost = responseDataCHAR8[0].resistFrost;
                    charVals.resistShock = responseDataCHAR8[0].resistShock;
                    charVals.resistPoison = responseDataCHAR8[0].resistPoison;
                    charVals.resistCommonDisease = responseDataCHAR8[0].resistCommonDisease;
        
        
        
                    checkLoad = 1; //sets load as active  
        
                    LoadDetected();
        
        
                } else if (this.readyState == 4 && this.status == 204) {
        
                    console.log("ERROR: VALUES NOT RETRIEVED");
                    throw "error";
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
        
            };
            xmlhttp.send();
        
        
        
        }
        
        
        //--------------POST VALUES [SAVE FUNCTION]---------------------   
        
        function SaveCharacter() {
        
            event.preventDefault();
        
        
            var submitSave = "&save=Submit";
        
        
            //sets all hidden inputs to be saved and sent to d/b
        
            var inpSave = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
        
        
                //set in parent js file 
                charTable: charTable,
                charColumn: charColumn,
                acc_idSave: acc_id,
        
                //maybe need to tweak
                char: characterName,
        
        
                //charvals
                health: charVals.health,
                magicka: charVals.magicka,
                fatigue: charVals.fatigue,
                encumbrance: charVals.encumbrance,
                strength: strengthAttributeInputFinal,
                intelligence: intelligenceAttributeInputFinal,
                willpower: willpowerAttributeInputFinal,
                agility: agilityAttributeInputFinal,
                speed: speedAttributeInputFinal,
                endurance: enduranceAttributeInputFinal,
                personality: personalityAttributeInputFinal,
                luck: luckAttributeInputFinal,
                magickaMultiplierBonus: charVals.magickaMultiplierBonus,
                heavyArmor: heavyArmorInputFinal,
                mediumArmor: mediumArmorInputFinal,
                spear: spearInputFinal,
                acrobatics: acrobaticsInputFinal,
                armorer: armorerInputFinal,
                axe: axeInputFinal,
                bluntWeapon: bluntWeaponInputFinal,
                longBlade: longBladeInputFinal,
                block: blockInputFinal,
                lightArmor: lightArmorInputFinal,
                marksman: marksmanInputFinal,
                sneak: sneakInputFinal,
                athletics: athleticsInputFinal,
                handToHand: handToHandInputFinal,
                shortBlade: shortBladeInputFinal,
                unarmored: unarmoredInputFinal,
                illusion: illusionInputFinal,
                mercantile: mercantileInputFinal,
                speechcraft: speechcraftInputFinal,
                alchemy: alchemyInputFinal,
                conjuration: conjurationInputFinal,
                enchant: enchantInputFinal,
                xsecurity: securityInputFinal,
                alteration: alterationInputFinal,
                destruction: destructionInputFinal,
                mysticism: mysticismInputFinal,
                restoration: restorationInputFinal,
                gender: charVals.gender,
                race: charVals.race,
                birthsign: charVals.birthsign,
                resistMagicka: charVals.resistMagicka,
                resistFire: charVals.resistFire,
                resistFrost: charVals.resistFrost,
                resistShock: charVals.resistShock,
                resistPoison: charVals.resistPoison,
                resistCommonDisease: charVals.resistCommonDisease,
                xclass: charVals.xclass
            });
        
        
        
            var inpFinalSave = inpSave.toString();
            var dataSave = inpFinalSave + submitSave;
        
            var xmlSave = new XMLHttpRequest();
            var urlSave = "https://jg1044.brighton.domains/GridTest/account-api.php";
        
            xmlSave.open("POST", urlSave, true);
            xmlSave.setRequestHeader("content-type",
                "application/x-www-form-urlencoded");
        
            xmlSave.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 204) {
                    console.log("Save success");
                    console.log(xmlSave.status);
        
        
                    RetrieveLoginInfo(); //retrieves login info and updates character information 
        
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
            };
        
            xmlSave.send(dataSave);
        
        }
        
        
        
        
        //--------------------------------Value retrieval function----- used primarily for login page save and delete to update character name information
        
        function RetrieveLoginInfo() {
        
        
            var submitLogin = "&retrieve=Submit";
        
        
            var inpLogin = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
        
                acc_id: acc_id
        
            });
        
        
            var inpFinalLogin = inpLogin.toString();
            var dataLogin = inpFinalLogin + submitLogin;
        
        
            var xmlLogin = new XMLHttpRequest();
            var urlLogin = "https://jg1044.brighton.domains/MorrowindCalculator/account-api.php?";
        
            var finalLogin = urlLogin + dataLogin;
        
        
            xmlLogin.open("GET", finalLogin, true);
            xmlLogin.setRequestHeader("content-type",
                "application/x-www-form-urlencoded");
        
            xmlLogin.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    console.log("Login success");
                    console.log(xmlLogin.status);
        
                    var loginResponseData = JSON.parse(this.response);
                    var loginResponse = JSON.parse(this.responseText);
        
                    console.log(loginResponse);
        
                    acc_id = loginResponseData[0].acc_id;
                    username = loginResponseData[0].username;
                    password = loginResponseData[0].password;
                    email = loginResponseData[0].email;
                    char1 = loginResponseData[0].char1;
                    char2 = loginResponseData[0].char2;
                    char3 = loginResponseData[0].char3;
                    char4 = loginResponseData[0].char4;
                    char5 = loginResponseData[0].char5;
                    char6 = loginResponseData[0].char6;
                    char7 = loginResponseData[0].char7;
                    char8 = loginResponseData[0].char8;
        
        
                    UserLoginPage();
        
                } else if ((this.readyState == 4 && this.status == 400) && (usernameLogin === "" || passwordLogin === "")) {
        
                    console.log("missing input value");
        
                } else if ((this.readyState == 4 && this.status == 403) && (usernameLogin !== "" && passwordLogin !== "")) {
        
                    console.log("password incorrect");
        
        
                } else if ((this.readyState == 4 && this.status == 204) && (usernameLogin !== "" && passwordLogin !== "")) {
        
                    console.log("username not registered");
        
                } else if (this.readyState == 4 && this.status == 500) {
        
                    console.log("Could not connect to database");
        
        
                }
        
        
            };
        
            xmlLogin.send(dataLogin);
        
        }
        
        
        //---------CREATE ACCOUNT-------------------------
        
        function CreateAccount() {
        
            event.preventDefault();
        
            username = document.querySelector("#username").value;
            password = document.querySelector("#password").value;
        
            var inp1 = document.querySelector("#username").value; //these should be const
            var inp2 = document.querySelector("#password").value;
            var inp3 = document.querySelector("#email").value;
        
            //remove whitespace from username and password 
        
            if (/\s/g.test(inp1)) { //detects whitespace in username
        
                console.log("whitespace detected");
                inp1 = inp1.replace(/\s/g, '');
                document.querySelector("#username").value = inp1;
                const usernameLabel = document.querySelector("#user-create-label");
                usernameLabel.textContent = "Username can not contain spaces";
        
                //for whitespace in password replace whitespace with '0' and do same with login 
                //this means that password can be hashed as is part of base64
        
            } else {
        
        
                //removes whitespace from username
                //inp2 = inp2.replace(/\s/g, '');  
        
        
        
                if (/\s/g.test(inp2)) {
        
                    inp2 = inp2.replace(/\s/g, 'o'); //replaces whitespace in passwords with 'o' to make it hashable 
        
        
                }
        
        
                var inpX = "&create=submit";
        
                console.log(inp1);
                console.log(inp2);
                console.log(inp3);
        
                //likely will change this to have no calc values except chars 
        
                var inpNext = new URLSearchParams({ //takes input and creates a query string assigned to var inpNext
        
                    username: inp1,
                    password: inp2,
                    email: inp3,
        
        
                });
        
        
                var inpFinal = inpNext.toString();
                var data = inpFinal + inpX;
        
                var xml = new XMLHttpRequest();
                var url = "https://jg1044.brighton.domains/GridTest/account-api.php";
        
                xml.open("POST", url, true);
                xml.setRequestHeader("content-type",
                    "application/x-www-form-urlencoded");
        
                xml.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 201) {
        
        
                        LoginAccount();
        
        
                    } else if ((this.readyState == 4 && this.status == 400) && (inp1 === "" || inp2 === "" || inp3 === "")) { //sets text displays in case of server request failures due to user error        
        
                        const emailLabel = document.querySelector("#email-create-label");
                        emailLabel.textContent = "A input is missing";
        
                        const passwordLabel = document.querySelector("#pass-create-label");
                        passwordLabel.textContent = "A input is missing";
        
                        const usernameLabel = document.querySelector("#user-create-label");
                        usernameLabel.textContent = "A input is missing";
        
                        console.log("missing input value");
        
                    } else if ((this.readyState == 4 && this.status == 422) && (inp1 !== "" && inp2 !== "" && inp3 !== "")) {
        
                        const usernameLabel = document.querySelector("#user-create-label");
                        usernameLabel.textContent = "Username has been taken";
        
        
        
                    } else if ((this.readyState == 4 && this.status == 409) && (inp1 !== "" && inp2 !== "" && inp3 !== "")) {
        
                        const emailLabel = document.querySelector("#email-create-label");
                        emailLabel.textContent = "Email has been taken";
                        console.log("email taken");
        
        
                    } else if ((this.readyState == 4 && this.status == 400) && (inp1 !== "" && inp2 !== "" && inp3 !== "")) {
        
                        const emailLabel = document.querySelector("#email-create-label");
                        emailLabel.textContent = "Email input is invalid";
                        console.log("email input incorrect");
        
        
                    } else if (this.readyState == 4 && this.status == 500) {
        
                        console.log("Could not connect to database");
        
        
                    }
        
        
                };
        
                xml.send(data);
        
        
            } //end of whitespace validation check 
        
        }
        
        
        
        
        //-------------------DELETE ACCOUNT FUNCITON--------------------------------------   
        
        function DeleteAccount() {
        
        
            event.preventDefault();
        
        
        
            const passIDConfirm = document.querySelector("#passIDConfirm");
            const password2 = document.querySelector("#password2");
        
        
            if (passIDConfirm.value === password2.value) {
        
                password = passIDConfirm.value;
        
        
        
                var url = "https://jg1044.brighton.domains/GridTest/account-api.php?";
        
                var qString = new URLSearchParams({
                    accountID: acc_id,
                    password: password
                });
        
                console.log(qString.toString());
        
        
                var urlFinalDel = url + qString;
        
                console.log(urlFinalDel);
        
                var xmlDel = new XMLHttpRequest();
        
                xmlDel.open("DELETE", urlFinalDel, true);
                xmlDel.setRequestHeader("content-type",
                    "application/x-www-form-urlencoded");
                xmlDel.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        console.log("success");
        
        
                        HomePage();
        
        
                    } else if (this.readyState == 4 && this.status == 401) {
        
                        console.log("unauthorised");
        
                    } else if (this.readyState == 4 && this.status == 404) {
        
                        console.log("account not found");
        
                    }
        
                };
        
                xmlDel.send();
        
            } else { //password incorrect
        
                const label2 = document.querySelector("#password2-label");
                label2.textContent = "Confirm password: Password does not match";
        
        
        
        
            }
        
        
        }
        
        
        
};